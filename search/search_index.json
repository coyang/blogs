{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":""},{"location":"#coyangs-personal-blogs","title":"Coyang\u2019s personal blogs","text":"<p>Be a lifelong learner.</p> <p>Always be acquiring new skills and having new experiences.</p> <p>\u4e00\u4e2a\u4eba\u8981\u50cf\u4e00\u652f\u961f\u4f0d\u3002</p> <p>\u5bf9\u7740\u81ea\u5df1\u7684\u5934\u8111\u548c\u5fc3\u7075\u62db\u5175\u4e70\u9a6c\u3002</p> <p>\u4e0d\u6c14\u9981\uff0c\u6709\u53ec\u5524\uff0c\u7231\u81ea\u7531\u3002</p> <p>-- \u6bd5\u6dd1\u654f</p>"},{"location":"about/","title":"About","text":""},{"location":"about/#coyang","title":"Coyang","text":"<p>85\u540e\u7a0b\u5e8f\u5458, \u64c5\u957fAI Agent \u5f00\u53d1\uff0c \u5206\u5e03\u5f0f\u5b58\u50a8\u548c\u5fae\u670d\u52a1\u9886\u57df\u3002</p> <p>\u6211\u7684\u4e2a\u4eba\u4f18\u52bf\u5305\u62ec\uff1a</p> <ol> <li>AI Agent development</li> <li>\u591a\u8bed\u8a00\u6280\u80fd</li> <li>\u5206\u5e03\u5f0f\u5b58\u50a8\u4e13\u4e1a\u77e5\u8bc6</li> <li>\u5fae\u670d\u52a1\u67b6\u6784\u7ecf\u9a8c</li> <li>\u56e2\u961f\u5408\u4f5c\u80fd\u529b</li> <li>\u89e3\u51b3\u95ee\u9898\u7684\u80fd\u529b</li> <li>\u5b66\u4e60\u80fd\u529b\u548c\u6301\u7eed\u6539\u8fdb</li> </ol>"},{"location":"about/#_1","title":"\u5de5\u4f5c\u7ecf\u5386","text":""},{"location":"about/#domain-knowledge","title":"Domain Knowledge","text":""},{"location":"about/#skillmap","title":"Skillmap","text":""},{"location":"about/#detailes","title":"Detailes:","text":""},{"location":"about/#connect-me","title":"Connect Me","text":""},{"location":"about/skill/skill_map.mm/","title":"COYANG&rsquo;s Skill Map","text":""},{"location":"about/skill/skill_map.mm/#coyangs-skill-map","title":"COYANG\u2019s Skill Map","text":""},{"location":"about/skill/skill_map.mm/#ai","title":"AI","text":""},{"location":"about/skill/skill_map.mm/#common-knowledge","title":"Common knowledge","text":"<ul> <li>LLM</li> <li>Inference</li> <li>Training</li> <li>Fine-tuning</li> <li>Agent</li> <li>RAG</li> <li>Chunking</li> <li>Embedding</li> <li>Vectorization</li> <li>Retrieval</li> <li>Generation</li> <li>Ranking</li> <li>Graph RAG</li> <li>Prompt Engineering</li> </ul>"},{"location":"about/skill/skill_map.mm/#frameworks","title":"Frameworks","text":"<ul> <li>PyTorch</li> <li>TensorFlow</li> <li>Transformers</li> </ul>"},{"location":"about/skill/skill_map.mm/#machine-learning","title":"Machine Learning","text":"<ul> <li>Fundamentals</li> <li>Supervised Learning (regression, classification)</li> <li>Unsupervised Learning (clustering, dimensionality reduction)</li> <li>Reinforcement Learning</li> <li>Advanced Techniques</li> <li>Deep Learning (neural networks, CNNs, RNNs)</li> <li>Natural Language Processing (NLP)</li> <li>Computer Vision</li> </ul>"},{"location":"about/skill/skill_map.mm/#data-skills","title":"Data Skills","text":"<ul> <li>Data Handling</li> <li>Data Preprocessing</li> <li>Feature Engineering</li> <li>Data Visualization</li> </ul>"},{"location":"about/skill/skill_map.mm/#model-development","title":"Model development","text":"<ul> <li>Ollama</li> <li>vLLM</li> <li>Hugging Face</li> </ul>"},{"location":"about/skill/skill_map.mm/#deployment-frameworks","title":"Deployment Frameworks","text":"<ul> <li>Langchain</li> <li>CrewAI</li> <li>LlamaIndex</li> <li>Coze / Dify</li> </ul>"},{"location":"about/skill/skill_map.mm/#agile","title":"Agile","text":"<ul> <li>Extreme Programming</li> <li>Scrum</li> <li>DevOps</li> <li>Version Control<ul> <li>Git</li> </ul> </li> <li>CI / CD</li> <li>Tools<ul> <li>Jenkins</li> <li>Gitlab CI</li> <li>Github action</li> </ul> </li> <li>Lean</li> <li>Kanban</li> </ul>"},{"location":"about/skill/skill_map.mm/#development","title":"Development","text":""},{"location":"about/skill/skill_map.mm/#programming-languages","title":"Programming Languages","text":"<ul> <li>C / C++</li> <li>Golang</li> <li>Python</li> <li>Shell</li> <li>TypeScript</li> </ul>"},{"location":"about/skill/skill_map.mm/#basic-knowledge","title":"Basic knowledge","text":""},{"location":"about/skill/skill_map.mm/#operating-system","title":"Operating System","text":"<ul> <li>Linux</li> </ul>"},{"location":"about/skill/skill_map.mm/#data-structure-and-algorithm","title":"Data structure and Algorithm","text":"<ul> <li>Data structure</li> <li>Algorithm</li> </ul>"},{"location":"about/skill/skill_map.mm/#regexp","title":"RegExp","text":""},{"location":"about/skill/skill_map.mm/#makefile","title":"Makefile","text":"<ul> <li>Automake</li> <li>Spec-packaging</li> </ul>"},{"location":"about/skill/skill_map.mm/#container","title":"Container","text":"<ul> <li>Docker</li> <li>LXC</li> <li>RunC</li> <li>Podman</li> </ul>"},{"location":"about/skill/skill_map.mm/#container-basic","title":"Container basic","text":"<ul> <li>Linux Process Management</li> <li>Cgroups</li> <li>Linux Namespaces</li> <li>Rootfs &amp; Container Image</li> <li>Image Registry</li> </ul>"},{"location":"about/skill/skill_map.mm/#network","title":"Network","text":"<ul> <li>TCP/IP</li> <li>VLANs</li> <li>DNS/CDN</li> <li>HTTP/HTTPS</li> </ul>"},{"location":"about/skill/skill_map.mm/#storage","title":"Storage","text":"<ul> <li> <p>Network Storage</p> </li> <li> <p>Glusterfs</p> </li> <li>AWS EBS</li> <li>NFS v4</li> <li>Ceph</li> <li> <p>Apache CloudStack</p> </li> <li> <p>Object Storage</p> </li> <li> <p>AWS S3</p> </li> <li>OpenStack Swift</li> <li> <p>Ceph</p> </li> <li> <p>Block Storage</p> </li> <li> <p>SAN</p> </li> <li>AWS EBS</li> <li> <p>RAID</p> </li> <li> <p>File System</p> </li> <li> <p>ext4</p> </li> <li>XFS</li> <li>NFS</li> <li>Glusterfs</li> <li>Cephfs</li> <li>cdafs</li> <li> <p>ldapfs</p> </li> <li> <p>IO schedule</p> </li> <li> <p>deadline</p> </li> <li>noop</li> <li> <p>cfq</p> </li> <li> <p>The Linux I/O Stack Diagram</p> </li> </ul>"},{"location":"about/skill/skill_map.mm/#db","title":"DB","text":"<ul> <li>LDAP</li> <li>Vault</li> <li>Redis</li> <li>MySQL</li> <li>Vector DB</li> <li>Graph DB</li> </ul>"},{"location":"about/skill/skill_map.mm/#infrastructure","title":"Infrastructure","text":""},{"location":"about/skill/skill_map.mm/#openstack","title":"OpenStack","text":"<ul> <li>Nova</li> <li>Neutron</li> <li>Cinder</li> <li>Glance</li> <li>Swift</li> <li>Keystone</li> </ul>"},{"location":"about/skill/skill_map.mm/#kubernetes","title":"Kubernetes","text":""},{"location":"about/skill/skill_map.mm/#helm","title":"Helm","text":"<ul> <li>Helm chart development</li> <li>Chart UT</li> <li>kube-linter</li> </ul>"},{"location":"about/skill/skill_map.mm/#kubernetes-architecture","title":"Kubernetes architecture","text":""},{"location":"about/skill/skill_map.mm/#node","title":"Node","text":""},{"location":"about/skill/skill_map.mm/#kubelet","title":"Kubelet","text":"<ul> <li>Runtime</li> <li>CRI (Container Runtime Interface)</li> <li>Runtime shims<ul> <li>Cri-containerd (containerd)</li> <li>Dockershim (Docker)</li> <li>Cri-o (runC)</li> <li>Rktlet (rkt)</li> <li>Frakti (KataContainers)</li> </ul> </li> <li>RuntimeClass</li> <li>Networking</li> <li>CNI (Container Network Interface)</li> <li>Linux Network Namespace</li> <li>Network plugins<ul> <li>Flannel</li> <li>Calico</li> <li>OVS</li> <li>SR-IOV</li> <li>macvlan/ipvlan</li> <li>Opencontrail</li> <li>Weave</li> <li>Cilium</li> </ul> </li> <li>Storage</li> <li>CSI (Container Storage Interface)</li> <li>Persistent Volume &amp; Persistent Volume Claim</li> <li>Volume plugins<ul> <li>NFS</li> <li>Cinder</li> <li>GlusterFS</li> <li>Ceph</li> <li>Local path</li> </ul> </li> <li>Volume extension<ul> <li>Rook.io</li> </ul> </li> <li>Kube-proxy</li> <li>Iptables</li> <li>IPVS</li> </ul>"},{"location":"about/skill/skill_map.mm/#kubernetes-workloads","title":"Kubernetes workloads","text":"<ul> <li>Pod</li> <li>ReplicaSet</li> <li>Deployment</li> <li>Rolling update</li> <li>Pause/resume</li> <li>Canary deploy</li> <li>Rollback</li> <li>DaemonSet</li> <li>StatefulSet</li> <li>Topology State</li> <li>Storage State</li> <li>Job</li> <li>CronJob</li> </ul>"},{"location":"about/skill/skill_map.mm/#kubernetes-applications-management","title":"Kubernetes applications management","text":"<ul> <li>Service</li> <li>Publish service</li> <li>Nginx/HAproxy service</li> <li>External Load Balancer</li> <li>ConfigMap</li> <li>Ingress</li> <li>Secret</li> <li>Headless Service</li> <li>External Load Balancer</li> </ul>"},{"location":"about/skill/skill_map.mm/#testing","title":"Testing","text":"<ul> <li>Unit testing</li> <li>TDD</li> <li>Integration testing</li> <li>Contract Testing</li> <li>Robot</li> <li>Robot Framework</li> <li>Robotidy</li> </ul>"},{"location":"about/skill/skill_map.mm/#clean-code","title":"Clean code","text":""},{"location":"about/skill/skill_map.mm/#quality","title":"Quality","text":"<ul> <li> <p>Code format</p> </li> <li> <p>clang-format</p> </li> <li>gofmt</li> <li>shfmt</li> <li>autopep8</li> <li> <p>\u2026</p> </li> <li> <p>Static analysis</p> </li> <li>coverity</li> <li>clang-tidy</li> <li>scan build</li> <li>pylint</li> <li>golangci-lint</li> <li>rpm lint</li> <li>SonarQube</li> </ul>"},{"location":"about/skill/skill_map.mm/#troubleshooting-and-issue-resolution","title":"Troubleshooting and Issue Resolution","text":"<ul> <li>Log analysis</li> <li>Error tracking</li> <li>Performance problem tuning</li> </ul>"},{"location":"about/skill/skill_map.mm/#documentation","title":"Documentation","text":"<ul> <li>Markdown</li> <li>Restructext</li> <li>AsciiDoc</li> <li>PlantUML</li> <li>Mermaid</li> </ul>"},{"location":"about/skill/skill_map.mm/#hw","title":"HW","text":"<ul> <li>HW Basic</li> <li>CPU</li> <li>Memory</li> <li>Hard Disk</li> </ul>"},{"location":"about/skill/skill_map.mm/#dtv","title":"DTV","text":""},{"location":"about/skill/skill_map.mm/#hw_1","title":"HW","text":"<ul> <li>Chip</li> </ul>"},{"location":"about/skill/skill_map.mm/#sw","title":"SW","text":"<ul> <li>Standard</li> <li>DVB-C</li> <li>DVB-B</li> <li>ISDT-B</li> <li>Feature</li> <li>Audio</li> <li>Video</li> <li>Subtitle</li> <li>EPG</li> </ul>"},{"location":"about/skill/skill_map.mm/#front-end","title":"Front End","text":""},{"location":"about/skill/skill_map.mm/#web-development","title":"Web development","text":"<ul> <li>HTML</li> <li>CSS</li> <li>JavaScript</li> </ul>"},{"location":"ai/ai_devops/","title":"AI DevOps","text":""},{"location":"ai/ai_devops/#ai-devops","title":"AI DevOps","text":""},{"location":"ai/ai_devops/#devops","title":"DevOps","text":"<p>DevOps is a set of practices that combines software development (Dev) and IT operations (Ops). It aims to shorten the systems development life cycle and provide continuous delivery with high software quality. DevOps is complementary to Agile software development; several DevOps aspects came from Agile methodology.</p> <p></p>"},{"location":"ai/ai_devops/#the-devops-lifecycle","title":"The DevOps lifecycle","text":"<ol> <li>Plan: Define the objectives, requirements, and scope of the project.</li> <li>Code: Write and test the code in a controlled environment.</li> <li>Build: Compile the code and create build artifacts.</li> <li>Test: Run automated tests to ensure code quality.</li> <li>Release: Deploy the build artifacts to a staging environment.</li> <li>Deploy: Release the code to a production environment.</li> <li>Operate: Monitor the system for performance and issues.</li> <li>Monitor: Continuously monitor the system and collect feedback.</li> <li>Feedback: Collect feedback from users and stakeholders to improve the    system.</li> </ol>"},{"location":"ai/ai_devops/#ai-powered-devops","title":"AI powered DevOps","text":"<p>AI powered DevOps is the application of artificial intelligence (AI) to enhance the DevOps process. AI can be used to automate repetitive tasks, predict system failures, and optimize system performance. AI powered DevOps can help organizations improve their software development process, reduce downtime, and increase productivity.</p>"},{"location":"ai/ai_devops/#ai-use-cases-in-devops","title":"AI use cases in DevOps","text":""},{"location":"ai/ai_devops/#1-plan-phase","title":"1. Plan Phase","text":"<p>Use AI can helps to brainstorm and generate ideas for the project, also can be use in design thinking.</p>"},{"location":"ai/ai_devops/#2-code-phase","title":"2. Code phase","text":"<p>The AI can be integrated with code editors to provide code suggestions, detect errors, and improve code quality.</p> <ul> <li>GitHub Copilot</li> <li>Cursor</li> <li>Windsurf</li> <li>Trae</li> </ul>"},{"location":"ai/ai_devops/#3-build-and-lint","title":"3. Build and lint","text":"<p>In code lint phase, the AI can be integrated to provide suggestions / correction for the new code.</p>"},{"location":"ai/ai_devops/#4-test","title":"4. Test","text":"<p>AI can be used to generate test cases, automate test execution, and analyze test result.</p>"},{"location":"ai/ai_devops/#5-release","title":"5. Release","text":"<ul> <li>AI can be used to generate release notes base on the code changes.</li> <li>AI can act as clean code master to review the code changes.</li> </ul>"},{"location":"ai/ai_devops/#6-deploy","title":"6. Deploy","text":"<p>AI can be used to automate the deployment process, predict system failures.</p>"},{"location":"ai/ai_devops/#7-operate","title":"7. Operate","text":"<p>AI Ops is a big topic, it can be used to monitor the system, detect failures, and analyze the logs, base on the analysis result to report bug or suggest improvement.</p>"},{"location":"ai/ai_devops/#8-monitor","title":"8. Monitor","text":"<p>AI can be used to monitor the system performance, detect anomalies, and predict system failures.</p>"},{"location":"ai/ai_devops/#9-feedback","title":"9. Feedback","text":"<p>AI can be used to collect feedback from users and stakeholders, analyze the data, and suggest improvements.</p>"},{"location":"ai/ai_devops/#importance-of-ai-in-devops","title":"Importance of AI in DevOps","text":"<p>Even AI can do many things, but it still need human to validate the result and make the decision.</p> <p>AI can\u2019t replace human, it will always be a tool/assistant to help human to do the work.</p>"},{"location":"ai/building_an_ai_application_from_scratch/","title":"Building an AI Application from Scratch","text":""},{"location":"ai/building_an_ai_application_from_scratch/#building-an-ai-application-from-scratch","title":"Building an AI Application from Scratch","text":""},{"location":"ai/building_an_ai_application_from_scratch/#knowledge-tree","title":"Knowledge Tree","text":"<p>AI engineer</p>"},{"location":"ai/building_an_ai_application_from_scratch/#iceberg-model","title":"Iceberg Model","text":""},{"location":"ai/building_an_ai_application_from_scratch/#1-ai-code-review-robot","title":"1. AI Code Review Robot","text":""},{"location":"ai/building_an_ai_application_from_scratch/#2-identifying-the-goal-and-analyzing-requirements","title":"2. Identifying the Goal and Analyzing Requirements","text":"<ul> <li> <p>Goal Definition</p> </li> <li> <p>User Groups</p> </li> <li> <p>Requirements</p> </li> </ul>"},{"location":"ai/building_an_ai_application_from_scratch/#3-data-collection-and-preparation","title":"3. Data Collection and Preparation","text":"<ul> <li> <p>Data Sources</p> </li> <li> <p>Preprocessing Steps</p> </li> </ul>"},{"location":"ai/building_an_ai_application_from_scratch/#4-selecting-technology","title":"4. Selecting Technology","text":""},{"location":"ai/building_an_ai_application_from_scratch/#model-development","title":"Model Development","text":"<ol> <li>Choose a Pre-trained Model</li> <li>Fine-tune the Model</li> </ol>"},{"location":"ai/building_an_ai_application_from_scratch/#5-system-integration-and-deployment","title":"5. System Integration and Deployment","text":""},{"location":"ai/building_an_ai_application_from_scratch/#system-architecture","title":"System Architecture","text":"<ul> <li>Frontend</li> <li>Backend</li> <li>Database</li> </ul>"},{"location":"ai/building_an_ai_application_from_scratch/#integration","title":"Integration","text":""},{"location":"ai/building_an_ai_application_from_scratch/#deployment","title":"Deployment","text":""},{"location":"ai/building_an_ai_application_from_scratch/#6-monitoring-and-continuous-optimization","title":"6. Monitoring and Continuous Optimization","text":""},{"location":"ai/building_an_ai_application_from_scratch/#monitoring","title":"Monitoring","text":"<ul> <li>Real-time logging to identify failures and bottlenecks.</li> <li>Metrics:</li> <li>Response time.</li> <li>Accuracy of suggestions.</li> </ul>"},{"location":"ai/building_an_ai_application_from_scratch/#continuous-improvement","title":"Continuous Improvement","text":"<ul> <li>Regular updates to the model with new data.</li> <li>Expand support for more programming languages.</li> <li>Collect user feedback for better recommendations.</li> </ul>"},{"location":"ai/building_an_ai_application_from_scratch/#7-key-takeaways","title":"7. Key Takeaways","text":"<ul> <li>Split code into smaller chunks.</li> <li>Add line numbers to code snippets.</li> <li>Twice review</li> <li>First for review code</li> <li>Second for review comments validation</li> <li>Use reviewdog helps to summit the comments to the PR.</li> </ul>"},{"location":"ai/building_an_ai_application_from_scratch/#8-cost","title":"8. Cost","text":""},{"location":"ai/building_an_ai_application_from_scratch/#9-closing-thoughts","title":"9. Closing Thoughts","text":"<p>What will AI change in the future?</p>"},{"location":"ai/rag/rag/","title":"RAG","text":""},{"location":"ai/rag/rag/#rag-retrieval-augmented-generation","title":"RAG (Retrieval-Augmented Generation)","text":""},{"location":"ai/rag/rag/#whats-rag","title":"What\u2019s RAG?","text":"<p>RAG stands for Retrieval-Augmented Generation. It is a technique used in natural language processing (NLP) that combines retrieval-based methods with generation-based methods. In RAG, a retrieval model is used to fetch relevant documents or passages from a large corpus, and then a generation model (such as a transformer-based language model) is used to generate a response or output based on the retrieved information. This approach aims to improve the quality and relevance of generated text by leveraging external knowledge sources.</p> <p></p>"},{"location":"ai/rag/rag/#why-rag","title":"Why RAG?","text":"<p>RAG is needed because traditional generation models often struggle with producing accurate and contextually relevant responses, especially when the required information is not present in the training data. By incorporating a retrieval mechanism, RAG can access up-to-date and specific information from external sources, leading to more accurate and informative outputs. This is particularly useful in applications like question answering, customer support, and content creation, where the quality and relevance of the generated text are crucial.</p>"},{"location":"ai/rag/rag/#limitations-of-llms","title":"Limitations of LLMs","text":"<p>Despite the strong capabilities of large language models (LLMs), they still have some limitations:</p> <ol> <li>Knowledge Update Lag: LLMs are typically trained on static datasets and    may not reflect the most recent knowledge and information.</li> <li>Accuracy of Generated Content: Without external knowledge, LLMs may    generate inaccurate or irrelevant content.</li> <li>Limited Context Understanding: LLMs may struggle with understanding long    texts or complex contexts, leading to misinterpretations or missing key    information.</li> <li>High Computational Resources: Training and running LLMs require    significant computational resources, which can be costly.</li> <li>Data Security Issues: General LLMs do not have access to internal    enterprise data and user data. To ensure security, enterprises may prefer to    keep all data locally and perform business computations on-premises, while    using online models only for summarization purposes.</li> </ol>"},{"location":"ai/rag/rag/#rag-processing","title":"RAG processing","text":"<p>The RAG process involves two main steps: Indexing, retrieval and generation.</p>"},{"location":"ai/rag/rag/#indexing","title":"Indexing","text":""},{"location":"ai/rag/rag/#garbage-in-garbage-out","title":"Garbage in, garbage out","text":"<ul> <li>Chunking</li> <li>Select proper embeddings model</li> <li>https://ollama.com/search?c=embedding&amp;q=embedding</li> <li>https://huggingface.co/spaces/mteb/leaderboard</li> <li>Vector DB</li> <li>https://en.wikipedia.org/wiki/Vector_database</li> </ul>"},{"location":"ai/rag/rag/#retrieval","title":"Retrieval","text":"<p>In this step, a retrieval model is used to search a large corpus of documents or passages to find the most relevant information based on the input query. This model can be based on traditional information retrieval techniques or more advanced neural retrieval models.</p>"},{"location":"ai/rag/rag/#generation","title":"Generation","text":"<p>Once the relevant documents or passages are retrieved, a generation model (typically a transformer-based language model) takes this information and generates a coherent and contextually relevant response or output. The generation model leverages the retrieved information to enhance the quality and accuracy of the generated text.</p> <p>By combining these two steps, RAG can produce more accurate and contextually appropriate responses, making it a powerful technique for various NLP applications.</p>"},{"location":"ai/rag/rag/#example-code","title":"Example code","text":"<pre><code>from langchain_openai import ChatOpenAI\nfrom langchain_core.messages import SystemMessage, HumanMessage\n\n# Define a system prompt that tells the model how to use the retrieved context\nsystem_prompt = \"\"\"You are an assistant for question-answering tasks.\nUse the following pieces of retrieved context to answer the question.\nIf you don't know the answer, just say that you don't know.\nUse three sentences maximum and keep the answer concise.\nContext: {context}:\"\"\"\n\n# Define a question\nquestion = \"\"\"What are the main components of an LLM-powered autonomous agent system?\"\"\"\n\n# Retrieve relevant documents\ndocs = retriever.invoke(question)\n\n# Combine the documents into a single string\ndocs_text = \"\".join(d.page_content for d in docs)\n\n# Populate the system prompt with the retrieved context\nsystem_prompt_fmt = system_prompt.format(context=docs_text)\n\n# Create a model\nmodel = ChatOpenAI(model=\"gpt-4o\", temperature=0)\n\n# Generate a response\nquestions = model.invoke([SystemMessage(content=system_prompt_fmt),\n                          HumanMessage(content=question)])\n</code></pre>"},{"location":"ai/rag/rag/#reranking","title":"Reranking","text":""},{"location":"ai/rag/rag/#rag-frameworks","title":"RAG Frameworks","text":"<ul> <li>RAGFlow</li> <li>QAnything</li> <li>AnythingLLM</li> </ul>"},{"location":"ai/rag/rag/#production","title":"Production","text":"<ul> <li>Chat2DB</li> <li>Chatpdf</li> </ul>"},{"location":"ai/rag/rag/#irag","title":"iRAG","text":""},{"location":"ai/rag/rag/#paddlepaddle","title":"PaddlePaddle","text":""},{"location":"ai/rag/rag/#graph-rag","title":"Graph RAG","text":""},{"location":"knowledge/","title":"Home","text":""},{"location":"knowledge/#knowledge","title":"Knowledge","text":""},{"location":"knowledge/#programming-languages","title":"Programming languages","text":""},{"location":"knowledge/#shell","title":"Shell","text":"<ul> <li>shellcheck</li> <li>shfmt</li> </ul>"},{"location":"knowledge/#c-c","title":"C / C++","text":"<ul> <li>Valgrind</li> </ul>"},{"location":"knowledge/#software-development","title":"Software development","text":""},{"location":"knowledge/#technology","title":"Technology","text":""},{"location":"knowledge/#tools","title":"Tools","text":""},{"location":"knowledge/#clean-code","title":"Clean Code","text":""},{"location":"knowledge/#os","title":"OS","text":""},{"location":"knowledge/#cloud-computing","title":"Cloud Computing","text":""},{"location":"knowledge/#security","title":"Security","text":""},{"location":"knowledge/#messagequeue","title":"MessageQueue","text":""},{"location":"knowledge/#devops","title":"DevOps","text":""},{"location":"knowledge/ai/local_deploy_llama/","title":"Local deploy Laama","text":""},{"location":"knowledge/ai/local_deploy_llama/#local-deploy-laama","title":"Local deploy Laama","text":""},{"location":"knowledge/ai/local_deploy_llama/#step-by-step","title":"Step by step","text":"<pre><code>sudo dnf install snapd\nsudo ln -s /var/lib/snapd/snap /snap\nsudo snap install ollama --beta\nsudo snap install ollama-webui --beta\n\n\nollama run gemma:2b\nollama pull gemma\nollama pull orca2\nollama pull orca2:13b\nollama pull starcoder\nollama pull starcoder:7b\nollama pull neural-chat\nollama pull neural-chat:7b\nollama pull neural-chat:7b-v3.3-fp16\nollama pull openchat\nollama pull tinyllama\nollama pull openhermes\nollama pull llama2-chinese\nollama pull llama2-chinese:13b\nollama pull zephyr\nollama pull wizard-vicuna-uncensored:30b\nollama pull wizard-vicuna-uncensored\nollama pull wizard-vicuna-uncensored:13b\nollama pull dolphin-mistral:v2.6\nollama pull orca-mini:13b\nollama pull phi\nollama pull nous-hermes2\nollama pull llava\nollama pull mixtral\nollama pull qwen:7b\nollama pull mistral-openorca\nollama pull codellama\nollama pull codellama:13b\nollama pull llama2:13b\nollama pull neural-chat\nollama pull llava\nollama pull mistral\nollama pull stable-code:3b-code-fp16\n\n</code></pre>"},{"location":"knowledge/ai/local_deploy_llama/#web-ui","title":"Web UI","text":""},{"location":"knowledge/ai/local_deploy_llama/#references","title":"References","text":"<ul> <li>https://github.com/open-webui/open-webui</li> <li>https://ollama.com/</li> </ul>"},{"location":"knowledge/clean_code/","title":"Clean Code","text":""},{"location":"knowledge/cloud_computing/","title":"Cloud Computing","text":""},{"location":"knowledge/cloud_computing/#cloud-computing","title":"Cloud computing","text":""},{"location":"knowledge/cloud_computing/#virtualization","title":"Virtualization","text":"<ul> <li>Docker vs Podman</li> </ul>"},{"location":"knowledge/cloud_computing/virtualization/docker_vs_podman/","title":"Docker VS Podman","text":""},{"location":"knowledge/cloud_computing/virtualization/docker_vs_podman/#docker-vs-podman","title":"Docker VS Podman","text":"<p>In the world of containerization and cloud-native development, Docker and Podman are two popular tools that allow developers and system administrators to manage and run containers efficiently. In this blog post, we\u2019ll explore what Docker and Podman are, outline their differences, and discuss how to choose between them for your projects.</p>"},{"location":"knowledge/cloud_computing/virtualization/docker_vs_podman/#what-is-docker","title":"What is Docker?","text":"<p>Docker is a widely known containerization platform that revolutionized the way applications are packaged and deployed. It provides a complete ecosystem for building, shipping, and running containers. Docker consists of three main components:</p> <ol> <li> <p>Docker Engine: This is the core of Docker, responsible for building,    running, and managing containers. It uses the client-server architecture and    can be controlled via the Docker CLI.</p> </li> <li> <p>Docker Hub: Docker Hub is a cloud-based registry service where you can    find and share container images. It offers a vast repository of pre-built    images that can be used as a starting point for your containers.</p> </li> <li> <p>Docker Compose: Docker Compose is a tool for defining and running    multi-container applications. It allows you to describe the services,    networks, and volumes in a simple YAML file.</p> </li> </ol>"},{"location":"knowledge/cloud_computing/virtualization/docker_vs_podman/#what-is-podman","title":"What is Podman?","text":"<p>Podman is an open-source container management tool that aims to be a compatible alternative to Docker while offering some unique features. Podman is part of the larger OCI (Open Container Initiative) ecosystem and is designed to be more secure and compatible with systemd-based systems. Key features of Podman include:</p> <ul> <li> <p>Rootless Containers: Podman allows running containers as regular users   without requiring root privileges, enhancing security.</p> </li> <li> <p>Systemd Integration: Podman seamlessly integrates with systemd, making it   a suitable choice for systems that heavily rely on systemd for process   management.</p> </li> <li> <p>Docker Compatibility: Podman provides a Docker CLI compatibility mode,   making it easier for Docker users to transition.</p> </li> </ul>"},{"location":"knowledge/cloud_computing/virtualization/docker_vs_podman/#docker-vs-podman-key-differences","title":"Docker vs. Podman: Key Differences","text":"<p>While Docker and Podman serve similar purposes, they have some notable differences:</p> <ol> <li> <p>Rootless Containers: Podman is more flexible in this regard, allowing    users to run containers without root privileges. Docker, on the other hand,    traditionally required root access to manage containers.</p> </li> <li> <p>Systemd Integration: Podman\u2019s integration with systemd is a significant    advantage for systems that rely on systemd for process management, as it    ensures tighter integration and better control over containers.</p> </li> <li> <p>Docker Compatibility: Podman offers a Docker CLI compatibility mode,    which can make it an easier transition for Docker users. However, Docker\u2019s    ecosystem is more extensive and has more third-party integrations.</p> </li> <li> <p>Daemonless: Podman is daemonless by default, meaning it doesn\u2019t require</p> </li> </ol>"},{"location":"knowledge/cloud_computing/virtualization/docker_vs_podman/#references","title":"References","text":"<ul> <li>https://www.youtube.com/watch?v=Xx588nbshlM&amp;ab_channel=IBMTechnology</li> <li>https://www.knowledgehut.com/blog/devops/docker-vs-podman</li> <li>https://www.lambdatest.com/blog/podman-vs-docker/</li> </ul>"},{"location":"knowledge/devops/","title":"DevOps","text":""},{"location":"knowledge/devops/#devops","title":"DevOps","text":""},{"location":"knowledge/devops/#what-is-devops","title":"What is DevOps?","text":"<p>DevOps is a cultural and collaborative mindset that emphasizes communication, collaboration, integration, and automation between development and operations teams in order to achieve faster and more reliable software delivery.</p> <p>DevOps is not a specific job title or role, but rather a set of practices and principles that can be applied across a variety of roles in software development and IT operations. Anyone involved in the software development and delivery process can adopt a DevOps mindset and apply DevOps practices in their work, including developers, testers, operations engineers, product managers, and others.</p>"},{"location":"knowledge/devops/#what-is-a-devops-engineer","title":"What is a DevOps Engineer?","text":"<p>While DevOps is not a specific job title or role, organizations often hire for a \u201cDevOps Engineer\u201d role. A DevOps Engineer is a software engineer who specializes in the practices and tools that enable the continuous delivery of software. DevOps Engineers are responsible for the design and implementation of applications, software, and services for their organization, and they work closely with developers, testers, and operations staff to oversee the code releases.</p>"},{"location":"knowledge/devops/#how-do-agile-and-devops-interrelate","title":"How do Agile and DevOps interrelate?","text":"<p>Agile and DevOps both prioritize collaboration, continuous improvement, and delivering working software. They can be used together to create a more efficient software development process. Agile emphasizes iterative development and customer satisfaction, while DevOps emphasizes automating processes and integrating development and operations teams. When used together, Agile and DevOps can improve software development and delivery by streamlining processes and enhancing collaboration.</p>"},{"location":"knowledge/devops/#what-are-some-misconceptions-about-devops","title":"What are some misconceptions about DevOps?","text":"<p>Some common misconceptions about DevOps include:</p> <p>DevOps is just automation: While automation is an important part of DevOps, it\u2019s not the only thing. DevOps is a culture that emphasizes collaboration, communication, and integration between development and operations teams to improve the quality and speed of software delivery.</p> <p>DevOps is just a job title: DevOps is a mindset and set of practices, not a specific job title. Anyone involved in the software development and delivery process can adopt a DevOps mindset and apply DevOps practices in their work, including developers, testers, operations engineers, and others.</p> <p>DevOps eliminates the need for IT operations: DevOps does not eliminate the need for IT operations. Instead, it changes the way that operations teams work by promoting collaboration with development teams and introducing new tools and processes for deployment, monitoring, and maintenance.</p>"},{"location":"knowledge/devops/#how-to-become-a-devops-engineer","title":"How to become a DevOps Engineer?","text":"<p>To become a DevOps Engineer, you need to have technical skills in areas such as development, automation, containerization, cloud, CI/CD pipelines etc. Some sample tools and technologies to learn may include any programming language, AWS, Ansible, Terraform, Docker, Kubernetes, Jenkins, Git, and monitoring and logging tools. Gain experience by working on DevOps projects, develop a DevOps mindset, get certified, and apply for DevOps Engineer positions by highlighting your skills and experience in your resume.</p>"},{"location":"knowledge/devops/#roadmap","title":"Roadmap","text":"<p>[devops roadmap][https://roadmap.sh/devops]</p>"},{"location":"knowledge/devops/#references","title":"References","text":"<ul> <li>THE FUTURE OF OPS IS PLATFORM ENGINEERING</li> </ul>"},{"location":"knowledge/message_queue/","title":"MessageQueue","text":""},{"location":"knowledge/message_queue/#message-queue","title":"Message Queue","text":"<ul> <li>kafka</li> </ul>"},{"location":"knowledge/message_queue/kafka/","title":"Kafka Overview","text":""},{"location":"knowledge/message_queue/kafka/#kafka-overview","title":"Kafka Overview","text":""},{"location":"knowledge/message_queue/kafka/#what-is-kafka","title":"What is Kafka?","text":"<p>Apache Kafka is an open-source distributed event streaming platform developed by the Apache Software Foundation. It is designed to handle real-time data streams and provides a reliable, scalable, and fault-tolerant infrastructure for ingesting, storing, processing, and transmitting data between applications.</p>"},{"location":"knowledge/message_queue/kafka/#use-cases-of-kafka","title":"Use Cases of Kafka","text":"<p>Kafka is widely used in various scenarios across industries, including:</p> <ol> <li> <p>Log Aggregation: Kafka is used to collect and consolidate log data from    different services and systems, making it easier to monitor and analyze    system behavior.</p> </li> <li> <p>Event Sourcing: Kafka can serve as a central event store for event-driven    architectures, ensuring that all events are recorded and can be replayed for    debugging or auditing purposes.</p> </li> <li> <p>Stream Processing: Kafka streams allow real-time processing of data    streams, enabling applications to perform tasks like fraud detection,    recommendation systems, and analytics in real-time.</p> </li> <li> <p>Data Integration: Kafka acts as a data pipeline for transferring data    between different data stores and systems, enabling data warehousing, ETL    (Extract, Transform, Load) processes, and data lakes.</p> </li> <li> <p>Metrics and Monitoring: Kafka can be used to collect and distribute    metrics and monitoring data to various systems, enabling efficient    performance monitoring and alerting.</p> </li> <li> <p>IoT Data Ingestion: Kafka is well-suited for handling large volumes of    data generated by IoT devices, ensuring data is reliably transported and    processed.</p> </li> </ol>"},{"location":"knowledge/message_queue/kafka/#how-to-use-kafka","title":"How to Use Kafka","text":"<p>Using Kafka involves several key concepts and components:</p> <ul> <li> <p>Producer: Producers are responsible for publishing messages to Kafka   topics. They send data to Kafka brokers, which then distribute the data to   consumers.</p> </li> <li> <p>Consumer: Consumers subscribe to Kafka topics and consume messages. They   can process data in real-time or store it for batch processing.</p> </li> <li> <p>Topic: Topics are logical channels or categories to which messages are   published. Producers publish messages to topics, and consumers subscribe to   topics to receive messages.</p> </li> <li> <p>Broker: Kafka brokers are servers that store and manage the data. They   receive messages from producers, store them, and serve them to consumers.</p> </li> <li> <p>Zookeeper: Kafka traditionally used Apache ZooKeeper for distributed   coordination and management. However, newer versions of Kafka are   transitioning away from ZooKeeper.</p> </li> </ul>"},{"location":"knowledge/message_queue/kafka/#tips-for-using-kafka","title":"Tips for Using Kafka","text":"<p>Here are some tips for effectively using Kafka:</p> <ol> <li> <p>Choose the Right Replication Factor: Ensure that you configure an    appropriate replication factor for your Kafka topics to provide fault    tolerance. A replication factor of at least 2 is recommended for production    use.</p> </li> <li> <p>Monitor Kafka Clusters: Implement monitoring and alerting to keep track    of the health and performance of your Kafka clusters. Tools like Prometheus    and Grafana can be useful for this purpose.</p> </li> <li> <p>Properly Size Hardware: Ensure that your Kafka brokers are provisioned    with enough CPU, memory, and storage to handle your expected data loads.</p> </li> <li> <p>Optimize Producer and Consumer Configurations: Tune producer and consumer    settings, such as batch sizes, acks, and compression, to achieve the desired    throughput and latency for your use case.</p> </li> <li> <p>Consider Data Retention Policies: Define appropriate data retention    policies to manage disk usage and ensure data is available when needed.</p> </li> <li> <p>Upgrade and Stay Informed: Keep your Kafka installation up to date with    the latest releases, and stay informed about best practices and updates in    the Kafka community.</p> </li> </ol> <p>By following these tips and understanding the fundamentals of Kafka, you can effectively leverage it for various use cases in your data architecture.</p>"},{"location":"knowledge/message_queue/kafka/#references","title":"References","text":"<ul> <li>https://cloud.tencent.com/developer/article/1797915</li> <li>https://kafka.apache.org/documentation/</li> <li>https://kafka.apache.org/quickstart</li> <li>https://xie.infoq.cn/article/645b658dc8de20ed084f41367</li> </ul>"},{"location":"knowledge/os/","title":"OS","text":""},{"location":"knowledge/os/#operating-system","title":"Operating system","text":""},{"location":"knowledge/os/#mac","title":"Mac","text":"<ul> <li>My mac setup</li> </ul>"},{"location":"knowledge/os/#linux","title":"Linux","text":"<ul> <li>jq</li> <li>virtual box</li> </ul>"},{"location":"knowledge/os/linux/install_virtualbox_on_linux/","title":"Install virtualbox on linux to run Windows","text":""},{"location":"knowledge/os/linux/install_virtualbox_on_linux/#install-virtualbox-on-linux-to-run-windows","title":"Install virtualbox on linux to run Windows","text":"<p>Step by step command</p> <pre><code>\nsudo dnf install VirtualBox -y\n\n</code></pre>"},{"location":"knowledge/os/linux/install_virtualbox_on_linux/#references","title":"References","text":"<ul> <li>https://www.virtualbox.org/</li> </ul>"},{"location":"knowledge/os/linux/jq/","title":"jq","text":""},{"location":"knowledge/os/linux/jq/#jq","title":"<code>jq</code>","text":"<p><code>jq</code> is a powerful command-line JSON processor, to parse YAML files in Bash. YAML and JSON have some similarities in structure, which makes <code>jq</code> a suitable tool for parsing YAML as well. Here\u2019s an example of how to extract a list of values associated with a specific key in a YAML file:</p> <p>Assuming you have a YAML file named <code>example.yaml</code> with the following content:</p> <pre><code>name: John\nage: 30\nhobbies:\n  - Reading\n  - Hiking\n  - Cooking\n</code></pre> <p>You can extract the list of hobbies using <code>jq</code> like this:</p> <pre><code>#!/bin/bash\n\n# Parse YAML using jq\nhobbies=$(jq -r '.hobbies[]' example.yaml)\n\n# Loop through the extracted values (hobbies)\nIFS=$'\\n'\nfor hobby in $hobbies; do\n  echo \"Hobby: $hobby\"\ndone\n</code></pre> <p>Here\u2019s what each part of the script does:</p> <ol> <li> <p><code>jq -r '.hobbies[]' example.yaml</code>: This command uses <code>jq</code> to extract the    values associated with the \u201chobbies\u201d key. The <code>-r</code> flag ensures that the    output is in raw format (no quotes).</p> </li> <li> <p><code>IFS=$'\\n'</code>: This sets the Internal Field Separator (IFS) to newline    character (<code>\\n</code>). This is done to iterate through the list of hobbies    correctly in the <code>for</code> loop.</p> </li> <li> <p><code>for hobby in $hobbies; do ...</code>: This loop iterates through each extracted    hobby and prints it.</p> </li> </ol> <p>When you run this script, it will output:</p> <pre><code>Hobby: Reading\nHobby: Hiking\nHobby: Cooking\n</code></pre> <p>You can modify the script to use any key from your YAML file and extract the corresponding list of values. Just replace <code>.hobbies[]</code> with the key you want to extract.</p>"},{"location":"knowledge/os/mac/mac_setup/","title":"My Mac Programming Setup","text":""},{"location":"knowledge/os/mac/mac_setup/#my-mac-programming-setup","title":"My Mac Programming Setup","text":""},{"location":"knowledge/os/mac/mac_setup/#text-editor-and-ide","title":"Text Editor and IDE","text":"<p>I primarily use Visual Studio Code as my text editor and integrated development environment (IDE). It\u2019s highly customizable and has a vast collection of extensions that enhance my productivity. Some of my favorite extensions include:</p> <ul> <li>Python:   Great for Python development.</li> <li>GitLens:   Provides enhanced Git functionality.</li> <li>Live   Share:   Enables collaborative coding sessions.</li> </ul>"},{"location":"knowledge/os/mac/mac_setup/#terminal-emulator","title":"Terminal Emulator","text":"<p>For command-line work, I prefer using the default Terminal app that comes with macOS.</p> <p>It\u2019s powerful and supports various customization options. I\u2019ve set up Oh My Zsh with the Powerlevel10k theme for a visually appealing and feature-rich terminal experience.</p> <p>Another powerful tool is windterm.</p>"},{"location":"knowledge/os/mac/mac_setup/#version-control","title":"Version Control","text":"<p>I rely heavily on Git for version control. I use both the command line and the Visual Studio Code interface for managing my repositories. Additionally, GitHub Desktop is handy for quickly managing Git repositories through a graphical interface.</p>"},{"location":"knowledge/os/mac/mac_setup/#package-managers","title":"Package Managers","text":"<p>For managing programming language-specific packages and tools, I use the following package managers:</p> <ul> <li>Homebrew: A package manager for macOS that makes it easy   to install and manage various software packages.</li> <li>pip: The package installer for Python.</li> <li>npm</li> </ul>"},{"location":"knowledge/os/mac/mac_setup/#virtual-environments","title":"Virtual Environments","text":"<p>I utilize virtualenv to create isolated Python environments for different projects. It helps manage project dependencies and prevents conflicts between packages.</p>"},{"location":"knowledge/os/mac/mac_setup/#documentation","title":"Documentation","text":"<p>I use mkdocs to render the markdown document to html.</p>"},{"location":"knowledge/os/mac/mac_setup/#note-taking","title":"Note-taking","text":"<p>For jotting down ideas, code snippets, and project notes, I use Notion \u2013 a versatile note-taking and organization tool.</p>"},{"location":"knowledge/os/mac/mac_setup/#file-management","title":"File Management","text":"<p>I organize my code projects and related files using the default Finder app. Additionally, EasyFind is tool like everything to help me find file easily.</p>"},{"location":"knowledge/programming_languages/","title":"Programming Languages","text":""},{"location":"knowledge/programming_languages/#programming-languages","title":"Programming Languages","text":""},{"location":"knowledge/programming_languages/#go","title":"go","text":""},{"location":"knowledge/programming_languages/#golangci-lint","title":"golangci-lint","text":""},{"location":"knowledge/programming_languages/#c-c","title":"C / C++","text":""},{"location":"knowledge/programming_languages/#compiler","title":"Compiler","text":""},{"location":"knowledge/programming_languages/#rust","title":"Rust","text":""},{"location":"knowledge/programming_languages/#practices","title":"Practices","text":""},{"location":"knowledge/programming_languages/#python","title":"Python","text":""},{"location":"knowledge/programming_languages/c_cpp/compiler/","title":"clang vs GCC","text":""},{"location":"knowledge/programming_languages/c_cpp/compiler/#clang-vs-gcc","title":"clang vs GCC","text":""},{"location":"knowledge/programming_languages/c_cpp/compiler/#clang","title":"clang","text":""},{"location":"knowledge/programming_languages/c_cpp/compiler/#use-sanitizers-in-clang-clang","title":"Use sanitizers in clang / clang++","text":"<p>The Clang compiler provides a set of powerful tools called \u201c<code>sanitizers</code>\u201d that help developers catch various types of bugs in their C and C++ code, such as memory errors, undefined behavior, and data races. These tools are incredibly valuable for identifying and fixing issues that might lead to crashes, security vulnerabilities, or other unexpected behavior in your programs. Let\u2019s go through the steps to use some of the most common sanitizers with Clang.</p> <ol> <li> <p>AddressSanitizer (ASan):    - Purpose: Detects memory errors such as buffer overflows,      use-after-free, and other memory-related issues.    - Usage: To enable AddressSanitizer, compile your code with the      <code>-fsanitize=address</code> flag:</p> <p><code>bash  clang -fsanitize=address -g your_source_file.c -o your_program</code></p> </li> </ol> <ul> <li>Running: Execute your program as usual. If any memory issues are      detected, you will see an error message describing the issue and the      location in your code where the problem occurs.</li> </ul> <ol> <li> <p>UndefinedBehaviorSanitizer (UBSan):    - Purpose: Detects undefined behavior in your code, which can lead to      unpredictable results.    - Usage: To enable UndefinedBehaviorSanitizer, compile your code with the      <code>-fsanitize=undefined</code> flag:</p> <p><code>bash  clang -fsanitize=undefined -g your_source_file.c -o your_program</code></p> </li> </ol> <ul> <li>Running: Run your program normally. If any undefined behavior is      encountered, the sanitizer will provide information about the issue and its      location in your code.</li> </ul> <ol> <li> <p>ThreadSanitizer (TSan):    - Purpose: Detects data races and other threading-related bugs in your      code.    - Usage: To enable ThreadSanitizer, compile your code with the      <code>-fsanitize=thread</code> flag:</p> <p><code>bash  clang -fsanitize=thread -g -pthread your_source_file.c -o your_program</code></p> <p>Note the use of the <code>-pthread</code> flag, which is necessary when using  ThreadSanitizer.    - Running: Execute your program as you would normally. If any data races  are detected, the sanitizer will provide information about the race and the  involved threads.</p> </li> </ol> <p>Remember that using sanitizers may incur some runtime overhead, so they are primarily intended for debugging and testing purposes during development. It\u2019s also a good practice to compile your code with debugging information (using the <code>-g</code> flag) to get more accurate and informative error messages.</p> <p>Utilizing Clang sanitizers can significantly improve the reliability and security of your C and C++ programs. It\u2019s recommended to integrate them into your development workflow to catch bugs early and ensure the robustness of your code.</p>"},{"location":"knowledge/programming_languages/go/","title":"Golang","text":""},{"location":"knowledge/programming_languages/go/#golang","title":"Golang","text":"<ul> <li>Go Style</li> <li>Tips</li> <li>Golang memory</li> <li>GC</li> <li>Tools</li> </ul>"},{"location":"knowledge/programming_languages/go/gc/","title":"Golang Garbage Collection (GC)","text":""},{"location":"knowledge/programming_languages/go/gc/#golang-garbage-collection-gc","title":"Golang Garbage Collection (GC)","text":"<p>The Go programming language employs a concurrent garbage collector (GC) to manage memory. This means that memory management in Go is handled automatically by the runtime, relieving developers from manual memory management tasks.</p>"},{"location":"knowledge/programming_languages/go/gc/#key-features-of-golang-gc","title":"Key Features of Golang GC:","text":"<ul> <li> <p>Concurrent Operation:</p> </li> <li> <p>The garbage collector runs concurrently with the Go program itself, which     means it operates alongside the main program threads without significant     interruption.</p> </li> <li> <p>Tricolor Mark and Sweep:</p> </li> <li> <p>The GC uses a tricolor algorithm to perform its operations. It divides     objects into three color categories: white, grey, and black.</p> <ul> <li>White: Unvisited objects</li> <li>Grey: Visited but not yet marked children</li> <li>Black: Visited and marked, with all children also marked</li> </ul> </li> <li> <p>Tri-Color Invariant:</p> </li> <li>At any point in time, there are no white-to-black edges. In other words,     there are no pointers from marked objects to unmarked objects.</li> </ul>"},{"location":"knowledge/programming_languages/go/gc/#gc-phases","title":"GC Phases:","text":"<ol> <li>Mark Phase:</li> </ol> <ul> <li>Traverses the object graph, starting from the roots (global variables,      stack frames, etc.), marking reachable objects as grey.</li> </ul> <ol> <li>Sweep Phase:</li> </ol> <ul> <li>Frees memory of unmarked (white) objects.</li> </ul> <ol> <li>Scavenge Phase (Optional):    - This phase is specific to Go\u2019s two-generational garbage collector. It      focuses on collecting short-lived objects (young generation) quickly.</li> </ol>"},{"location":"knowledge/programming_languages/go/gc/#generational-garbage-collection-optional","title":"Generational Garbage Collection (Optional):","text":"<p>Go employs a two-generational garbage collector which divides objects into young and old generations.</p> <ul> <li> <p>Young Generation:</p> </li> <li> <p>Contains recently allocated objects. This generation is garbage collected     more frequently (scavenged) as short-lived objects tend to die young.</p> </li> <li> <p>Old Generation:</p> </li> <li>Contains objects that have survived multiple garbage collection cycles. It     is garbage collected less frequently.</li> </ul>"},{"location":"knowledge/programming_languages/go/gc/#gc-tuning-advanced","title":"GC Tuning (Advanced):","text":"<ul> <li> <p>Go provides some knobs and options to fine-tune the garbage collector.   However, it\u2019s important to note that manual tuning is rarely necessary for   most applications.</p> </li> <li> <p>If you do need to fine-tune, consider adjusting GOGC environment variables or   using runtime functions like <code>debug.SetGCPercent()</code>.</p> </li> </ul>"},{"location":"knowledge/programming_languages/go/gc/#benefits-of-concurrent-gc-in-go","title":"Benefits of Concurrent GC in Go:","text":"<ul> <li> <p>Automatic Memory Management:</p> </li> <li> <p>Developers don\u2019t need to manually allocate or free memory, reducing the risk     of memory leaks.</p> </li> <li> <p>Reduced GC Pauses:</p> </li> <li> <p>The concurrent nature of the GC means that it can work alongside the main     program threads, minimizing the impact on application responsiveness.</p> </li> <li> <p>Improved Developer Productivity:</p> </li> <li> <p>Developers can focus more on writing code and less on memory management     intricacies.</p> </li> <li> <p>Reduced Risk of Memory Bugs:</p> </li> <li>With manual memory management comes the risk of bugs like segmentation     faults and memory leaks, which are largely mitigated in Go.</li> </ul>"},{"location":"knowledge/programming_languages/go/golang_memory/","title":"Golang memory","text":""},{"location":"knowledge/programming_languages/go/tools/","title":"Awesome tools","text":""},{"location":"knowledge/programming_languages/go/tools/#awesome-tools","title":"Awesome tools","text":"<ul> <li>colorgo Wrapper around go command for colorized go build output.</li> <li>decouple Find \u201coverspecified\u201d function parameters that could be generalized with interface types.</li> <li>depth Visualize dependency trees of any package by analyzing imports.</li> <li>docs Automatically generate RESTful API documentation for GO projects aligned with Open API Specification standard.</li> <li>go-callvis Visualize call graph of your Go program using dot format.</li> <li>go-swagger Swagger 2.0 implementation for go. Swagger is a simple yet powerful representation of your RESTful API.</li> <li>godbg Implementation of Rusts dbg! macro for quick and easy debugging during development.</li> <li>gomodrun Go tool that executes and caches binaries included in go.mod files.</li> <li>gotestdox Show Go test results as readable sentences.</li> <li>igo An igo to go transpiler (new language features for Go language!)</li> <li>modver Compare two versions of a Go module to check the version-number change required (major, minor, or patchlevel), according to semver rules.</li> <li>OctoLinker Navigate through go files efficiently with the OctoLinker browser extension for GitHub.</li> <li>richgo Enrich go test outputs with text decorations.</li> <li>roumon Monitor current state of all active goroutines via a command line interface.</li> <li>rts RTS: response to struct. Generates Go structs from server responses.</li> <li>textra Extract Go struct field names, types and tags for filtering and exporting.</li> <li>typex Examine Go types and their transitive dependencies, alternatively export results as TypeScript value objects (or types) declaration.</li> <li>oapi-codegen OpenAPI Client and Server Code Generator.</li> <li>go-complexity-analysis calculates golang functions:</li> <li>the Cyclomatic complexities</li> <li>the Halstead complexities (difficulty, volume, time to code)</li> <li>the Maintainability index</li> <li>lines of code</li> <li>lines of code of (only) variable and constant declarations</li> </ul>"},{"location":"knowledge/programming_languages/go/go_style/","title":"Go Style","text":""},{"location":"knowledge/programming_languages/go/go_style/#go-style","title":"Go Style","text":"<p>https://google.github.io/styleguide/go</p> <p>Overview | Guide | Decisions | Best practices</p> <p>{% raw %}</p> <p></p>"},{"location":"knowledge/programming_languages/go/go_style/#about","title":"About","text":"<p>The Go Style Guide and accompanying documents codify the current best approaches for writing readable and idiomatic Go. Adherence to the Style Guide is not intended to be absolute, and these documents will never be exhaustive. Our intention is to minimize the guesswork of writing readable Go so that newcomers to the language can avoid common mistakes. The Style Guide also serves to unify the style guidance given by anyone reviewing Go code at Google.</p> Document Link Primary Audience Normative Canonical Style Guide https://google.github.io/styleguide/go/guide Everyone Yes Yes Style Decisions https://google.github.io/styleguide/go/decisions Readability Mentors Yes No Best Practices https://google.github.io/styleguide/go/best-practices Anyone interested No No <p></p>"},{"location":"knowledge/programming_languages/go/go_style/#documents","title":"Documents","text":"<ol> <li> <p>The Style Guide outlines     the foundation of Go style at Google. This document is definitive and is     used as the basis for the recommendations in Style Decisions and Best     Practices.</p> </li> <li> <p>Style Decisions is a     more verbose document that summarizes decisions on specific style points and     discusses the reasoning behind the decisions where appropriate.</p> <p>These decisions may occasionally change based on new data, new language features, new libraries, or emerging patterns, but it is not expected that individual Go programmers at Google should keep up-to-date with this document.</p> </li> <li> <p>Best Practices     documents some of the patterns that have evolved over time that solve common     problems, read well, and are robust to code maintenance needs.</p> <p>These best practices are not canonical, but Go programmers at Google are encouraged to use them where possible to keep the codebase uniform and consistent.</p> </li> </ol> <p>These documents intend to:</p> <ul> <li>Agree on a set of principles for weighing alternate styles</li> <li>Codify settled matters of Go style</li> <li>Document and provide canonical examples for Go idioms</li> <li>Document the pros and cons of various style decisions</li> <li>Help minimize surprises in Go readability reviews</li> <li>Help readability mentors use consistent terminology and guidance</li> </ul> <p>These documents do not intend to:</p> <ul> <li>Be an exhaustive list of comments that can be given in a readability review</li> <li>List all of the rules everyone is expected to remember and follow at all     times</li> <li>Replace good judgment in the use of language features and style</li> <li>Justify large-scale changes to get rid of style differences</li> </ul> <p>There will always be differences from one Go programmer to another and from one team\u2019s codebase to another. However, it is in the best interest of Google and Alphabet that our codebase be as consistent as possible. (See guide for more on consistency.) To that end, feel free to make style improvements as you see fit, but you do not need to nit-pick every violation of the Style Guide that you find. In particular, these documents may change over time, and that is no reason to cause extra churn in existing codebases; it suffices to write new code using the latest best practices and address nearby issues over time.</p> <p>It is important to recognize that issues of style are inherently personal and that there are always inherent trade-offs. Much of the guidance in these documents is subjective, but just like with <code>gofmt</code>, there is significant value in the uniformity they provide. As such, style recommendations will not be changed without due discourse, Go programmers at Google are encouraged to follow the style guide even where they might disagree.</p> <p></p>"},{"location":"knowledge/programming_languages/go/go_style/#definitions","title":"Definitions","text":"<p>The following words, which are used throughout the style documents, are defined below:</p> <ul> <li> <p>Canonical: Establishes prescriptive and enduring rules     </p> <p>Within these documents, \u201ccanonical\u201d is used to describe something that is considered a standard that all code (old and new) should follow and that is not expected to change substantially over time. Principles in the canonical documents should be understood by authors and reviewers alike, so everything included within a canonical document must meet a high bar. As such, canonical documents are generally shorter and prescribe fewer elements of style than non-canonical documents.</p> <p>https://google.github.io/styleguide/go#canonical</p> </li> <li> <p>Normative: Intended to establish consistency </p> <p>Within these documents, \u201cnormative\u201d is used to describe something that is an agreed-upon element of style for use by Go code reviewers, in order that the suggestions, terminology, and justifications are consistent. These elements may change over time, and these documents will reflect such changes so that reviewers can remain consistent and up-to-date. Authors of Go code are not expected to be familiar with the normative documents, but the documents will frequently be used as a reference by reviewers in readability reviews.</p> <p>https://google.github.io/styleguide/go#normative</p> </li> <li> <p>Idiomatic: Common and familiar </p> <p>Within these documents, \u201cidiomatic\u201d is used to refer to something that is prevalent in Go code and has become a familiar pattern that is easy to recognize. In general, an idiomatic pattern should be preferred to something unidiomatic if both serve the same purpose in context, as this is what will be the most familiar to readers.</p> <p>https://google.github.io/styleguide/go#idiomatic</p> </li> </ul> <p></p>"},{"location":"knowledge/programming_languages/go/go_style/#additional-references","title":"Additional references","text":"<p>This guide assumes the reader is familiar with Effective Go, as it provides a common baseline for Go code across the entire Go community.</p> <p>Below are some additional resources for those looking to self-educate about Go style and for reviewers looking to provide further linkable context in their reviews. Participants in the Go readability process are not expected to be familiar with these resources, but they may arise as context in readability reviews.</p> <p>External References</p> <ul> <li>Go Language Specification</li> <li>Go FAQ</li> <li>Go Memory Model</li> <li>Go Data Structures</li> <li>Go Interfaces</li> <li> <p>Go Proverbs</p> </li> <li> <p> Go Tip Episodes - stay tuned.</p> </li> <li> <p> Unit Testing Practices - stay tuned.</p> </li> </ul> <p>Relevant Testing-on-the-Toilet articles</p> <ul> <li>TotT: Identifier Naming</li> <li>TotT: Testing State vs. Testing Interactions</li> <li>TotT: Effective Testing</li> <li>TotT: Risk-driven Testing</li> <li>TotT: Change-detector Tests Considered Harmful</li> </ul> <p>Additional External Writings</p> <ul> <li>Go and Dogma</li> <li>Less is exponentially more</li> <li>Esmerelda\u2019s Imagination</li> <li>Regular expressions for parsing</li> <li>Gofmt\u2019s style is no one\u2019s favorite, yet Gofmt is everyone\u2019s favorite     (YouTube)</li> </ul> <p>{% endraw %}</p> <p>Note: This file is copy from google go style</p>"},{"location":"knowledge/programming_languages/go/go_style/best-practices/","title":"Best practices","text":""},{"location":"knowledge/programming_languages/go/go_style/best-practices/#go-style-best-practices","title":"Go Style Best Practices","text":"<p>https://google.github.io/styleguide/go/best-practices</p> <p>Overview | Guide | Decisions | Best practices</p> <p>{% raw %}</p> <p>Note: This is part of a series of documents that outline Go Style at Google. This document is neither normative nor canonical, and is an auxiliary document to the core style guide. See the overview for more information.</p> <p></p>"},{"location":"knowledge/programming_languages/go/go_style/best-practices/#about","title":"About","text":"<p>This file documents guidance about how to best apply the Go Style Guide. This guidance is intended for common situations that arise frequently, but may not apply in every circumstance. Where possible, multiple alternative approaches are discussed along with the considerations that go into the decision about when and when not to apply them.</p> <p>See the overview for the full set of Style Guide documents.</p> <p></p>"},{"location":"knowledge/programming_languages/go/go_style/best-practices/#naming","title":"Naming","text":""},{"location":"knowledge/programming_languages/go/go_style/best-practices/#function-and-method-names","title":"Function and method names","text":""},{"location":"knowledge/programming_languages/go/go_style/best-practices/#avoid-repetition","title":"Avoid repetition","text":"<p>When choosing the name for a function or method, consider the context in which the name will be read. Consider the following recommendations to avoid excess repetition at the call site:</p> <ul> <li> <p>The following can generally be omitted from function and method names:</p> <ul> <li>The types of the inputs and outputs (when there is no collision)</li> <li>The type of a method\u2019s receiver</li> <li>Whether an input or output is a pointer</li> </ul> </li> <li> <p>For functions, do not     repeat the name of the package.</p> <p>```go // Bad: package yamlconfig</p> <p>func ParseYAMLConfig(input string) (*Config, error) ```</p> <p>```go // Good: package yamlconfig</p> <p>func Parse(input string) (*Config, error) ```</p> </li> <li> <p>For methods, do not repeat the name of the method receiver.</p> <p><code>go // Bad: func (c *Config) WriteConfigTo(w io.Writer) (int64, error)</code></p> <p><code>go // Good: func (c *Config) WriteTo(w io.Writer) (int64, error)</code></p> </li> <li> <p>Do not repeat the names of variables passed as parameters.</p> <p><code>go // Bad: func OverrideFirstWithSecond(dest, source *Config) error</code></p> <p><code>go // Good: func Override(dest, source *Config) error</code></p> </li> <li> <p>Do not repeat the names and types of the return values.</p> <p><code>go // Bad: func TransformYAMLToJSON(input *Config) *jsonconfig.Config</code></p> <p><code>go // Good: func Transform(input *Config) *jsonconfig.Config</code></p> </li> </ul> <p>When it is necessary to disambiguate functions of a similar name, it is acceptable to include extra information.</p> <pre><code>// Good:\nfunc (c *Config) WriteTextTo(w io.Writer) (int64, error)\nfunc (c *Config) WriteBinaryTo(w io.Writer) (int64, error)\n</code></pre> <p></p>"},{"location":"knowledge/programming_languages/go/go_style/best-practices/#naming-conventions","title":"Naming conventions","text":"<p>There are some other common conventions when choosing names for functions and methods:</p> <ul> <li> <p>Functions that return something are given noun-like names.</p> <p><code>go // Good: func (c *Config) JobName(key string) (value string, ok bool)</code></p> <p>A corollary of this is that function and method names should avoid the prefix <code>Get</code>.</p> <p><code>go // Bad: func (c *Config) GetJobName(key string) (value string, ok bool)</code></p> </li> <li> <p>Functions that do something are given verb-like names.</p> <p><code>go // Good: func (c *Config) WriteDetail(w io.Writer) (int64, error)</code></p> </li> <li> <p>Identical functions that differ only by the types involved include the name     of the type at the end of the name.</p> <p><code>go // Good: func ParseInt(input string) (int, error) func ParseInt64(input string) (int64, error) func AppendInt(buf []byte, value int) []byte func AppendInt64(buf []byte, value int64) []byte</code></p> <p>If there is a clear \u201cprimary\u201d version, the type can be omitted from the name for that version:</p> <p><code>go // Good: func (c *Config) Marshal() ([]byte, error) func (c *Config) MarshalText() (string, error)</code></p> </li> </ul> <p></p>"},{"location":"knowledge/programming_languages/go/go_style/best-practices/#test-double-packages-and-types","title":"Test double packages and types","text":"<p>There are several disciplines you can apply to naming packages and types that provide test helpers and especially test doubles. A test double could be a stub, fake, mock, or spy.</p> <p>These examples mostly use stubs. Update your names accordingly if your code uses fakes or another kind of test double.</p> <p>Suppose you have a well-focused package providing production code similar to this:</p> <pre><code>package creditcard\n\nimport (\n    \"errors\"\n\n    \"path/to/money\"\n)\n\n// ErrDeclined indicates that the issuer declines the charge.\nvar ErrDeclined = errors.New(\"creditcard: declined\")\n\n// Card contains information about a credit card, such as its issuer,\n// expiration, and limit.\ntype Card struct {\n    // omitted\n}\n\n// Service allows you to perform operations with credit cards against external\n// payment processor vendors like charge, authorize, reimburse, and subscribe.\ntype Service struct {\n    // omitted\n}\n\nfunc (s *Service) Charge(c *Card, amount money.Money) error { /* omitted */ }\n</code></pre> <p></p>"},{"location":"knowledge/programming_languages/go/go_style/best-practices/#creating-test-helper-packages","title":"Creating test helper packages","text":"<p>Suppose you want to create a package that contains test doubles for another. We\u2019ll use <code>package creditcard</code> (from above) for this example:</p> <p>One approach is to introduce a new Go package based on the production one for testing. A safe choice is to append the word <code>test</code> to the original package name (\u201ccreditcard\u201d + \u201ctest\u201d):</p> <pre><code>// Good:\npackage creditcardtest\n</code></pre> <p>Unless stated explicitly otherwise, all examples in the sections below are in <code>package creditcardtest</code>.</p> <p></p>"},{"location":"knowledge/programming_languages/go/go_style/best-practices/#simple-case","title":"Simple case","text":"<p>You want to add a set of test doubles for <code>Service</code>. Because <code>Card</code> is effectively a dumb data type, similar to a Protocol Buffer message, it needs no special treatment in tests, so no double is required. If you anticipate only test doubles for one type (like <code>Service</code>), you can take a concise approach to naming the doubles:</p> <pre><code>// Good:\nimport (\n    \"path/to/creditcard\"\n    \"path/to/money\"\n)\n\n// Stub stubs creditcard.Service and provides no behavior of its own.\ntype Stub struct{}\n\nfunc (Stub) Charge(*creditcard.Card, money.Money) error { return nil }\n</code></pre> <p>This is strictly preferable to a naming choice like <code>StubService</code> or the very poor <code>StubCreditCardService</code>, because the base package name and its domain types imply what <code>creditcardtest.Stub</code> is.</p> <p>Finally, if the package is built with Bazel, make sure the new <code>go_library</code> rule for the package is marked as <code>testonly</code>:</p> <pre><code># Good:\ngo_library(\n    name = \"creditcardtest\",\n    srcs = [\"creditcardtest.go\"],\n    deps = [\n        \":creditcard\",\n        \":money\",\n    ],\n    testonly = True,\n)\n</code></pre> <p>The approach above is conventional and will be reasonably well understood by other engineers.</p> <p>See also:</p> <ul> <li>Go Tip #42: Authoring a Stub for Testing</li> </ul> <p></p>"},{"location":"knowledge/programming_languages/go/go_style/best-practices/#multiple-test-double-behaviors","title":"Multiple test double behaviors","text":"<p>When one kind of stub is not enough (for example, you also need one that always fails), we recommend naming the stubs according to the behavior they emulate. Here we rename <code>Stub</code> to <code>AlwaysCharges</code> and introduce a new stub called <code>AlwaysDeclines</code>:</p> <pre><code>// Good:\n// AlwaysCharges stubs creditcard.Service and simulates success.\ntype AlwaysCharges struct{}\n\nfunc (AlwaysCharges) Charge(*creditcard.Card, money.Money) error { return nil }\n\n// AlwaysDeclines stubs creditcard.Service and simulates declined charges.\ntype AlwaysDeclines struct{}\n\nfunc (AlwaysDeclines) Charge(*creditcard.Card, money.Money) error {\n    return creditcard.ErrDeclined\n}\n</code></pre> <p></p>"},{"location":"knowledge/programming_languages/go/go_style/best-practices/#multiple-doubles-for-multiple-types","title":"Multiple doubles for multiple types","text":"<p>But now suppose that <code>package creditcard</code> contains multiple types worth creating doubles for, as seen below with <code>Service</code> and <code>StoredValue</code>:</p> <pre><code>package creditcard\n\ntype Service struct {\n    // omitted\n}\n\ntype Card struct {\n    // omitted\n}\n\n// StoredValue manages customer credit balances.  This applies when returned\n// merchandise is credited to a customer's local account instead of processed\n// by the credit issuer.  For this reason, it is implemented as a separate\n// service.\ntype StoredValue struct {\n    // omitted\n}\n\nfunc (s *StoredValue) Credit(c *Card, amount money.Money) error { /* omitted */ }\n</code></pre> <p>In this case, more explicit test double naming is sensible:</p> <pre><code>// Good:\ntype StubService struct{}\n\nfunc (StubService) Charge(*creditcard.Card, money.Money) error { return nil }\n\ntype StubStoredValue struct{}\n\nfunc (StubStoredValue) Credit(*creditcard.Card, money.Money) error { return nil }\n</code></pre> <p></p>"},{"location":"knowledge/programming_languages/go/go_style/best-practices/#local-variables-in-tests","title":"Local variables in tests","text":"<p>When variables in your tests refer to doubles, choose a name that most clearly differentiates the double from other production types based on context. Consider some production code you want to test:</p> <pre><code>package payment\n\nimport (\n    \"path/to/creditcard\"\n    \"path/to/money\"\n)\n\ntype CreditCard interface {\n    Charge(*creditcard.Card, money.Money) error\n}\n\ntype Processor struct {\n    CC CreditCard\n}\n\nvar ErrBadInstrument = errors.New(\"payment: instrument is invalid or expired\")\n\nfunc (p *Processor) Process(c *creditcard.Card, amount money.Money) error {\n    if c.Expired() {\n        return ErrBadInstrument\n    }\n    return p.CC.Charge(c, amount)\n}\n</code></pre> <p>In the tests, a test double called a \u201cspy\u201d for <code>CreditCard</code> is juxtaposed against production types, so prefixing the name may improve clarity.</p> <pre><code>// Good:\npackage payment\n\nimport \"path/to/creditcardtest\"\n\nfunc TestProcessor(t *testing.T) {\n    var spyCC creditcardtest.Spy\n\n    proc := &amp;Processor{CC: spyCC}\n\n    // declarations omitted: card and amount\n    if err := proc.Process(card, amount); err != nil {\n        t.Errorf(\"proc.Process(card, amount) = %v, want %v\", got, want)\n    }\n\n    charges := []creditcardtest.Charge{\n        {Card: card, Amount: amount},\n    }\n\n    if got, want := spyCC.Charges, charges; !cmp.Equal(got, want) {\n        t.Errorf(\"spyCC.Charges = %v, want %v\", got, want)\n    }\n}\n</code></pre> <p>This is clearer than when the name is not prefixed.</p> <pre><code>// Bad:\npackage payment\n\nimport \"path/to/creditcardtest\"\n\nfunc TestProcessor(t *testing.T) {\n    var cc creditcardtest.Spy\n\n    proc := &amp;Processor{CC: cc}\n\n    // declarations omitted: card and amount\n    if err := proc.Process(card, amount); err != nil {\n        t.Errorf(\"proc.Process(card, amount) = %v, want %v\", got, want)\n    }\n\n    charges := []creditcardtest.Charge{\n        {Card: card, Amount: amount},\n    }\n\n    if got, want := cc.Charges, charges; !cmp.Equal(got, want) {\n        t.Errorf(\"cc.Charges = %v, want %v\", got, want)\n    }\n}\n</code></pre> <p></p>"},{"location":"knowledge/programming_languages/go/go_style/best-practices/#shadowing","title":"Shadowing","text":"<p>Note: This explanation uses two informal terms, stomping and shadowing. They are not official concepts in the Go language spec.</p> <p>Like many programming languages, Go has mutable variables: assigning to a variable changes its value.</p> <pre><code>// Good:\nfunc abs(i int) int {\n    if i &lt; 0 {\n        i *= -1\n    }\n    return i\n}\n</code></pre> <p>When using short variable declarations with the <code>:=</code> operator, in some cases a new variable is not created. We can call this stomping. It\u2019s OK to do this when the original value is no longer needed.</p> <pre><code>// Good:\n// innerHandler is a helper for some request handler, which itself issues\n// requests to other backends.\nfunc (s *Server) innerHandler(ctx context.Context, req *pb.MyRequest) *pb.MyResponse {\n    // Unconditionally cap the deadline for this part of request handling.\n    ctx, cancel := context.WithTimeout(ctx, 3*time.Second)\n    defer cancel()\n    ctxlog.Info(ctx, \"Capped deadline in inner request\")\n\n    // Code here no longer has access to the original context.\n    // This is good style if when first writing this, you anticipate\n    // that even as the code grows, no operation legitimately should\n    // use the (possibly unbounded) original context that the caller provided.\n\n    // ...\n}\n</code></pre> <p>Be careful using short variable declarations in a new scope, though: that introduces a new variable. We can call this shadowing the original variable. Code after the end of the block refers to the original. Here is a buggy attempt to shorten the deadline conditionally:</p> <pre><code>// Bad:\nfunc (s *Server) innerHandler(ctx context.Context, req *pb.MyRequest) *pb.MyResponse {\n    // Attempt to conditionally cap the deadline.\n    if *shortenDeadlines {\n        ctx, cancel := context.WithTimeout(ctx, 3*time.Second)\n        defer cancel()\n        ctxlog.Info(ctx, \"Capped deadline in inner request\")\n    }\n\n    // BUG: \"ctx\" here again means the context that the caller provided.\n    // The above buggy code compiled because both ctx and cancel\n    // were used inside the if statement.\n\n    // ...\n}\n</code></pre> <p>A correct version of the code might be:</p> <pre><code>// Good:\nfunc (s *Server) innerHandler(ctx context.Context, req *pb.MyRequest) *pb.MyResponse {\n    if *shortenDeadlines {\n        var cancel func()\n        // Note the use of simple assignment, = and not :=.\n        ctx, cancel = context.WithTimeout(ctx, 3*time.Second)\n        defer cancel()\n        ctxlog.Info(ctx, \"Capped deadline in inner request\")\n    }\n    // ...\n}\n</code></pre> <p>In the case we called stomping, because there\u2019s no new variable, the type being assigned must match that of the original variable. With shadowing, an entirely new entity is introduced so it can have a different type. Intentional shadowing can be a useful practice, but you can always use a new name if it improves clarity.</p> <p>It is not a good idea to use variables with the same name as standard packages other than very small scopes, because that renders free functions and values from that package inaccessible. Conversely, when picking a name for your package, avoid names that are likely to require import renaming or cause shadowing of otherwise good variable names at the client side.</p> <pre><code>// Bad:\nfunc LongFunction() {\n    url := \"https://example.com/\"\n    // Oops, now we can't use net/url in code below.\n}\n</code></pre> <p></p>"},{"location":"knowledge/programming_languages/go/go_style/best-practices/#util-packages","title":"Util packages","text":"<p>Go packages have a name specified on the <code>package</code> declaration, separate from the import path. The package name matters more for readability than the path.</p> <p>Go package names should be related to what the package provides. Naming a package just <code>util</code>, <code>helper</code>, <code>common</code> or similar is usually a poor choice (it can be used as part of the name though). Uninformative names make the code harder to read, and if used too broadly they are liable to cause needless import conflicts.</p> <p>Instead, consider what the callsite will look like.</p> <pre><code>// Good:\ndb := spannertest.NewDatabaseFromFile(...)\n\n_, err := f.Seek(0, io.SeekStart)\n\nb := elliptic.Marshal(curve, x, y)\n</code></pre> <p>You can tell roughly what each of these do even without knowing the imports list (<code>cloud.google.com/go/spanner/spannertest</code>, <code>io</code>, and <code>crypto/elliptic</code>). With less focused names, these might read:</p> <pre><code>// Bad:\ndb := test.NewDatabaseFromFile(...)\n\n_, err := f.Seek(0, common.SeekStart)\n\nb := helper.Marshal(curve, x, y)\n</code></pre> <p></p>"},{"location":"knowledge/programming_languages/go/go_style/best-practices/#package-size","title":"Package size","text":"<p>If you\u2019re asking yourself how big your Go packages should be and whether to place related types in the same package or split them into different ones, a good place to start is the Go blog post about package names. Despite the post title, it\u2019s not solely about naming. It contains some helpful hints and cites several useful articles and talks.</p> <p>Here are some other considerations and notes.</p> <p>Users see godoc for the package in one page, and any methods exported by types supplied by the package are grouped by their type. Godoc also group constructors along with the types they return. If client code is likely to need two values of different type to interact with each other, it may be convenient for the user to have them in the same package.</p> <p>Code within a package can access unexported identifiers in the package. If you have a few related types whose implementation is tightly coupled, placing them in the same package lets you achieve this coupling without polluting the public API with these details.</p> <p>All of that being said, putting your entire project in a single package would likely make that package too large. When something is conceptually distinct, giving it its own small package can make it easier to use. The short name of the package as known to clients together with the exported type name work together to make a meaningful identifier: e.g. <code>bytes.Buffer</code>, <code>ring.New</code>. The blog post has more examples.</p> <p>Go style is flexible about file size, because maintainers can move code within a package from one file to another without affecting callers. But as a general guideline: it is usually not a good idea to have a single file with many thousands of lines in it, or having many tiny files. There is no \u201cone type, one file\u201d convention as in some other languages. As a rule of thumb, files should be focused enough that a maintainer can tell which file contains something, and the files should be small enough that it will be easy to find once there. The standard library often splits large packages to several source files, grouping related code by file. The source for [package <code>bytes</code>] is a good example. Packages with long package documentation may choose to dedicate one file called <code>doc.go</code> that has the package documentation, a package declaration, and nothing else, but this is not required.</p> <p>Within the Google codebase and in projects using Bazel, directory layout for Go code is different than it is in open source Go projects: you can have multiple <code>go_library</code> targets in a single directory. A good reason to give each package its own directory is if you expect to open source your project in the future.</p> <p>See also:</p> <ul> <li>Test double packages</li> </ul> <p></p>"},{"location":"knowledge/programming_languages/go/go_style/best-practices/#imports","title":"Imports","text":""},{"location":"knowledge/programming_languages/go/go_style/best-practices/#protos-and-stubs","title":"Protos and stubs","text":"<p>Proto library imports are treated differently than standard Go imports due to their cross-language nature. The convention for renamed proto imports are based on the rule that generated the package:</p> <ul> <li>The <code>pb</code> suffix is generally used for <code>go_proto_library</code> rules.</li> <li>The <code>grpc</code> suffix is generally used for <code>go_grpc_library</code> rules.</li> </ul> <p>Generally, a short one- or two-letter prefix is used:</p> <pre><code>// Good:\nimport (\n    fspb \"path/to/package/foo_service_go_proto\"\n    fsgrpc \"path/to/package/foo_service_go_grpc\"\n)\n</code></pre> <p>If there is only a single proto used by a package or the package is tied closely to that proto, the prefix can be omitted:</p> <p>import ( pb \u201cpath/to/package/foo_service_go_proto\u201d grpc \u201cpath/to/package/foo_service_go_grpc\u201d )</p> <p>If the symbols in the proto are generic or are not very self-descriptive, or if shortening the package name with an acronym is unclear, a short word can suffice as the prefix:</p> <pre><code>// Good:\nimport (\n    mapspb \"path/to/package/maps_go_proto\"\n)\n</code></pre> <p>In this case <code>mapspb.Address</code> might be clearer than <code>mpb.Address</code> if the code in question is not already clearly related to maps.</p> <p></p>"},{"location":"knowledge/programming_languages/go/go_style/best-practices/#import-ordering","title":"Import ordering","text":"<p>Imports are typically grouped into the following two (or more) blocks, in order:</p> <ol> <li>Standard library imports (e.g., <code>\"fmt\"</code>)</li> <li>imports (e.g., \u201c/path/to/somelib\u201d)</li> <li>(optional) Protobuf imports (e.g., <code>fpb \"path/to/foo_go_proto\"</code>)</li> <li>(optional) Side-effect imports (e.g., <code>_ \"path/to/package\"</code>)</li> </ol> <p>If a file does not have a group for one of the optional categories above, the relevant imports are included in the project import group.</p> <p>Any import grouping that is clear and easy to understand is generally fine. For example, a team may choose to group gRPC imports separately from protobuf imports.</p> <p>Note: For code maintaining only the two mandatory groups (one group for the standard library and one for all other imports), the <code>goimports</code> tool produces output consistent with this guidance.</p> <p>However, <code>goimports</code> has no knowledge of groups beyond the mandatory ones; the optional groups are prone to invalidation by the tool. When optional groups are used, attention on the part of both authors and reviewers is required to ensure that groupings remain compliant.</p> <p>Either approach is fine, but do not leave the imports section in an inconsistent, partially grouped state.</p> <p></p>"},{"location":"knowledge/programming_languages/go/go_style/best-practices/#error-handling","title":"Error handling","text":"<p>In Go, errors are values; they are created by code and consumed by code. Errors can be:</p> <ul> <li>Converted into diagnostic information for display to humans</li> <li>Used by the maintainer</li> <li>Interpreted by an end user</li> </ul> <p>Error messages also show up across a variety of different surfaces including log messages, error dumps, and rendered UIs.</p> <p>Code that processes (produces or consumes) errors should do so deliberately. It can be tempting to ignore or blindly propagate an error return value. However, it is always worth considering whether the current function in the call frame is positioned to handle the error most effectively. This is a large topic and it is hard to give categorical advice. Use your judgment, but keep the following considerations in mind:</p> <ul> <li>When creating an error value, decide whether to give it any     structure.</li> <li>When handling an error, consider adding information     that you have but that the caller and/or callee might not.</li> <li>See also guidance on error logging.</li> </ul> <p>While it is usually not appropriate to ignore an error, a reasonable exception to this is when orchestrating related operations, where often only the first error is useful. Package [<code>errgroup</code>] provides a convenient abstraction for a group of operations that can all fail or be canceled as a group.</p> <p>See also:</p> <ul> <li>Effective Go on errors</li> <li>A post by the Go Blog on errors</li> <li>Package <code>errors</code></li> <li>Package <code>upspin.io/errors</code></li> <li>GoTip #89: When to Use Canonical Status Codes as Errors</li> <li>GoTip #48: Error Sentinel Values</li> <li>GoTip #13: Designing Errors for Checking</li> </ul> <p></p>"},{"location":"knowledge/programming_languages/go/go_style/best-practices/#error-structure","title":"Error structure","text":"<p>If callers need to interrogate the error (e.g., distinguish different error conditions), give the error value structure so that this can be done programmatically rather than having the caller perform string matching. This advice applies to production code as well as to tests that care about different error conditions.</p> <p>The simplest structured errors are unparameterized global values.</p> <pre><code>type Animal string\n\nvar (\n    // ErrDuplicate occurs if this animal has already been seen.\n    ErrDuplicate = errors.New(\"duplicate\")\n\n    // ErrMarsupial occurs because we're allergic to marsupials outside Australia.\n    // Sorry.\n    ErrMarsupial = errors.New(\"marsupials are not supported\")\n)\n\nfunc pet(animal Animal) error {\n    switch {\n    case seen[animal]:\n        return ErrDuplicate\n    case marsupial(animal):\n        return ErrMarsupial\n    }\n    seen[animal] = true\n    // ...\n    return nil\n}\n</code></pre> <p>The caller can simply compare the returned error value of the function with one of the known error values:</p> <pre><code>// Good:\nfunc handlePet(...) {\n    switch err := process(an); err {\n    case ErrDuplicate:\n        return fmt.Errorf(\"feed %q: %v\", an, err)\n    case ErrMarsupial:\n        // Try to recover with a friend instead.\n        alternate = an.BackupAnimal()\n        return handlePet(..., alternate, ...)\n    }\n}\n</code></pre> <p>The above uses sentinel values, where the error must be equal (in the sense of <code>==</code>) to the expected value. That is perfectly adequate in many cases. If <code>process</code> returns wrapped errors (discussed below), you can use [<code>errors.Is</code>].</p> <pre><code>// Good:\nfunc handlePet(...) {\n    switch err := process(an); {\n    case errors.Is(err, ErrDuplicate):\n        return fmt.Errorf(\"feed %q: %v\", an, err)\n    case errors.Is(err, ErrMarsupial):\n        // ...\n    }\n}\n</code></pre> <p>Do not attempt to distinguish errors based on their string form. (See Go Tip #13: Designing Errors for Checking for more.)</p> <pre><code>// Bad:\nfunc handlePet(...) {\n    err := process(an)\n    if regexp.MatchString(`duplicate`, err.Error()) {...}\n    if regexp.MatchString(`marsupial`, err.Error()) {...}\n}\n</code></pre> <p>If there is extra information in the error that the caller needs programmatically, it should ideally be presented structurally. For example, the [<code>os.PathError</code>] type is documented to place the pathname of the failing operation in a struct field which the caller can easily access.</p> <p>Other error structures can be used as appropriate, for example a project struct containing an error code and detail string. Package <code>status</code> is a common encapsulation; if you choose this approach (which you are not obligated to do), use canonical codes. See Go Tip #89: When to Use Canonical Status Codes as Errors to know if using status codes is the right choice.</p> <p></p>"},{"location":"knowledge/programming_languages/go/go_style/best-practices/#adding-information-to-errors","title":"Adding information to errors","text":"<p>Any function returning an error should strive to make the error value useful. Often, the function is in the middle of a callchain and is merely propagating an error from some other function that it called (maybe even from another package). Here there is an opportunity to annotate the error with extra information, but the programmer should ensure there\u2019s sufficient information in the error without adding duplicate or irrelevant detail. If you\u2019re unsure, try triggering the error condition during development: that\u2019s a good way to assess what the observers of the error (either humans or code) will end up with.</p> <p>Convention and good documentation help. For example, the standard package <code>os</code> advertises that its errors contain path information when it is available. This is a useful style, because callers getting back an error don\u2019t need to annotate it with information that they had already provided the failing function.</p> <pre><code>// Good:\nif err := os.Open(\"settings.txt\"); err != nil {\n    return err\n}\n\n// Output:\n//\n// open settings.txt: no such file or directory\n</code></pre> <p>If there is something interesting to say about the meaning of the error, of course it can be added. Just consider which level of the callchain is best positioned to understand this meaning.</p> <pre><code>// Good:\nif err := os.Open(\"settings.txt\"); err != nil {\n    // We convey the significance of this error to us. Note that the current\n    // function might perform more than one file operation that can fail, so\n    // these annotations can also serve to disambiguate to the caller what went\n    // wrong.\n    return fmt.Errorf(\"launch codes unavailable: %v\", err)\n}\n\n// Output:\n//\n// launch codes unavailable: open settings.txt: no such file or directory\n</code></pre> <p>Contrast with the redundant information here:</p> <pre><code>// Bad:\nif err := os.Open(\"settings.txt\"); err != nil {\n    return fmt.Errorf(\"could not open settings.txt: %w\", err)\n}\n\n// Output:\n//\n// could not open settings.txt: open settings.txt: no such file or directory\n</code></pre> <p>When adding information to a propagated error, you can either wrap the error or present a fresh error. Wrapping the error with the <code>%w</code> verb in <code>fmt.Errorf</code> allows callers to access data from the original error. This can be very useful at times, but in other cases these details are misleading or uninteresting to the caller. See the blog post on error wrapping for more information. Wrapping errors also expands the API surface of your package in a non-obvious way, and this can cause breakages if you change the implementation details of your package.</p> <p>It is best to avoid using <code>%w</code> unless you also document (and have tests that validate) the underlying errors that you expose. If you do not expect your caller to call <code>errors.Unwrap</code>, <code>errors.Is</code> and so on, don\u2019t bother with <code>%w</code>.</p> <p>The same concept applies to structured errors like <code>*status.Status</code> (see canonical codes). For example, if your server sends malformed requests to a backend and receives an <code>InvalidArgument</code> code, this code should not be propagated to the client, assuming that the client has done nothing wrong. Instead, return an <code>Internal</code> canonical code to the client.</p> <p>However, annotating errors helps automated logging systems preserve the status payload of an error. For example, annotating the error is appropriate in an internal function:</p> <pre><code>// Good:\nfunc (s *Server) internalFunction(ctx context.Context) error {\n    // ...\n    if err != nil {\n        return fmt.Errorf(\"couldn't find remote file: %w\", err)\n    }\n}\n</code></pre> <p>Code directly at system boundaries (typically RPC, IPC, storage, and similar) should report errors using the canonical error space. It is the responsibility of code here to handle domain-specific errors and represent them canonically. For example:</p> <pre><code>// Bad:\nfunc (*FortuneTeller) SuggestFortune(context.Context, *pb.SuggestionRequest) (*pb.SuggestionResponse, error) {\n    // ...\n    if err != nil {\n        return nil, fmt.Errorf(\"couldn't find remote file: %w\", err)\n    }\n}\n</code></pre> <pre><code>// Good:\nimport (\n    \"google.golang.org/grpc/codes\"\n    \"google.golang.org/grpc/status\"\n)\nfunc (*FortuneTeller) SuggestFortune(context.Context, *pb.SuggestionRequest) (*pb.SuggestionResponse, error) {\n    // ...\n    if err != nil {\n        // Or use fmt.Errorf with the %w verb if deliberately wrapping an\n        // error which the caller is meant to unwrap.\n        return nil, status.Errorf(codes.Internal, \"couldn't find fortune database\", status.ErrInternal)\n    }\n}\n</code></pre> <p></p>"},{"location":"knowledge/programming_languages/go/go_style/best-practices/#placement-of-w-in-errors","title":"Placement of %w in errors","text":"<p>Prefer to place <code>%w</code> at the end of an error string.</p> <p>Errors can be wrapped with the <code>%w</code> verb, or by placing them in a structured error that implements <code>Unwrap() error</code> (ex: <code>fs.PathError</code>).</p> <p>Wrapped errors form error chains: each new layer of wrapping adds a new entry to the front of the error chain. The error chain can be traversed with the <code>Unwrap() error</code> method. For example:</p> <pre><code>err1 := fmt.Errorf(\"err1\")\nerr2 := fmt.Errorf(\"err2: %w\", err1)\nerr3 := fmt.Errorf(\"err3: %w\", err2)\n</code></pre> <p>This forms an error chain of the form,</p> <pre><code>flowchart LR\n  err3 == err3 wraps err2 ==&gt; err2;\n  err2 == err2 wraps err1 ==&gt; err1;\n</code></pre> <p>Regardless of where the <code>%w</code> verb is placed, the error returned always represents the front of the error chain, and the <code>%w</code> is the next child. Similarly, <code>Unwrap() error</code> always traverses the error chain from newest to oldest error.</p> <p>Placement of the <code>%w</code> verb does, however, affect whether the error chain is printed newest to oldest, oldest to newest, or neither:</p> <pre><code>// Good:\nerr1 := fmt.Errorf(\"err1\")\nerr2 := fmt.Errorf(\"err2: %w\", err1)\nerr3 := fmt.Errorf(\"err3: %w\", err2)\nfmt.Println(err3) // err3: err2: err1\n// err3 is a newest-to-oldest error chain, that prints newest-to-oldest.\n</code></pre> <pre><code>// Bad:\nerr1 := fmt.Errorf(\"err1\")\nerr2 := fmt.Errorf(\"%w: err2\", err1)\nerr3 := fmt.Errorf(\"%w: err3\", err2)\nfmt.Println(err3) // err1: err2: err3\n// err3 is a newest-to-oldest error chain, that prints oldest-to-newest.\n</code></pre> <pre><code>// Bad:\nerr1 := fmt.Errorf(\"err1\")\nerr2 := fmt.Errorf(\"err2-1 %w err2-2\", err1)\nerr3 := fmt.Errorf(\"err3-1 %w err3-2\", err2)\nfmt.Println(err3) // err3-1 err2-1 err1 err2-2 err3-2\n// err3 is a newest-to-oldest error chain, that neither prints newest-to-oldest\n// nor oldest-to-newest.\n</code></pre> <p>Therefore, in order for error text to mirror error chain structure, prefer placing the <code>%w</code> verb at the end with the form <code>[...]: %w</code>.</p> <p></p>"},{"location":"knowledge/programming_languages/go/go_style/best-practices/#logging-errors","title":"Logging errors","text":"<p>Functions sometimes need to tell an external system about an error without propagating it to their callers. Logging is an obvious choice here; but be conscious of what and how you log errors.</p> <ul> <li> <p>Like good test failure messages, log messages should clearly express what     went wrong and help the maintainer by including relevant information to     diagnose the problem.</p> </li> <li> <p>Avoid duplication. If you return an error, it\u2019s usually better not to log it     yourself but rather let the caller handle it. The caller can choose to log     the error, or perhaps rate-limit logging using [<code>rate.Sometimes</code>]. Other     options include attempting recovery or even stopping the program. In any     case, giving the caller control helps avoid logspam.</p> <p>The downside to this approach, however, is that any logging is written using the caller\u2019s line coordinates.</p> </li> <li> <p>Be careful with PII. Many log sinks are not appropriate destinations for     sensitive end-user information.</p> </li> <li> <p>Use <code>log.Error</code> sparingly. ERROR level logging causes a flush and is more     expensive than lower logging levels. This can have serious performance     impact on your code. When deciding between error and warning levels,     consider the best practice that messages at the error level should be     actionable rather than \u201cmore serious\u201d than a warning.</p> </li> <li> <p>Inside Google, we have monitoring systems that can be set up for more     effective alerting than writing to a log file and hoping someone notices it.     This is similar but not identical to the standard library     [package <code>expvar</code>].</p> </li> </ul> <p></p>"},{"location":"knowledge/programming_languages/go/go_style/best-practices/#custom-verbosity-levels","title":"Custom verbosity levels","text":"<p>Use verbose logging ([<code>log.V</code>]) to your advantage. Verbose logging can be useful for development and tracing. Establishing a convention around verbosity levels can be helpful. For example:</p> <ul> <li>Write a small amount of extra information at <code>V(1)</code></li> <li>Trace more information in <code>V(2)</code></li> <li>Dump large internal states in <code>V(3)</code></li> </ul> <p>To minimize the cost of verbose logging, you should ensure not to accidentally call expensive functions even when <code>log.V</code> is turned off. <code>log.V</code> offers two APIs. The more convenient one carries the risk of this accidental expense. When in doubt, use the slightly more verbose style.</p> <pre><code>// Good:\nfor _, sql := range queries {\n  log.V(1).Infof(\"Handling %v\", sql)\n  if log.V(2) {\n    log.Infof(\"Handling %v\", sql.Explain())\n  }\n  sql.Run(...)\n}\n</code></pre> <pre><code>// Bad:\n// sql.Explain called even when this log is not printed.\nlog.V(2).Infof(\"Handling %v\", sql.Explain())\n</code></pre> <p></p>"},{"location":"knowledge/programming_languages/go/go_style/best-practices/#program-initialization","title":"Program initialization","text":"<p>Program initialization errors (such as bad flags and configuration) should be propagated upward to <code>main</code>, which should call <code>log.Exit</code> with an error that explains how to fix the error. In these cases, <code>log.Fatal</code> should not generally be used, because a stack trace that points at the check is not likely to be as useful as a human-generated, actionable message.</p> <p></p>"},{"location":"knowledge/programming_languages/go/go_style/best-practices/#program-checks-and-panics","title":"Program checks and panics","text":"<p>As stated in the decision against panics, standard error handling should be structured around error return values. Libraries should prefer returning an error to the caller rather than aborting the program, especially for transient errors.</p> <p>It is occasionally necessary to perform consistency checks on an invariant and terminate the program if it is violated. In general, this is only done when a failure of the invariant check means that the internal state has become unrecoverable. The most reliable way to do this in the Google codebase is to call <code>log.Fatal</code>. Using <code>panic</code> in these cases is not reliable, because it is possible for deferred functions to deadlock or further corrupt internal or external state.</p> <p>Similarly, resist the temptation to recover panics to avoid crashes, as doing so can result in propagating a corrupted state. The further you are from the panic, the less you know about the state of the program, which could be holding locks or other resources. The program can then develop other unexpected failure modes that can make the problem even more difficult to diagnose. Instead of trying to handle unexpected panics in code, use monitoring tools to surface unexpected failures and fix related bugs with a high priority.</p> <p>Note: The standard [<code>net/http</code> server] violates this advice and recovers panics from request handlers. Consensus among experienced Go engineers is that this was a historical mistake. If you sample server logs from application servers in other languages, it is common to find large stacktraces that are left unhandled. Avoid this pitfall in your servers.</p> <p></p>"},{"location":"knowledge/programming_languages/go/go_style/best-practices/#when-to-panic","title":"When to panic","text":"<p>The standard library panics on API misuse. For example, [<code>reflect</code>] issues a panic in many cases where a value is accessed in a way that suggests it was misinterpreted. This is analogous to the panics on core language bugs such as accessing an element of a slice that is out of bounds. Code review and tests should discover such bugs, which are not expected to appear in production code. These panics act as invariant checks that do not depend on a library, as the standard library does not have access to the [levelled <code>log</code>] package that the Google codebase uses.</p> <p>Another case in which panics can be useful, though uncommon, is as an internal implementation detail of a package which always has a matching recover in the callchain. Parsers and similar deeply nested, tightly coupled internal function groups can benefit from this design, where plumbing error returns adds complexity without value. The key attribute of this design is that these panics are never allowed to escape across package boundaries and do not form part of the package\u2019s API. This is typically accomplished with a top-level deferred recover that translates a propagating panic into a returned error at the public API surfaces.</p> <p>Panic is also used when the compiler cannot identify unreachable code, for example when using a function like <code>log.Fatal</code> that will not return:</p> <pre><code>// Good:\nfunc answer(i int) string {\n    switch i {\n    case 42:\n        return \"yup\"\n    case 54:\n        return \"base 13, huh\"\n    default:\n        log.Fatalf(\"Sorry, %d is not the answer.\", i)\n        panic(\"unreachable\")\n    }\n}\n</code></pre> <p>Do not call <code>log</code> functions before flags have been parsed. If you must die in an <code>init</code> func, a panic is acceptable in place of the logging call.</p> <p></p>"},{"location":"knowledge/programming_languages/go/go_style/best-practices/#documentation","title":"Documentation","text":""},{"location":"knowledge/programming_languages/go/go_style/best-practices/#conventions","title":"Conventions","text":"<p>This section augments the decisions document\u2019s commentary section.</p> <p>Go code that is documented in familiar style is easier to read and less likely to be misused than something misdocumented or not documented at all. Runnable examples show up in Godoc and Code Search and are an excellent way of explaining how to use your code.</p> <p></p>"},{"location":"knowledge/programming_languages/go/go_style/best-practices/#parameters-and-configuration","title":"Parameters and configuration","text":"<p>Not every parameter must be enumerated in the documentation. This applies to:</p> <ul> <li>function and method parameters</li> <li>struct fields</li> <li>APIs for options</li> </ul> <p>Document the error-prone or non-obvious fields and parameters by saying why they are interesting.</p> <p>In the following snippet, the highlighted commentary adds little useful information to the reader:</p> <pre><code>// Bad:\n// Sprintf formats according to a format specifier and returns the resulting\n// string.\n//\n// format is the format, and data is the interpolation data.\nfunc Sprintf(format string, data ...interface{}) string\n</code></pre> <p>However, this snippet demonstrates a code scenario similar to the previous where the commentary instead states something non-obvious or materially helpful to the reader:</p> <pre><code>// Good:\n// Sprintf formats according to a format specifier and returns the resulting\n// string.\n//\n// The provided data is used to interpolate the format string. If the data does\n// not match the expected format verbs or the amount of data does not satisfy\n// the format specification, the function will inline warnings about formatting\n// errors into the output string as described by the Format errors section\n// above.\nfunc Sprintf(format string, data ...interface{}) string\n</code></pre> <p>Consider your likely audience in choosing what to document and at what depth. Maintainers, newcomers to the team, external users, and even yourself six months in the future may appreciate slightly different information from what is on your mind when you first come to write your docs.</p> <p>See also:</p> <ul> <li>GoTip #41: Identify Function Call Parameters</li> <li>GoTip #51: Patterns for Configuration</li> </ul> <p></p>"},{"location":"knowledge/programming_languages/go/go_style/best-practices/#contexts","title":"Contexts","text":"<p>It is implied that the cancellation of a context argument interrupts the function it is provided to. If the function can return an error, conventionally it is <code>ctx.Err()</code>.</p> <p>This fact does not need to be restated:</p> <pre><code>// Bad:\n// Run executes the worker's run loop.\n//\n// The method will process work until the context is cancelled and accordingly\n// returns an error.\nfunc (Worker) Run(ctx context.Context) error\n</code></pre> <p>Because that is implied, the following is better:</p> <pre><code>// Good:\n// Run executes the worker's run loop.\nfunc (Worker) Run(ctx context.Context) error\n</code></pre> <p>Where context behavior is different or non-obvious, it should be expressly documented:</p> <ul> <li> <p>If the function returns an error other than <code>ctx.Err()</code> when the context is     cancelled:</p> <p><code>go // Good: // Run executes the worker's run loop. // // If the context is cancelled, Run returns a nil error. func (Worker) Run(ctx context.Context) error</code></p> </li> <li> <p>If the function has other mechanisms that may interrupt it or affect     lifetime:</p> <p>```go // Good: // Run executes the worker\u2019s run loop. // // Run processes work until the context is cancelled or Stop is called. // Context cancellation is handled asynchronously internally: run may return // before all work has stopped. The Stop method is synchronous and waits // until all operations from the run loop finish. Use Stop for graceful // shutdown. func (Worker) Run(ctx context.Context) error</p> <p>func (Worker) Stop() ```</p> </li> <li> <p>If the function has special expectations about context lifetime, lineage, or     attached values:</p> <p>```go // Good: // NewReceiver starts receiving messages sent to the specified queue. // The context should not have a deadline. func NewReceiver(ctx context.Context) *Receiver</p> <p>// Principal returns a human-readable name of the party who made the call. // The context must have a value attached to it from security.NewContext. func Principal(ctx context.Context) (name string, ok bool) ```</p> <p>Warning: Avoid designing APIs that make such demands (like contexts not having deadlines) from their callers. The above is only an example of how to document this if it cannot be avoided, not an endorsement of the pattern.</p> </li> </ul> <p></p>"},{"location":"knowledge/programming_languages/go/go_style/best-practices/#concurrency","title":"Concurrency","text":"<p>Go users assume that conceptually read-only operations are safe for concurrent use and do not require extra synchronization.</p> <p>The extra remark about concurrency can safely be removed in this Godoc:</p> <pre><code>// Len returns the number of bytes of the unread portion of the buffer;\n// b.Len() == len(b.Bytes()).\n//\n// It is safe to be called concurrently by multiple goroutines.\nfunc (*Buffer) Len() int\n</code></pre> <p>Mutating operations, however, are not assumed to be safe for concurrent use and require the user to consider synchronization.</p> <p>Similarly, the extra remark about concurrency can safely be removed here:</p> <pre><code>// Grow grows the buffer's capacity.\n//\n// It is not safe to be called concurrently by multiple goroutines.\nfunc (*Buffer) Grow(n int)\n</code></pre> <p>Documentation is strongly encouraged if:</p> <ul> <li> <p>it is unclear whether the operation is read-only or a mutating</p> <p>```go // Good: package lrucache</p> <p>// Lookup returns the data associated with the key from the cache. // // This operation is not safe for concurrent use. func (*Cache) Lookup(key string) (data []byte, ok bool) ```</p> <p>Why? A cache hit when looking up the key mutate a LRU cache internally. How this is implemented may not be obvious to all readers.</p> </li> <li> <p>synchronization is provided by API</p> <p>```go // Good: package fortune_go_proto</p> <p>// NewFortuneTellerClient returns an rpc.Client for the FortuneTeller service. // It is safe for simultaneous use by multiple goroutines. func NewFortuneTellerClient(cc rpc.ClientConn) *FortuneTellerClient ```</p> <p>Why? Stubby provides synchronization.</p> <p>Note: If the API is a type and the API provides synchronization in entirety, conventionally only the type definition documents the semantics.</p> </li> <li> <p>the API consumes user-implemented types of interfaces, and the interface\u2019s     consumer has particular concurrency requirements:</p> <p>```go // Good: package health</p> <p>// A Watcher reports the health of some entity (usually a backend service). // // Watcher methods are safe for simultaneous use by multiple goroutines. type Watcher interface {     // Watch sends true on the passed-in channel when the Watcher\u2019s     // status has changed.     Watch(changed chan&lt;- bool) (unwatch func())</p> <pre><code>// Health returns nil if the entity being watched is healthy, or a\n// non-nil error explaining why the entity is not healthy.\nHealth() error\n</code></pre> <p>} ```</p> <p>Why? Whether an API is safe for use by multiple goroutines is part of its contract.</p> </li> </ul> <p></p>"},{"location":"knowledge/programming_languages/go/go_style/best-practices/#cleanup","title":"Cleanup","text":"<p>Document any explicit cleanup requirements that the API has. Otherwise, callers won\u2019t use the API correctly, leading to resource leaks and other possible bugs.</p> <p>Call out cleanups that are up to the caller:</p> <pre><code>// Good:\n// NewTicker returns a new Ticker containing a channel that will send the\n// current time on the channel after each tick.\n//\n// Call Stop to release the Ticker's associated resources when done.\nfunc NewTicker(d Duration) *Ticker\n\nfunc (*Ticker) Stop()\n</code></pre> <p>If it is potentially unclear how to clean up the resources, explain how:</p> <pre><code>// Good:\n// Get issues a GET to the specified URL.\n//\n// When err is nil, resp always contains a non-nil resp.Body.\n// Caller should close resp.Body when done reading from it.\n//\n//    resp, err := http.Get(\"http://example.com/\")\n//    if err != nil {\n//        // handle error\n//    }\n//    defer resp.Body.Close()\n//    body, err := io.ReadAll(resp.Body)\nfunc (c *Client) Get(url string) (resp *Response, err error)\n</code></pre> <p></p>"},{"location":"knowledge/programming_languages/go/go_style/best-practices/#preview","title":"Preview","text":"<p>Go features a documentation server. It is recommended to preview the documentation your code produces both before and during the code review process. This helps to validate that the godoc formatting is rendered correctly.</p> <p></p>"},{"location":"knowledge/programming_languages/go/go_style/best-practices/#godoc-formatting","title":"Godoc formatting","text":"<p>Godoc provides some specific syntax to format documentation.</p> <ul> <li> <p>A blank line is required to separate paragraphs:</p> <p><code>go // Good: // LoadConfig reads a configuration out of the named file. // // See some/shortlink for config file format details.</code></p> </li> <li> <p>Test files can contain runnable examples that appear attached to the     corresponding documentation in godoc:</p> <p><code>go // Good: func ExampleConfig_WriteTo() {   cfg := &amp;Config{     Name: \"example\",   }   if err := cfg.WriteTo(os.Stdout); err != nil {     log.Exitf(\"Failed to write config: %s\", err)   }   // Output:   // {   //   \"name\": \"example\"   // } }</code></p> </li> <li> <p>Indenting lines by an additional two spaces formats them verbatim:</p> <p><code>go // Good: // Update runs the function in an atomic transaction. // // This is typically used with an anonymous TransactionFunc: // //   if err := db.Update(func(state *State) { state.Foo = bar }); err != nil { //     //... //   }</code></p> <p>Note, however, that it can often be more appropriate to put code in a runnable example instead of including it in a comment.</p> <p>This verbatim formatting can be leveraged for formatting that is not native to godoc, such as lists and tables:</p> <p><code>go // Good: // LoadConfig reads a configuration out of the named file. // // LoadConfig treats the following keys in special ways: //   \"import\" will make this configuration inherit from the named file. //   \"env\" if present will be populated with the system environment.</code></p> </li> <li> <p>A single line that begins with a capital letter, contains no punctuation     except parentheses and commas, and is followed by another paragraph, is     formatted as a header:</p> <p><code>go // Good: // The following line is formatted as a heading. // // Using headings // // Headings come with autogenerated anchor tags for easy linking.</code></p> </li> </ul> <p></p>"},{"location":"knowledge/programming_languages/go/go_style/best-practices/#signal-boosting","title":"Signal boosting","text":"<p>Sometimes a line of code looks like something common, but actually isn\u2019t. One of the best examples of this is an <code>err == nil</code> check (since <code>err != nil</code> is much more common). The following two conditional checks are hard to distinguish:</p> <pre><code>// Good:\nif err := doSomething(); err != nil {\n    // ...\n}\n</code></pre> <pre><code>// Bad:\nif err := doSomething(); err == nil {\n    // ...\n}\n</code></pre> <p>You can instead \u201cboost\u201d the signal of the conditional by adding a comment:</p> <pre><code>// Good:\nif err := doSomething(); err == nil { // if NO error\n    // ...\n}\n</code></pre> <p>The comment draws attention to the difference in the conditional.</p> <p></p>"},{"location":"knowledge/programming_languages/go/go_style/best-practices/#variable-declarations","title":"Variable declarations","text":""},{"location":"knowledge/programming_languages/go/go_style/best-practices/#initialization","title":"Initialization","text":"<p>For consistency, prefer <code>:=</code> over <code>var</code> when initializing a new variable with a non-zero value.</p> <pre><code>// Good:\ni := 42\n</code></pre> <pre><code>// Bad:\nvar i = 42\n</code></pre> <p></p>"},{"location":"knowledge/programming_languages/go/go_style/best-practices/#non-pointer-zero-values","title":"Non-pointer zero values","text":"<p>The following declarations use the zero value:</p> <pre><code>// Good:\nvar (\n    coords Point\n    magic  [4]byte\n    primes []int\n)\n</code></pre> <p>You should declare values using the zero value when you want to convey an empty value that is ready for later use. Using composite literals with explicit initialization can be clunky:</p> <pre><code>// Bad:\nvar (\n    coords = Point{X: 0, Y: 0}\n    magic  = [4]byte{0, 0, 0, 0}\n    primes = []int(nil)\n)\n</code></pre> <p>A common application of zero value declaration is when using a variable as the output when unmarshalling:</p> <pre><code>// Good:\nvar coords Point\nif err := json.Unmarshal(data, &amp;coords); err != nil {\n</code></pre> <p>If you need a lock or other field that must not be copied in your struct, you can make it a value type to take advantage of zero value initialization. It does mean that the containing type must now be passed via a pointer and not a value. Methods on the type must take pointer receivers.</p> <pre><code>// Good:\ntype Counter struct {\n    // This field does not have to be \"*sync.Mutex\". However,\n    // users must now pass *Counter objects between themselves, not Counter.\n    mu   sync.Mutex\n    data map[string]int64\n}\n\n// Note this must be a pointer receiver to prevent copying.\nfunc (c *Counter) IncrementBy(name string, n int64)\n</code></pre> <p>It\u2019s acceptable to use value types for local variables of composites (such as structs and arrays) even if they contain such uncopyable fields. However, if the composite is returned by the function, or if all accesses to it end up needing to take an address anyway, prefer declaring the variable as a pointer type at the outset. Similarly, protobufs should be declared as pointer types.</p> <pre><code>// Good:\nfunc NewCounter(name string) *Counter {\n    c := new(Counter) // \"&amp;Counter{}\" is also fine.\n    registerCounter(name, c)\n    return c\n}\n\nvar myMsg = new(pb.Bar) // or \"&amp;pb.Bar{}\".\n</code></pre> <p>This is because <code>*pb.Something</code> satisfies [<code>proto.Message</code>] while <code>pb.Something</code> does not.</p> <pre><code>// Bad:\nfunc NewCounter(name string) *Counter {\n    var c Counter\n    registerCounter(name, &amp;c)\n    return &amp;c\n}\n\nvar myMsg = pb.Bar{}\n</code></pre> <p>Important: Map types must be explicitly initialized before they can be modified. However, reading from zero-value maps is perfectly fine.</p> <p>For map and slice types, if the code is particularly performance sensitive and if you know the sizes in advance, see the size hints section.</p> <p></p>"},{"location":"knowledge/programming_languages/go/go_style/best-practices/#composite-literals","title":"Composite literals","text":"<p>The following are composite literal declarations:</p> <pre><code>// Good:\nvar (\n    coords   = Point{X: x, Y: y}\n    magic    = [4]byte{'I', 'W', 'A', 'D'}\n    primes   = []int{2, 3, 5, 7, 11}\n    captains = map[string]string{\"Kirk\": \"James Tiberius\", \"Picard\": \"Jean-Luc\"}\n)\n</code></pre> <p>You should declare a value using a composite literal when you know initial elements or members.</p> <p>In contrast, using composite literals to declare empty or memberless values can be visually noisy compared to zero-value initialization.</p> <p>When you need a pointer to a zero value, you have two options: empty composite literals and <code>new</code>. Both are fine, but the <code>new</code> keyword can serve to remind the reader that if a non-zero value were needed, a composite literal wouldn\u2019t work:</p> <pre><code>// Good:\nvar (\n  buf = new(bytes.Buffer) // non-empty Buffers are initialized with constructors.\n  msg = new(pb.Message) // non-empty proto messages are initialized with builders or by setting fields one by one.\n)\n</code></pre> <p></p>"},{"location":"knowledge/programming_languages/go/go_style/best-practices/#size-hints","title":"Size hints","text":"<p>The following are declarations that take advantage of size hints in order to preallocate capacity:</p> <pre><code>// Good:\nvar (\n    // Preferred buffer size for target filesystem: st_blksize.\n    buf = make([]byte, 131072)\n    // Typically process up to 8-10 elements per run (16 is a safe assumption).\n    q = make([]Node, 0, 16)\n    // Each shard processes shardSize (typically 32000+) elements.\n    seen = make(map[string]bool, shardSize)\n)\n</code></pre> <p>Size hints and preallocation are important steps when combined with empirical analysis of the code and its integrations, to create performance-sensitive and resource-efficient code.</p> <p>Most code does not need a size hint or preallocation, and can allow the runtime to grow the slice or map as necessary. It is acceptable to preallocate when the final size is known (e.g. when converting between a map and a slice) but this is not a readability requirement, and may not be worth the clutter in small cases.</p> <p>Warning: Preallocating more memory than you need can waste memory in the fleet or even harm performance. When in doubt, see GoTip #3: Benchmarking Go Code and default to a zero initialization or a composite literal declaration.</p> <p></p>"},{"location":"knowledge/programming_languages/go/go_style/best-practices/#channel-direction","title":"Channel direction","text":"<p>Specify channel direction where possible.</p> <pre><code>// Good:\n// sum computes the sum of all of the values. It reads from the channel until\n// the channel is closed.\nfunc sum(values &lt;-chan int) int {\n    // ...\n}\n</code></pre> <p>This prevents casual programming errors that are possible without specification:</p> <pre><code>// Bad:\nfunc sum(values chan int) (out int) {\n    for v := range values {\n        out += v\n    }\n    // values must already be closed for this code to be reachable, which means\n    // a second close triggers a panic.\n    close(values)\n}\n</code></pre> <p>When the direction is specified, the compiler catches simple errors like this. It also helps to convey a measure of ownership to the type.</p> <p>See also Bryan Mills\u2019 talk \u201cRethinking Classical Concurrency Patterns\u201d: slides video.</p> <p></p>"},{"location":"knowledge/programming_languages/go/go_style/best-practices/#function-argument-lists","title":"Function argument lists","text":"<p>Don\u2019t let the signature of a function get too long. As more parameters are added to a function, the role of individual parameters becomes less clear, and adjacent parameters of the same type become easier to confuse. Functions with large numbers of arguments are less memorable and more difficult to read at the call-site.</p> <p>When designing an API, consider splitting a highly configurable function whose signature is growing complex into several simpler ones. These can share an (unexported) implementation if necessary.</p> <p>Where a function requires many inputs, consider introducing an option struct for some of the arguments or employing the more advanced variadic options technique. The primary consideration for which strategy to choose should be how the function call looks across all expected use cases.</p> <p>The recommendations below primarily apply to exported APIs, which are held to a higher standard than unexported ones. These techniques may be unnecessary for your use case. Use your judgment, and balance the principles of clarity and least mechanism.</p> <p>See also: Go Tip #24: Use Case-Specific Constructions</p> <p></p>"},{"location":"knowledge/programming_languages/go/go_style/best-practices/#option-structure","title":"Option structure","text":"<p>An option structure is a struct type that collects some or all of the arguments of a function or method, that is then passed as the last argument to the function or method. (The struct should be exported only if it is used in an exported function.)</p> <p>Using an option structure has a number of benefits:</p> <ul> <li>The struct literal includes both fields and values for each argument, which     makes them self-documenting and harder to swap.</li> <li>Irrelevant or \u201cdefault\u201d fields can be omitted.</li> <li>Callers can share the options struct and write helpers to operate on it.</li> <li>Structs provide cleaner per-field documentation than function arguments.</li> <li>Option structs can grow over time without impacting call-sites.</li> </ul> <p>Here is an example of a function that could be improved:</p> <pre><code>// Bad:\nfunc EnableReplication(ctx context.Context, config *replicator.Config, primaryRegions, readonlyRegions []string, replicateExisting, overwritePolicies bool, replicationInterval time.Duration, copyWorkers int, healthWatcher health.Watcher) {\n    // ...\n}\n</code></pre> <p>The function above could be rewritten with an option structure as follows:</p> <pre><code>// Good:\ntype ReplicationOptions struct {\n    Config              *replicator.Config\n    PrimaryRegions      []string\n    ReadonlyRegions     []string\n    ReplicateExisting   bool\n    OverwritePolicies   bool\n    ReplicationInterval time.Duration\n    CopyWorkers         int\n    HealthWatcher       health.Watcher\n}\n\nfunc EnableReplication(ctx context.Context, opts ReplicationOptions) {\n    // ...\n}\n</code></pre> <p>The function can then be called in a different package:</p> <pre><code>// Good:\nfunc foo(ctx context.Context) {\n    // Complex call:\n    storage.EnableReplication(ctx, storage.ReplicationOptions{\n        Config:              config,\n        PrimaryRegions:      []string{\"us-east1\", \"us-central2\", \"us-west3\"},\n        ReadonlyRegions:     []string{\"us-east5\", \"us-central6\"},\n        OverwritePolicies:   true,\n        ReplicationInterval: 1 * time.Hour,\n        CopyWorkers:         100,\n        HealthWatcher:       watcher,\n    })\n\n    // Simple call:\n    storage.EnableReplication(ctx, storage.ReplicationOptions{\n        Config:         config,\n        PrimaryRegions: []string{\"us-east1\", \"us-central2\", \"us-west3\"},\n    })\n}\n</code></pre> <p>Note: Contexts are never included in option structs.</p> <p>This option is often preferred when some of the following apply:</p> <ul> <li>All callers need to specify one or more of the options.</li> <li>A large number of callers need to provide many options.</li> <li>The options are shared between multiple functions that the user will call.</li> </ul> <p></p>"},{"location":"knowledge/programming_languages/go/go_style/best-practices/#variadic-options","title":"Variadic options","text":"<p>Using variadic options, exported functions are created which return closures that can be passed to the [variadic (<code>...</code>) parameter] of a function. The function takes as its parameters the values of the option (if any), and the returned closure accepts a mutable reference (usually a pointer to a struct type) that will be updated based on the inputs.</p> <p>Using variadic options can provide a number of benefits:</p> <ul> <li>Options take no space at a call-site when no configuration is needed.</li> <li>Options are still values, so callers can share them, write helpers, and     accumulate them.</li> <li>Options can accept multiple parameters (e.g. <code>cartesian.Translate(dx, dy     int) TransformOption</code>).</li> <li>The option functions can return a named type to group options together in     godoc.</li> <li>Packages can allow (or prevent) third-party packages to define (or from     defining) their own options.</li> </ul> <p>Note: Using variadic options requires a substantial amount of additional code (see the following example), so it should only be used when the advantages outweigh the overhead.</p> <p>Here is an example of a function that could be improved:</p> <pre><code>// Bad:\nfunc EnableReplication(ctx context.Context, config *placer.Config, primaryCells, readonlyCells []string, replicateExisting, overwritePolicies bool, replicationInterval time.Duration, copyWorkers int, healthWatcher health.Watcher) {\n  ...\n}\n</code></pre> <p>The example above could be rewritten with variadic options as follows:</p> <pre><code>// Good:\ntype replicationOptions struct {\n    readonlyCells       []string\n    replicateExisting   bool\n    overwritePolicies   bool\n    replicationInterval time.Duration\n    copyWorkers         int\n    healthWatcher       health.Watcher\n}\n\n// A ReplicationOption configures EnableReplication.\ntype ReplicationOption func(*replicationOptions)\n\n// ReadonlyCells adds additional cells that should additionally\n// contain read-only replicas of the data.\n//\n// Passing this option multiple times will add additional\n// read-only cells.\n//\n// Default: none\nfunc ReadonlyCells(cells ...string) ReplicationOption {\n    return func(opts *replicationOptions) {\n        opts.readonlyCells = append(opts.readonlyCells, cells...)\n    }\n}\n\n// ReplicateExisting controls whether files that already exist in the\n// primary cells will be replicated.  Otherwise, only newly-added\n// files will be candidates for replication.\n//\n// Passing this option again will overwrite earlier values.\n//\n// Default: false\nfunc ReplicateExisting(enabled bool) ReplicationOption {\n    return func(opts *replicationOptions) {\n        opts.replicateExisting = enabled\n    }\n}\n\n// ... other options ...\n\n// DefaultReplicationOptions control the default values before\n// applying options passed to EnableReplication.\nvar DefaultReplicationOptions = []ReplicationOption{\n    OverwritePolicies(true),\n    ReplicationInterval(12 * time.Hour),\n    CopyWorkers(10),\n}\n\nfunc EnableReplication(ctx context.Context, config *placer.Config, primaryCells []string, opts ...ReplicationOption) {\n    var options replicationOptions\n    for _, opt := range DefaultReplicationOptions {\n        opt(&amp;options)\n    }\n    for _, opt := range opts {\n        opt(&amp;options)\n    }\n}\n</code></pre> <p>The function can then be called in a different package:</p> <pre><code>// Good:\nfunc foo(ctx context.Context) {\n    // Complex call:\n    storage.EnableReplication(ctx, config, []string{\"po\", \"is\", \"ea\"},\n        storage.ReadonlyCells(\"ix\", \"gg\"),\n        storage.OverwritePolicies(true),\n        storage.ReplicationInterval(1*time.Hour),\n        storage.CopyWorkers(100),\n        storage.HealthWatcher(watcher),\n    )\n\n    // Simple call:\n    storage.EnableReplication(ctx, config, []string{\"po\", \"is\", \"ea\"})\n}\n</code></pre> <p>Prefer this option when many of the following apply:</p> <ul> <li>Most callers will not need to specify any options.</li> <li>Most options are used infrequently.</li> <li>There are a large number of options.</li> <li>Options require arguments.</li> <li>Options could fail or be set incorrectly (in which case the option function     returns an <code>error</code>).</li> <li>Options require a lot of documentation that can be hard to fit in a struct.</li> <li>Users or other packages can provide custom options.</li> </ul> <p>Options in this style should accept parameters rather than using presence to signal their value; the latter can make dynamic composition of arguments much more difficult. For example, binary settings should accept a boolean (e.g. <code>rpc.FailFast(enable bool)</code> is preferable to <code>rpc.EnableFailFast()</code>). An enumerated option should accept an enumerated constant (e.g. <code>log.Format(log.Capacitor)</code> is preferable to <code>log.CapacitorFormat()</code>). The alternative makes it much more difficult for users who must programmatically choose which options to pass; such users are forced to change the actual composition of the parameters rather than simply changing the arguments to the options. Don\u2019t assume that all users will know the full set of options statically.</p> <p>In general, options should be processed in order. If there is a conflict or if a non-cumulative option is passed multiple times, the last argument should win.</p> <p>The parameter to the option function is generally unexported in this pattern, to restrict the options to being defined only within the package itself. This is a good default, though there may be times when it is appropriate to allow other packages to define options.</p> <p>See Rob Pike\u2019s original blog post and Dave Cheney\u2019s talk for a more in-depth look at how these options can be used.</p> <p></p>"},{"location":"knowledge/programming_languages/go/go_style/best-practices/#complex-command-line-interfaces","title":"Complex command-line interfaces","text":"<p>Some programs wish to present users with a rich command-line interface that includes sub-commands. For example, <code>kubectl create</code>, <code>kubectl run</code>, and many other sub-commands are all provided by the program <code>kubectl</code>. There are at least the following libraries in common use for achieving this.</p> <p>If you don\u2019t have a preference or other considerations are equal, subcommands is recommended, since it is the simplest and is easy to use correctly. However, if you need different features that it doesn\u2019t provide, pick one of the other options.</p> <ul> <li> <p>cobra</p> <ul> <li>Flag convention: getopt</li> <li>Common outside the Google codebase.</li> <li>Many extra features.</li> <li>Pitfalls in usage (see below).</li> </ul> </li> <li> <p>subcommands</p> <ul> <li>Flag convention: Go</li> <li>Simple and easy to use correctly.</li> <li>Recommended if you don\u2019t need extra features.</li> </ul> </li> </ul> <p>Warning: cobra command functions should use <code>cmd.Context()</code> to obtain a context rather than creating their own root context with <code>context.Background</code>. Code that uses the subcommands package already receives the correct context as a function parameter.</p> <p>You are not required to place each subcommand in a separate package, and it is often not necessary to do so. Apply the same considerations about package boundaries as in any Go codebase. If your code can be used both as a library and as a binary, it is usually beneficial to separate the CLI code and the library, making the CLI just one more of its clients. (This is not specific to CLIs that have subcommands, but is mentioned here because it is a common place where it comes up.)</p> <p></p>"},{"location":"knowledge/programming_languages/go/go_style/best-practices/#tests","title":"Tests","text":""},{"location":"knowledge/programming_languages/go/go_style/best-practices/#leave-testing-to-the-test-function","title":"Leave testing to the <code>Test</code> function","text":"<p>Go distinguishes between \u201ctest helpers\u201d and \u201cassertion helpers\u201d:</p> <ul> <li> <p>Test helpers are functions that do setup or cleanup tasks. All failures     that occur in test helpers are expected to be failures of the environment     (not from the code under test) \u2014 for example when a test database cannot be     started because there are no more free ports on this machine. For functions     like these, calling <code>t.Helper</code> is often appropriate to     mark them as a test helper. See error handling in test helpers for more     details.</p> </li> <li> <p>Assertion helpers are functions that check the correctness of a system     and fail the test if an expectation is not met. Assertion helpers are     not considered idiomatic in Go.</p> </li> </ul> <p>The purpose of a test is to report pass/fail conditions of the code under test. The ideal place to fail a test is within the <code>Test</code> function itself, as that ensures that failure messages and the test logic are clear.</p> <p>As your testing code grows, it may become necessary to factor out some functionality to separate functions. Standard software engineering considerations still apply, as test code is still code. If the functionality does not interact with the testing framework, then all of the usual rules apply. When the common code interacts with the framework, however, some care must be taken to avoid common pitfalls that can lead to uninformative failure messages and unmaintainable tests.</p> <p>If many separate test cases require the same validation logic, arrange the test in one of the following ways instead of using assertion helpers or complex validation functions:</p> <ul> <li>Inline the logic (both the validation and the failure) in the <code>Test</code>     function, even if it is repetitive. This works best in simple cases.</li> <li>If inputs are similar, consider unifying them into a table-driven test     while keeping the logic inlined in the loop. This helps to avoid repetition     while keeping the validation and failure in the <code>Test</code>.</li> <li>If there are multiple callers who need the same validation function but     table tests are not suitable (typically because the inputs are not simple     enough or the validation is required as part of a sequence of operations),     arrange the validation function so that it returns a value (typically an     <code>error</code>) rather than taking a <code>testing.T</code> parameter and using it to fail the     test. Use logic within the <code>Test</code> to decide whether to fail, and to provide     useful test failures. You can also create test helpers to factor out     common boilerplate setup code.</li> </ul> <p>The design outlined in the last point maintains orthogonality. For example, [package <code>cmp</code>] is not designed to fail tests, but rather to compare (and to diff) values. It therefore does not need to know about the context in which the comparison was made, since the caller can supply that. If your common testing code provides a <code>cmp.Transformer</code> for your data type, that can often be the simplest design. For other validations, consider returning an <code>error</code> value.</p> <pre><code>// Good:\n// polygonCmp returns a cmp.Option that equates s2 geometry objects up to\n// some small floating-point error.\nfunc polygonCmp() cmp.Option {\n    return cmp.Options{\n        cmp.Transformer(\"polygon\", func(p *s2.Polygon) []*s2.Loop { return p.Loops() }),\n        cmp.Transformer(\"loop\", func(l *s2.Loop) []s2.Point { return l.Vertices() }),\n        cmpopts.EquateApprox(0.00000001, 0),\n        cmpopts.EquateEmpty(),\n    }\n}\n\nfunc TestFenceposts(t *testing.T) {\n    // This is a test for a fictional function, Fenceposts, which draws a fence\n    // around some Place object. The details are not important, except that\n    // the result is some object that has s2 geometry (github.com/golang/geo/s2)\n    got := Fencepost(tomsDiner, 1*meter)\n    if diff := cmp.Diff(want, got, polygonCmp()); diff != \"\" {\n        t.Errorf(\"Fencepost(tomsDiner, 1m) returned unexpected diff (-want+got):\\n%v\", diff)\n    }\n}\n\nfunc FuzzFencepost(f *testing.F) {\n    // Fuzz test (https://go.dev/doc/fuzz) for the same.\n\n    f.Add(tomsDiner, 1*meter)\n    f.Add(school, 3*meter)\n\n    f.Fuzz(func(t *testing.T, geo Place, padding Length) {\n        got := Fencepost(geo, padding)\n        // Simple reference implementation: not used in prod, but easy to\n        // reason about and therefore useful to check against in random tests.\n        reference := slowFencepost(geo, padding)\n\n        // In the fuzz test, inputs and outputs can be large so don't\n        // bother with printing a diff. cmp.Equal is enough.\n        if !cmp.Equal(got, reference, polygonCmp()) {\n            t.Errorf(\"Fencepost returned wrong placement\")\n        }\n    })\n}\n</code></pre> <p>The <code>polygonCmp</code> function is agnostic about how it\u2019s called; it doesn\u2019t take a concrete input type nor does it police what to do in case two objects don\u2019t match. Therefore, more callers can make use of it.</p> <p>Note: There is an analogy between test helpers and plain library code. Code in libraries should usually not panic except in rare circumstances; code called from a test should not stop the test unless there is no point in proceeding.</p> <p></p>"},{"location":"knowledge/programming_languages/go/go_style/best-practices/#designing-extensible-validation-apis","title":"Designing extensible validation APIs","text":"<p>Most of the advice about testing in the style guide is about testing your own code. This section is about how to provide facilities for other people to test the code they write to ensure that it conforms to your library\u2019s requirements.</p> <p></p>"},{"location":"knowledge/programming_languages/go/go_style/best-practices/#acceptance-testing","title":"Acceptance testing","text":"<p>Such testing is referred to as acceptance testing. The premise of this kind of testing is that the person using the test does not know every last detail of what goes on in the test; they just hand the inputs over to the testing facility to do the work. This can be thought of as a form of inversion of control.</p> <p>In a typical Go test, the test function controls the program flow, and the no assert and test functions guidance encourages you to keep it that way. This section explains how to author support for these tests in a way that is consistent with Go style.</p> <p>Before diving into how, consider an example from [<code>io/fs</code>], excerpted below:</p> <pre><code>type FS interface {\n    Open(name string) (File, error)\n}\n</code></pre> <p>While there exist well-known implementations of <code>fs.FS</code>, a Go developer may be expected to author one. To help validate the user-implemented <code>fs.FS</code> is correct, a generic library has been provided in [<code>testing/fstest</code>] called [<code>fstest.TestFS</code>]. This API treats the implementation as a blackbox to make sure it upholds the most basic parts of the <code>io/fs</code> contract.</p> <p></p>"},{"location":"knowledge/programming_languages/go/go_style/best-practices/#writing-an-acceptance-test","title":"Writing an acceptance test","text":"<p>Now that we know what an acceptance test is and why you might use one, let\u2019s explore building an acceptance test for <code>package chess</code>, a package used to simulate chess games. Users of <code>chess</code> are expected to implement the <code>chess.Player</code> interface. These implementations are the primary thing we will validate. Our acceptance test concerns itself with whether the player implementation makes legal moves, not whether the moves are smart.</p> <ol> <li> <p>Create a new package for the validation behavior,     customarily named by appending the word     <code>test</code> to the package name (for example, <code>chesstest</code>).</p> </li> <li> <p>Create the function that performs the validation by accepting the     implementation under test as an argument and exercises it:</p> <p><code>go // ExercisePlayer tests a Player implementation in a single turn on a board. // The board itself is spot checked for sensibility and correctness. // // It returns a nil error if the player makes a correct move in the context // of the provided board. Otherwise ExercisePlayer returns one of this // package's errors to indicate how and why the player failed the // validation. func ExercisePlayer(b *chess.Board, p chess.Player) error</code></p> <p>The test should note which invariants are broken and how. Your design can choose between two disciplines for failure reporting:</p> <ul> <li> <p>Fail fast: return an error as soon as the implementation violates an     invariant.</p> <p>This is the simplest approach, and it works well if the acceptance test is expected to execute quickly. Simple error sentinels and custom types can be used easily here, which conversely makes testing the acceptance test easy.</p> <p><code>go for color, army := range b.Armies {     // The king should never leave the board, because the game ends at     // checkmate.     if army.King == nil {         return &amp;MissingPieceError{Color: color, Piece: chess.King}     } }</code></p> </li> <li> <p>Aggregate all failures: collect all failures, and report them all.</p> <p>This approach resembles the keep going guidance in feel and may be preferable if the acceptance test is expected to execute slowly.</p> <p>How you aggregate the failures should be dictated by whether you want to give users the ability or yourself the ability to interrogate individual failures (for example, for you to test your acceptance test). Below demonstrates using a custom error type that aggregates errors:</p> <p>```go var badMoves []error</p> <p>move := p.Move() if putsOwnKingIntoCheck(b, move) {     badMoves = append(badMoves, PutsSelfIntoCheckError{Move: move}) }</p> <p>if len(badMoves) &gt; 0 {     return SimulationError{BadMoves: badMoves} } return nil ```</p> </li> </ul> </li> </ol> <p>The acceptance test should honor the keep going guidance by not calling <code>t.Fatal</code> unless the test detects a broken invariant in the system being exercised.</p> <p>For example, <code>t.Fatal</code> should be reserved for exceptional cases such as setup failure as usual:</p> <pre><code>func ExerciseGame(t *testing.T, cfg *Config, p chess.Player) error {\n    t.Helper()\n\n    if cfg.Simulation == Modem {\n        conn, err := modempool.Allocate()\n        if err != nil {\n            t.Fatalf(\"no modem for the opponent could be provisioned: %v\", err)\n        }\n        t.Cleanup(func() { modempool.Return(conn) })\n    }\n    // Run acceptance test (a whole game).\n}\n</code></pre> <p>This technique can help you create concise, canonical validations. But do not attempt to use it to bypass the guidance on assertions.</p> <p>The final product should be in a form similar to this for end users:</p> <pre><code>// Good:\npackage deepblue_test\n\nimport (\n    \"chesstest\"\n    \"deepblue\"\n)\n\nfunc TestAcceptance(t *testing.T) {\n    player := deepblue.New()\n    err := chesstest.ExerciseGame(t, chesstest.SimpleGame, player)\n    if err != nil {\n        t.Errorf(\"deepblue player failed acceptance test: %v\", err)\n    }\n}\n</code></pre> <p></p>"},{"location":"knowledge/programming_languages/go/go_style/best-practices/#use-real-transports","title":"Use real transports","text":"<p>When testing component integrations, especially where HTTP or RPC are used as the underlying transport between the components, prefer using the real underlying transport to connect to the test version of the backend.</p> <p>For example, suppose the code you want to test (sometimes referred to as \u201csystem under test\u201d or SUT) interacts with a backend that implements the long running operations API. To test your SUT, use a real OperationsClient that is connected to a test double (e.g., a mock, stub, or fake) of the OperationsServer.</p> <p>This is recommended over hand-implementing the client, due to the complexity of imitating client behavior correctly. By using the production client with a test-specific server, you ensure your test is using as much of the real code as possible.</p> <p>Tip: Where possible, use a testing library provided by the authors of the service under test.</p> <p></p>"},{"location":"knowledge/programming_languages/go/go_style/best-practices/#terror-vs-tfatal","title":"<code>t.Error</code> vs. <code>t.Fatal</code>","text":"<p>As discussed in decisions, tests should generally not abort at the first encountered problem.</p> <p>However, some situations require that the test not proceed. Calling <code>t.Fatal</code> is appropriate when some piece of test setup fails, especially in test setup helpers, without which you cannot run the rest of the test. In a table-driven test, <code>t.Fatal</code> is appropriate for failures that set up the whole test function before the test loop. Failures that affect a single entry in the test table, which make it impossible to continue with that entry, should be reported as follows:</p> <ul> <li>If you\u2019re not using <code>t.Run</code> subtests, use <code>t.Error</code> followed by a <code>continue</code>     statement to move on to the next table entry.</li> <li>If you\u2019re using subtests (and you\u2019re inside a call to <code>t.Run</code>), use     <code>t.Fatal</code>, which ends the current subtest and allows your test case to     progress to the next subtest.</li> </ul> <p>Warning: It is not always safe to call <code>t.Fatal</code> and similar functions. More details here.</p> <p></p>"},{"location":"knowledge/programming_languages/go/go_style/best-practices/#error-handling-in-test-helpers","title":"Error handling in test helpers","text":"<p>Note: This section discusses test helpers in the sense Go uses the term: functions that perform test setup and cleanup, not common assertion facilities. See the test functions section for more discussion.</p> <p>Operations performed by a test helper sometimes fail. For example, setting up a directory with files involves I/O, which can fail. When test helpers fail, their failure often signifies that the test cannot continue, since a setup precondition failed. When this happens, prefer calling one of the <code>Fatal</code> functions in the helper:</p> <pre><code>// Good:\nfunc mustAddGameAssets(t *testing.T, dir string) {\n    t.Helper()\n    if err := os.WriteFile(path.Join(dir, \"pak0.pak\"), pak0, 0644); err != nil {\n        t.Fatalf(\"Setup failed: could not write pak0 asset: %v\", err)\n    }\n    if err := os.WriteFile(path.Join(dir, \"pak1.pak\"), pak1, 0644); err != nil {\n        t.Fatalf(\"Setup failed: could not write pak1 asset: %v\", err)\n    }\n}\n</code></pre> <p>This keeps the calling side cleaner than if the helper were to return the error to the test itself:</p> <pre><code>// Bad:\nfunc addGameAssets(t *testing.T, dir string) error {\n    t.Helper()\n    if err := os.WriteFile(path.Join(d, \"pak0.pak\"), pak0, 0644); err != nil {\n        return err\n    }\n    if err := os.WriteFile(path.Join(d, \"pak1.pak\"), pak1, 0644); err != nil {\n        return err\n    }\n    return nil\n}\n</code></pre> <p>Warning: It is not always safe to call <code>t.Fatal</code> and similar functions. More details here.</p> <p>The failure message should include a description of what happened. This is important, as you may be providing a testing API to many users, especially as the number of error-producing steps in the helper increases. When the test fails, the user should know where, and why.</p> <p>Tip: Go 1.14 introduced a [<code>t.Cleanup</code>] function that can be used to register cleanup functions that run when your test completes. The function also works with test helpers. See GoTip #4: Cleaning Up Your Tests for guidance on simplifying test helpers.</p> <p>The snippet below in a fictional file called <code>paint_test.go</code> demonstrates how <code>(*testing.T).Helper</code> influences failure reporting in a Go test:</p> <pre><code>package paint_test\n\nimport (\n    \"fmt\"\n    \"testing\"\n)\n\nfunc paint(color string) error {\n    return fmt.Errorf(\"no %q paint today\", color)\n}\n\nfunc badSetup(t *testing.T) {\n    // This should call t.Helper, but doesn't.\n    if err := paint(\"taupe\"); err != nil {\n        t.Fatalf(\"could not paint the house under test: %v\", err) // line 15\n    }\n}\n\nfunc mustGoodSetup(t *testing.T) {\n    t.Helper()\n    if err := paint(\"lilac\"); err != nil {\n        t.Fatalf(\"could not paint the house under test: %v\", err)\n    }\n}\n\nfunc TestBad(t *testing.T) {\n    badSetup(t)\n    // ...\n}\n\nfunc TestGood(t *testing.T) {\n    mustGoodSetup(t) // line 32\n    // ...\n}\n</code></pre> <p>Here is an example of this output when run. Note the highlighted text and how it differs:</p> <pre><code>=== RUN   TestBad\n    paint_test.go:15: could not paint the house under test: no \"taupe\" paint today\n--- FAIL: TestBad (0.00s)\n=== RUN   TestGood\n    paint_test.go:32: could not paint the house under test: no \"lilac\" paint today\n--- FAIL: TestGood (0.00s)\nFAIL\n</code></pre> <p>The error with <code>paint_test.go:15</code> refers to the line of the setup function that failed in <code>badSetup</code>:</p> <p><code>t.Fatalf(\"could not paint the house under test: %v\", err)</code></p> <p>Whereas <code>paint_test.go:32</code> refers to the line of the test that failed in <code>TestGood</code>:</p> <p><code>goodSetup(t)</code></p> <p>Correctly using <code>(*testing.T).Helper</code> attributes the location of the failure much better when:</p> <ul> <li>the helper functions grow</li> <li>the helper functions call other helpers</li> <li>the amount of helper usage in the test functions grow</li> </ul> <p>Tip: If a helper calls <code>(*testing.T).Error</code> or <code>(*testing.T).Fatal</code>, provide some context in the format string to help determine what went wrong and why.</p> <p>Tip: If nothing a helper does can cause a test to fail, it doesn\u2019t need to call <code>t.Helper</code>. Simplify its signature by removing <code>t</code> from the function parameter list.</p> <p></p>"},{"location":"knowledge/programming_languages/go/go_style/best-practices/#dont-call-tfatal-from-separate-goroutines","title":"Don\u2019t call <code>t.Fatal</code> from separate goroutines","text":"<p>As documented in package testing, it is incorrect to call <code>t.FailNow</code>, <code>t.Fatal</code>, etc. from any goroutine but the one running the Test function (or the subtest). If your test starts new goroutines, they must not call these functions from inside these goroutines.</p> <p>Test helpers usually don\u2019t signal failure from new goroutines, and therefore it is all right for them to use <code>t.Fatal</code>. If in doubt, call <code>t.Error</code> and return instead.</p> <pre><code>// Good:\nfunc TestRevEngine(t *testing.T) {\n    engine, err := Start()\n    if err != nil {\n        t.Fatalf(\"Engine failed to start: %v\", err)\n    }\n\n    num := 11\n    var wg sync.WaitGroup\n    wg.Add(num)\n    for i := 0; i &lt; num; i++ {\n        go func() {\n            defer wg.Done()\n            if err := engine.Vroom(); err != nil {\n                // This cannot be t.Fatalf.\n                t.Errorf(\"No vroom left on engine: %v\", err)\n                return\n            }\n            if rpm := engine.Tachometer(); rpm &gt; 1e6 {\n                t.Errorf(\"Inconceivable engine rate: %d\", rpm)\n            }\n        }()\n    }\n    wg.Wait()\n\n    if seen := engine.NumVrooms(); seen != num {\n        t.Errorf(\"engine.NumVrooms() = %d, want %d\", seen, num)\n    }\n}\n</code></pre> <p>Adding <code>t.Parallel</code> to a test or subtest does not make it unsafe to call <code>t.Fatal</code>.</p> <p>When all calls to the <code>testing</code> API are in the test function, it is usually easy to spot incorrect usage because the <code>go</code> keyword is plain to see. Passing <code>testing.T</code> arguments around makes tracking such usage harder. Typically, the reason for passing these arguments is to introduce a test helper, and those should not depend on the system under test. Therefore, if a test helper registers a fatal test failure, it can and should do so from the test\u2019s goroutine.</p> <p></p>"},{"location":"knowledge/programming_languages/go/go_style/best-practices/#use-field-labels-for-struct-literals","title":"Use field labels for struct literals","text":"<p>In table-driven tests, prefer to specify the key for each test case specified. This is helpful when the test cases cover a large amount of vertical space (e.g. more than 20-30 lines), when there are adjacent fields with the same type, and also when you wish to omit fields which have the zero value. For example:</p> <pre><code>// Good:\ntests := []struct {\n    foo     *pb.Foo\n    bar     *pb.Bar\n    want    string\n}{\n    {\n        foo: pb.Foo_builder{\n            Name: \"foo\",\n            // ...\n        }.Build(),\n        bar: pb.Bar_builder{\n            Name: \"bar\",\n            // ...\n        }.Build(),\n        want: \"result\",\n    },\n}\n</code></pre> <p></p>"},{"location":"knowledge/programming_languages/go/go_style/best-practices/#keep-setup-code-scoped-to-specific-tests","title":"Keep setup code scoped to specific tests","text":"<p>Where possible, setup of resources and dependencies should be as closely scoped to specific test cases as possible. For example, given a setup function:</p> <pre><code>// mustLoadDataSet loads a data set for the tests.\n//\n// This example is very simple and easy to read. Often realistic setup is more\n// complex, error-prone, and potentially slow.\nfunc mustLoadDataset(t *testing.T) []byte {\n    t.Helper()\n    data, err := os.ReadFile(\"path/to/your/project/testdata/dataset\")\n\n    if err != nil {\n        t.Fatalf(\"could not load dataset: %v\", err)\n    }\n    return data\n}\n</code></pre> <p>Call <code>mustLoadDataset</code> explicitly in test functions that need it:</p> <pre><code>// Good:\nfunc TestParseData(t *testing.T) {\n    data := mustLoadDataset(t)\n    parsed, err := ParseData(data)\n    if err != nil {\n        t.Fatalf(\"unexpected error parsing data: %v\", err)\n    }\n    want := &amp;DataTable{ /* ... */ }\n    if got := parsed; !cmp.Equal(got, want) {\n        t.Errorf(\"ParseData(data) = %v, want %v\", got, want)\n    }\n}\n\nfunc TestListContents(t *testing.T) {\n    data := mustLoadDataset(t)\n    contents, err := ListContents(data)\n    if err != nil {\n        t.Fatalf(\"unexpected error listing contents: %v\", err)\n    }\n    want := []string{ /* ... */ }\n    if got := contents; !cmp.Equal(got, want) {\n        t.Errorf(\"ListContents(data) = %v, want %v\", got, want)\n    }\n}\n\nfunc TestRegression682831(t *testing.T) {\n    if got, want := guessOS(\"zpc79.example.com\"), \"grhat\"; got != want {\n        t.Errorf(`guessOS(\"zpc79.example.com\") = %q, want %q`, got, want)\n    }\n}\n</code></pre> <p>The test function <code>TestRegression682831</code> does not use the data set and therefore does not call <code>mustLoadDataset</code>, which could be slow and failure-prone:</p> <pre><code>// Bad:\nvar dataset []byte\n\nfunc TestParseData(t *testing.T) {\n    // As documented above without calling mustLoadDataset directly.\n}\n\nfunc TestListContents(t *testing.T) {\n    // As documented above without calling mustLoadDataset directly.\n}\n\nfunc TestRegression682831(t *testing.T) {\n    if got, want := guessOS(\"zpc79.example.com\"), \"grhat\"; got != want {\n        t.Errorf(`guessOS(\"zpc79.example.com\") = %q, want %q`, got, want)\n    }\n}\n\nfunc init() {\n    dataset = mustLoadDataset()\n}\n</code></pre> <p>A user may wish to run a function in isolation of the others and should not be penalized by these factors:</p> <pre><code># No reason for this to perform the expensive initialization.\n$ go test -run TestRegression682831\n</code></pre> <p></p>"},{"location":"knowledge/programming_languages/go/go_style/best-practices/#when-to-use-a-custom-testmain-entrypoint","title":"When to use a custom <code>TestMain</code> entrypoint","text":"<p>If all tests in the package require common setup and the setup requires teardown, you can use a custom testmain entrypoint. This can happen if the resource the test cases require is especially expensive to setup, and the cost should be amortized. Typically you have extracted any unrelated tests from the test suite at that point. It is typically only used for functional tests.</p> <p>Using a custom <code>TestMain</code> should not be your first choice due the amount of care that should be taken for correct use. Consider first whether the solution in the amortizing common test setup section or an ordinary test helper is sufficient for your needs.</p> <pre><code>// Good:\nvar db *sql.DB\n\nfunc TestInsert(t *testing.T) { /* omitted */ }\n\nfunc TestSelect(t *testing.T) { /* omitted */ }\n\nfunc TestUpdate(t *testing.T) { /* omitted */ }\n\nfunc TestDelete(t *testing.T) { /* omitted */ }\n\n// runMain sets up the test dependencies and eventually executes the tests.\n// It is defined as a separate function to enable the setup stages to clearly\n// defer their teardown steps.\nfunc runMain(ctx context.Context, m *testing.M) (code int, err error) {\n    ctx, cancel := context.WithCancel(ctx)\n    defer cancel()\n\n    d, err := setupDatabase(ctx)\n    if err != nil {\n        return 0, err\n    }\n    defer d.Close() // Expressly clean up database.\n    db = d          // db is defined as a package-level variable.\n\n    // m.Run() executes the regular, user-defined test functions.\n    // Any defer statements that have been made will be run after m.Run()\n    // completes.\n    return m.Run(), nil\n}\n\nfunc TestMain(m *testing.M) {\n    code, err := runMain(context.Background(), m)\n    if err != nil {\n        // Failure messages should be written to STDERR, which log.Fatal uses.\n        log.Fatal(err)\n    }\n    // NOTE: defer statements do not run past here due to os.Exit\n    //       terminating the process.\n    os.Exit(code)\n}\n</code></pre> <p>Ideally a test case is hermetic between invocations of itself and between other test cases.</p> <p>At the very least, ensure that individual test cases reset any global state they have modified if they have done so (for instance, if the tests are working with an external database).</p> <p></p>"},{"location":"knowledge/programming_languages/go/go_style/best-practices/#amortizing-common-test-setup","title":"Amortizing common test setup","text":"<p>Using a <code>sync.Once</code> may be appropriate, though not required, if all of the following are true about the common setup:</p> <ul> <li>It is expensive.</li> <li>It only applies to some tests.</li> <li>It does not require teardown.</li> </ul> <pre><code>// Good:\nvar dataset struct {\n    once sync.Once\n    data []byte\n    err  error\n}\n\nfunc mustLoadDataset(t *testing.T) []byte {\n    t.Helper()\n    dataset.once.Do(func() {\n        data, err := os.ReadFile(\"path/to/your/project/testdata/dataset\")\n        // dataset is defined as a package-level variable.\n        dataset.data = data\n        dataset.err = err\n    })\n    if err := dataset.err; err != nil {\n        t.Fatalf(\"could not load dataset: %v\", err)\n    }\n    return dataset.data\n}\n</code></pre> <p>When <code>mustLoadDataset</code> is used in multiple test functions, its cost is amortized:</p> <pre><code>// Good:\nfunc TestParseData(t *testing.T) {\n    data := mustLoadDataset(t)\n\n    // As documented above.\n}\n\nfunc TestListContents(t *testing.T) {\n    data := mustLoadDataset(t)\n\n    // As documented above.\n}\n\nfunc TestRegression682831(t *testing.T) {\n    if got, want := guessOS(\"zpc79.example.com\"), \"grhat\"; got != want {\n        t.Errorf(`guessOS(\"zpc79.example.com\") = %q, want %q`, got, want)\n    }\n}\n</code></pre> <p>The reason that common teardown is tricky is there is no uniform place to register cleanup routines. If the setup function (in this case <code>loadDataset</code>) relies on a context, <code>sync.Once</code> may be problematic. This is because the second of two racing calls to the setup function would need to wait for the first call to finish before returning. This period of waiting cannot be easily made to respect the context\u2019s cancellation.</p> <p></p>"},{"location":"knowledge/programming_languages/go/go_style/best-practices/#string-concatenation","title":"String concatenation","text":"<p>There are several ways to concatenate strings in Go. Some examples include:</p> <ul> <li>The \u201c+\u201d operator</li> <li><code>fmt.Sprintf</code></li> <li><code>strings.Builder</code></li> <li><code>text/template</code></li> <li><code>safehtml/template</code></li> </ul> <p>Though there is no one-size-fits-all rule for which to choose, the following guidance outlines when each method is preferred.</p> <p></p>"},{"location":"knowledge/programming_languages/go/go_style/best-practices/#prefer-for-simple-cases","title":"Prefer \u201c+\u201d for simple cases","text":"<p>Prefer using \u201c+\u201d when concatenating few strings. This method is the syntactically the simplest and requires no import.</p> <pre><code>// Good:\nkey := \"projectid: \" + p\n</code></pre> <p></p>"},{"location":"knowledge/programming_languages/go/go_style/best-practices/#prefer-fmtsprintf-when-formatting","title":"Prefer <code>fmt.Sprintf</code> when formatting","text":"<p>Prefer using <code>fmt.Sprintf</code> when building a complex string with formatting. Using many \u201c+\u201d operators may obscure the end result.</p> <pre><code>// Good:\nstr := fmt.Sprintf(\"%s [%s:%d]-&gt; %s\", src, qos, mtu, dst)\n</code></pre> <pre><code>// Bad:\nbad := src.String() + \" [\" + qos.String() + \":\" + strconv.Itoa(mtu) + \"]-&gt; \" + dst.String()\n</code></pre> <p>Best Practice: When the output of the string-building operation is an <code>io.Writer</code>, don\u2019t construct a temporary string with <code>fmt.Sprintf</code> just to send it to the Writer. Instead, use <code>fmt.Fprintf</code> to emit to the Writer directly.</p> <p>When the formatting is even more complex, prefer [<code>text/template</code>] or [<code>safehtml/template</code>] as appropriate.</p> <p></p>"},{"location":"knowledge/programming_languages/go/go_style/best-practices/#prefer-stringsbuilder-for-constructing-a-string-piecemeal","title":"Prefer <code>strings.Builder</code> for constructing a string piecemeal","text":"<p>Prefer using <code>strings.Builder</code> when building a string bit-by-bit. <code>strings.Builder</code> takes amortized linear time, whereas \u201c+\u201d and <code>fmt.Sprintf</code> take quadratic time when called sequentially to form a larger string.</p> <pre><code>// Good:\nb := new(strings.Builder)\nfor i, d := range digitsOfPi {\n    fmt.Fprintf(b, \"the %d digit of pi is: %d\\n\", i, d)\n}\nstr := b.String()\n</code></pre> <p>NOTE: For more discussion, see GoTip #29: Building Strings Efficiently.</p> <p></p>"},{"location":"knowledge/programming_languages/go/go_style/best-practices/#constant-strings","title":"Constant strings","text":"<p>Prefer to use backticks (`) when constructing constant, multi-line string literals.</p> <pre><code>// Good:\nusage := `Usage:\n\ncustom_tool [args]`\n</code></pre> <pre><code>// Bad:\nusage := \"\" +\n  \"Usage:\\n\" +\n  \"\\n\" +\n  \"custom_tool [args]\"\n</code></pre> <p>{% endraw %}</p> <p></p>"},{"location":"knowledge/programming_languages/go/go_style/best-practices/#global-state","title":"Global state","text":"<p>Libraries should not force their clients to use APIs that rely on global state. They are advised not to expose APIs or export package level variables that control behavior for all clients as parts of their API. The rest of the section uses \u201cglobal\u201d and \u201cpackage level state\u201d synonymously.</p> <p>Instead, if your functionality maintains state, allow your clients to create and use instance values.</p> <p>Important: While this guidance is applicable to all developers, it is most critical for infrastructure providers who offer libraries, integrations, and services to other teams.</p> <pre><code>// Good:\n// Package sidecar manages subprocesses that provide features for applications.\npackage sidecar\n\ntype Registry struct { plugins map[string]*Plugin }\n\nfunc New() *Registry { return &amp;Registry{plugins: make(map[string]*Plugin)} }\n\nfunc (r *Registry) Register(name string, p *Plugin) error { ... }\n</code></pre> <p>Your users will instantiate the data they need (a <code>*sidecar.Registry</code>) and then pass it as an explicit dependency:</p> <pre><code>// Good:\npackage main\n\nfunc main() {\n  sidecars := sidecar.New()\n  if err := sidecars.Register(\"Cloud Logger\", cloudlogger.New()); err != nil {\n    log.Exitf(\"could not setup cloud logger: %v\", err)\n  }\n  cfg := &amp;myapp.Config{Sidecars: sidecars}\n  myapp.Run(context.Background(), cfg)\n}\n</code></pre> <p>There are different approaches to migrating existing code to support dependency passing. The main one you will use is passing dependencies as parameters to constructors, functions, methods, or struct fields on the call chain.</p> <p>See also:</p> <ul> <li>Go Tip #5: Slimming Your Client Libraries</li> <li>Go Tip #24: Use Case-Specific Constructions</li> <li>Go Tip #40: Improving Time Testability with Function Parameters</li> <li>Go Tip #41: Identify Function Call Parameters</li> <li>Go Tip #44: Improving Time Testability with Struct Fields</li> <li>Go Tip #80: Dependency Injection Principles</li> </ul> <p>APIs that do not support explicit dependency passing become fragile as the number of clients increases:</p> <pre><code>// Bad:\npackage sidecar\n\nvar registry = make(map[string]*Plugin)\n\nfunc Register(name string, p *Plugin) error { /* registers plugin in registry */ }\n</code></pre> <p>Consider what happens in the case of tests exercising code that transitively relies on a sidecar for cloud logging.</p> <pre><code>// Bad:\npackage app\n\nimport (\n  \"cloudlogger\"\n  \"sidecar\"\n  \"testing\"\n)\n\nfunc TestEndToEnd(t *testing.T) {\n  // The system under test (SUT) relies on a sidecar for a production cloud\n  // logger already being registered.\n  ... // Exercise SUT and check invariants.\n}\n\nfunc TestRegression_NetworkUnavailability(t *testing.T) {\n  // We had an outage because of a network partition that rendered the cloud\n  // logger inoperative, so we added a regression test to exercise the SUT with\n  // a test double that simulates network unavailability with the logger.\n  sidecar.Register(\"cloudlogger\", cloudloggertest.UnavailableLogger)\n  ... // Exercise SUT and check invariants.\n}\n\nfunc TestRegression_InvalidUser(t *testing.T) {\n  // The system under test (SUT) relies on a sidecar for a production cloud\n  // logger already being registered.\n  //\n  // Oops. cloudloggertest.UnavailableLogger is still registered from the\n  // previous test.\n  ... // Exercise SUT and check invariants.\n}\n</code></pre> <p>Go tests are executed sequentially by default, so the tests above run as:</p> <ol> <li><code>TestEndToEnd</code></li> <li><code>TestRegression_NetworkUnavailability</code>, which overrides the default value of     cloudlogger</li> <li><code>TestRegression_InvalidUser</code>, which requires the default value of     cloudlogger registered in <code>package sidecar</code></li> </ol> <p>This creates an order-dependent test case, which breaks running with test filters, and prevents tests from running in parallel or being sharded.</p> <p>Using global state poses problems that lack easy answers for you and the API\u2019s clients:</p> <ul> <li> <p>What happens if a client needs to use different and separately operating     sets of <code>Plugin</code>s (for example, to support multiple servers) in the same     process space?</p> </li> <li> <p>What happens if a client wants to replace a registered <code>Plugin</code> with an     alternative implementation in a test, like a test double?</p> <p>What happens if a client\u2019s tests require hermeticity between instances of a <code>Plugin</code>, or between all of the plugins registered?</p> </li> <li> <p>What happens if multiple clients <code>Register</code> a <code>Plugin</code> under the same name?     Which one wins, if any?</p> <p>How should errors be handled? If the code panics or calls <code>log.Fatal</code>, will that always be appropriate for all places in which API would be called? Can a client verify it doesn\u2019t do something bad before doing so?</p> </li> <li> <p>Are there certain stages in a program\u2019s startup phases or lifetime during     which <code>Register</code> can be called and when it can\u2019t?</p> <p>What happens if <code>Register</code> is called at the wrong time? A client could call <code>Register</code> in <code>func init</code>, before flags are parsed, or after <code>main</code>. The stage at which a function is called affects error handling. If the author of an API assumes the API is only called during program initialization without the requirement that it is, the assumption may nudge the author to design error handling to abort the program by modeling the API as a <code>Must</code>-like function. Aborting is not appropriate for general-purpose library functions that can be used at any stage.</p> </li> <li> <p>What if the client\u2019s and the designer\u2019s concurrency needs are mismatched?</p> </li> </ul> <p>See also:</p> <ul> <li>Go Tip #36: Enclosing Package-Level State</li> <li>Go Tip #71: Reducing Parallel Test Flakiness</li> <li>Go Tip #80: Dependency Injection Principles</li> <li>Error Handling:     Look Before You Leap     versus     Easier to Ask for Forgiveness than Permission</li> <li>Unit Testing Practices on Public APIs</li> </ul> <p>Global state has cascading effects on the health of the Google codebase. Global state should be approached with extreme scrutiny.</p> <p>Global state comes in several forms, and you can use a few litmus tests to identify when it is safe.</p> <p></p>"},{"location":"knowledge/programming_languages/go/go_style/best-practices/#major-forms-of-package-state-apis","title":"Major forms of package state APIs","text":"<p>Several of the most common problematic API forms are enumerated below:</p> <ul> <li> <p>Top-level variables irrespective of whether they are exported.</p> <p>```go // Bad: package logger</p> <p>// Sinks manages the default output sources for this package\u2019s logging API.  This // variable should be set at package initialization time and never thereafter. var Sinks []Sink ```</p> <p>See the litmus tests to know when these are safe.</p> </li> <li> <p>The     service locator pattern.     See the first example. The service locator pattern itself is not     problematic, rather the locator being defined as global.</p> </li> <li> <p>Registries for     callbacks     and similar behaviors.</p> <p>```go // Bad: package health</p> <p>var unhealthyFuncs []func</p> <p>func OnUnhealthy(f func()) {   unhealthyFuncs = append(unhealthyFuncs, f) } ```</p> </li> <li> <p>Thick-Client singletons for things like backends, storage, data access     layers, and other system resources. These often pose additional problems     with service reliability.</p> <p>```go // Bad: package useradmin</p> <p>var client pb.UserAdminServiceClientInterface</p> <p>func Client() *pb.UserAdminServiceClient {     if client == nil {         client = \u2026  // Set up client.     }     return client } ```</p> </li> </ul> <p>Note: Many legacy APIs in the Google codebase do not follow this guidance; in fact, some Go standard libraries allow for configuration via global values. Nevertheless, the legacy API\u2019s contravention of this guidance should not be used as precedent for continuing the pattern.</p> <p>It is better to invest in proper API design today than pay for redesigning later.</p> <p></p>"},{"location":"knowledge/programming_languages/go/go_style/best-practices/#litmus-tests","title":"Litmus tests","text":"<p>APIs using the patterns above are unsafe when:</p> <ul> <li>Multiple functions interact via global state when executed in the same     program, despite being otherwise independent (for example, authored by     different authors in vastly different directories).</li> <li>Independent test cases interact with each other through global state.</li> <li>Users of the API are tempted to swap or replace global state for testing     purposes, particularly to replace any part of the state with a     test double, like a stub, fake, spy, or mock.</li> <li>Users have to consider special ordering requirements when interacting with     global state: <code>func init</code>, whether flags are parsed yet, etc.</li> </ul> <p>Provided the conditions above are avoided, there are a few limited circumstances under which these APIs are safe, namely when any of the following is true:</p> <ul> <li>The global state is logically constant     (example).</li> <li>The package\u2019s observable behavior is stateless. For example, a public     function may use a private global variable as a cache, but so long as the     caller can\u2019t distinguish cache hits from misses, the function is stateless.</li> <li>The global state does not bleed into things that are external to the     program, like sidecar processes or files on a shared filesystem.</li> <li>There is no expectation of predictable behavior     (example).</li> </ul> <p>Note: Sidecar processes may not strictly be process-local. They can and often are shared with more than one application process. Moreover, these sidecars often interact with external distributed systems.</p> <p>Further, the same stateless, idempotent, and local rules in addition to the base considerations above would apply to the code of the sidecar process itself!</p> <p>An example of one of these safe situations is <code>package image</code> with its <code>image.RegisterFormat</code> function. Consider the litmus tests from above applied to a typical decoder, like the one for handling the PNG format:</p> <ul> <li>Multiple calls to <code>package image</code>\u2019s APIs that use the registered decoders     (for example, <code>image.Decode</code>) cannot interfere with one another, similarly     for tests. The only exception is <code>image.RegisterFormat</code>, but that is     mitigated by the points below.</li> <li>It is extremely unlikely that a user would want to replace a decoder with a     test double, as the PNG decoder exemplifies a case in which our codebase\u2019s     preference for real objects applies. However, a user would be more likely to     replace a decoder with a test double if the decoder statefully interacted     with operating system resources (for example, the network).</li> <li>Collisions in registration are conceivable, though they are probably rare in     practice.</li> <li>The decoders are stateless, idempotent, and pure.</li> </ul> <p></p>"},{"location":"knowledge/programming_languages/go/go_style/best-practices/#providing-a-default-instance","title":"Providing a default instance","text":"<p>While not recommended, it is acceptable to provide a simplified API that uses package level state if you need to maximize convenience for the user.</p> <p>Follow the litmus tests with these guidelines in such cases:</p> <ol> <li>The package must offer clients the ability to create isolated instances of     package types as described above.</li> <li>The public APIs that use global state must be a thin proxy to the previous     API. A good example of this is     <code>http.Handle</code> internally calling     <code>(*http.ServeMux).Handle</code> on     the package variable     <code>http.DefaultServeMux</code>.</li> <li> <p>This package-level API must only be used by binary build targets, not     libraries, unless the libraries are undertaking a refactoring to support     dependency passing. Infrastructure libraries that can be imported by other     packages must not rely on package-level state of the packages they import.</p> <p>For example, an infrastructure provider implementing a sidecar that is to be shared with other teams using the API from the top should offer an API to accommodate this:</p> <p>```go // Good: package cloudlogger</p> <p>func New() *Logger { \u2026 }</p> <p>func Register(r sidecar.Registry, l Logger) {   r.Register(\u201cCloud Logging\u201d, l) } ```</p> </li> <li> <p>This package-level API must document and     enforce its invariants (for example, at which stage in the program\u2019s life it     can be called, whether it can be used concurrently). Further, it must     provide an API to reset global state to a known-good default (for example,     to facilitate testing).</p> </li> </ol> <p>See also:</p> <ul> <li>Go Tip #36: Enclosing Package-Level State</li> <li>Go Tip #80: Dependency Injection Principles</li> </ul>"},{"location":"knowledge/programming_languages/go/go_style/decisions/","title":"Decisions","text":""},{"location":"knowledge/programming_languages/go/go_style/decisions/#go-style-decisions","title":"Go Style Decisions","text":"<p>https://google.github.io/styleguide/go/decisions</p> <p>Overview | Guide | Decisions | Best practices</p> <p>{% raw %}</p> <p>Note: This is part of a series of documents that outline Go Style at Google. This document is normative but not canonical, and is subordinate to the core style guide. See the overview for more information.</p> <p></p>"},{"location":"knowledge/programming_languages/go/go_style/decisions/#about","title":"About","text":"<p>This document contains style decisions intended to unify and provide standard guidance, explanations, and examples for the advice given by the Go readability mentors.</p> <p>This document is not exhaustive and will grow over time. In cases where the core style guide contradicts the advice given here, the style guide takes precedence, and this document should be updated accordingly.</p> <p>See the Overview for the full set of Go Style documents.</p> <p>The following sections have moved from style decisions to another part of the guide:</p> <ul> <li> <p>MixedCaps: see guide#mixed-caps </p> </li> <li> <p>Formatting: see guide#formatting </p> </li> <li> <p>Line Length: see guide#line-length </p> </li> </ul> <p></p>"},{"location":"knowledge/programming_languages/go/go_style/decisions/#naming","title":"Naming","text":"<p>See the naming section within the core style guide for overarching guidance on naming. The following sections provide further clarification on specific areas within naming.</p> <p></p>"},{"location":"knowledge/programming_languages/go/go_style/decisions/#underscores","title":"Underscores","text":"<p>Names in Go should in general not contain underscores. There are three exceptions to this principle:</p> <ol> <li>Package names that are only imported by generated code may contain     underscores. See package names for more detail around how     to choose multi-word package names.</li> <li>Test, Benchmark and Example function names within <code>*_test.go</code> files may     include underscores.</li> <li>Low-level libraries that interoperate with the operating system or cgo may     reuse identifiers, as is done in [<code>syscall</code>]. This is expected to be very     rare in most codebases.</li> </ol> <p></p>"},{"location":"knowledge/programming_languages/go/go_style/decisions/#package-names","title":"Package names","text":"<p>Go package names should be short and contain only lowercase letters. A package name composed of multiple words should be left unbroken in all lowercase. For example, the package [<code>tabwriter</code>] is not named <code>tabWriter</code>, <code>TabWriter</code>, or <code>tab_writer</code>.</p> <p>Avoid selecting package names that are likely to be shadowed by commonly used local variable names. For example, <code>usercount</code> is a better package name than <code>count</code>, since <code>count</code> is a commonly used variable name.</p> <p>Go package names should not have underscores. If you need to import a package that does have one in its name (usually from generated or third party code), it must be renamed at import time to a name that is suitable for use in Go code.</p> <p>An exception to this is that package names that are only imported by generated code may contain underscores. Specific examples include:</p> <ul> <li> <p>Using the <code>_test</code> suffix for an external test package, for example an     integration test</p> </li> <li> <p>Using the <code>_test</code> suffix for     package-level documentation examples</p> </li> </ul> <p>Avoid uninformative package names like <code>util</code>, <code>utility</code>, <code>common</code>, <code>helper</code>, and so on. See more about so-called \u201cutility packages\u201d.</p> <p>When an imported package is renamed (e.g. <code>import foopb \"path/to/foo_go_proto\"</code>), the local name for the package must comply with the rules above, as the local name dictates how the symbols in the package are referenced in the file. If a given import is renamed in multiple files, particularly in the same or nearby packages, the same local name should be used wherever possible for consistency.</p> <p>See also: Go blog post about package names.</p> <p></p>"},{"location":"knowledge/programming_languages/go/go_style/decisions/#receiver-names","title":"Receiver names","text":"<p>Receiver variable names must be:</p> <ul> <li>Short (usually one or two letters in length)</li> <li>Abbreviations for the type itself</li> <li>Applied consistently to every receiver for that type</li> </ul> Long Name Better Name <code>func (tray Tray)</code> <code>func (t Tray)</code> <code>func (info *ResearchInfo)</code> <code>func (ri *ResearchInfo)</code> <code>func (this *ReportWriter)</code> <code>func (w *ReportWriter)</code> <code>func (self *Scanner)</code> <code>func (s *Scanner)</code> <p></p>"},{"location":"knowledge/programming_languages/go/go_style/decisions/#constant-names","title":"Constant names","text":"<p>Constant names must use MixedCaps like all other names in Go. (Exported constants start with uppercase, while unexported constants start with lowercase.) This applies even when it breaks conventions in other languages. Constant names should not be a derivative of their values and should instead explain what the value denotes.</p> <pre><code>// Good:\nconst MaxPacketSize = 512\n\nconst (\n    ExecuteBit = 1 &lt;&lt; iota\n    WriteBit\n    ReadBit\n)\n</code></pre> <p>Do not use non-MixedCaps constant names or constants with a <code>K</code> prefix.</p> <pre><code>// Bad:\nconst MAX_PACKET_SIZE = 512\nconst kMaxBufferSize = 1024\nconst KMaxUsersPergroup = 500\n</code></pre> <p>Name constants based on their role, not their values. If a constant does not have a role apart from its value, then it is unnecessary to define it as a constant.</p> <pre><code>// Bad:\nconst Twelve = 12\n\nconst (\n    UserNameColumn = \"username\"\n    GroupColumn    = \"group\"\n)\n</code></pre> <p></p>"},{"location":"knowledge/programming_languages/go/go_style/decisions/#initialisms","title":"Initialisms","text":"<p>Words in names that are initialisms or acronyms (e.g., <code>URL</code> and <code>NATO</code>) should have the same case. <code>URL</code> should appear as <code>URL</code> or <code>url</code> (as in <code>urlPony</code>, or <code>URLPony</code>), never as <code>Url</code>. This also applies to <code>ID</code> when it is short for \u201cidentifier\u201d; write <code>appID</code> instead of <code>appId</code>.</p> <ul> <li>In names with multiple initialisms (e.g. <code>XMLAPI</code> because it contains <code>XML</code>     and <code>API</code>), each letter within a given initialism should have the same case,     but each initialism in the name does not need to have the same case.</li> <li>In names with an initialism containing a lowercase letter (e.g. <code>DDoS</code>,     <code>iOS</code>, <code>gRPC</code>), the initialism should appear as it would in standard prose,     unless you need to change the first letter for the sake of exportedness.     In these cases, the entire initialism should be the same case (e.g. <code>ddos</code>,     <code>IOS</code>, <code>GRPC</code>).</li> </ul> Initialism(s) Scope Correct Incorrect XML API Exported <code>XMLAPI</code> <code>XmlApi</code>, <code>XMLApi</code>, <code>XmlAPI</code>, <code>XMLapi</code> XML API Unexported <code>xmlAPI</code> <code>xmlapi</code>, <code>xmlApi</code> iOS Exported <code>IOS</code> <code>Ios</code>, <code>IoS</code> iOS Unexported <code>iOS</code> <code>ios</code> gRPC Exported <code>GRPC</code> <code>Grpc</code> gRPC Unexported <code>gRPC</code> <code>grpc</code> DDoS Exported <code>DDoS</code> <code>DDOS</code>, <code>Ddos</code> DDoS Unexported <code>ddos</code> <code>dDoS</code>, <code>dDOS</code> <p></p>"},{"location":"knowledge/programming_languages/go/go_style/decisions/#getters","title":"Getters","text":"<p>Function and method names should not use a <code>Get</code> or <code>get</code> prefix, unless the underlying concept uses the word \u201cget\u201d (e.g. an HTTP GET). Prefer starting the name with the noun directly, for example use <code>Counts</code> over <code>GetCounts</code>.</p> <p>If the function involves performing a complex computation or executing a remote call, a different word like <code>Compute</code> or <code>Fetch</code> can be used in place of <code>Get</code>, to make it clear to a reader that the function call may take time and could block or fail.</p> <p></p>"},{"location":"knowledge/programming_languages/go/go_style/decisions/#variable-names","title":"Variable names","text":"<p>The general rule of thumb is that the length of a name should be proportional to the size of its scope and inversely proportional to the number of times that it is used within that scope. A variable created at file scope may require multiple words, whereas a variable scoped to a single inner block may be a single word or even just a character or two, to keep the code clear and avoid extraneous information.</p> <p>Here is a rough baseline. These numeric guidelines are not strict rules. Apply judgement based on context, clarity, and concision.</p> <ul> <li>A small scope is one in which one or two small operations are performed, say     1-7 lines.</li> <li>A medium scope is a few small or one large operation, say 8-15 lines.</li> <li>A large scope is one or a few large operations, say 15-25 lines.</li> <li>A very large scope is anything that spans more than a page (say, more than     25 lines).</li> </ul> <p>A name that might be perfectly clear (e.g., <code>c</code> for a counter) within a small scope could be insufficient in a larger scope and would require clarification to remind the reader of its purpose further along in the code. A scope in which there are many variables, or variables that represent similar values or concepts, may necessitate longer variable names than the scope suggests.</p> <p>The specificity of the concept can also help to keep a variable\u2019s name concise. For example, assuming there is only a single database in use, a short variable name like <code>db</code> that might normally be reserved for very small scopes may remain perfectly clear even if the scope is very large. In this case, a single word <code>database</code> is likely acceptable based on the size of the scope, but is not required as <code>db</code> is a very common shortening for the word with few alternate interpretations.</p> <p>The name of a local variable should reflect what it contains and how it is being used in the current context, rather than where the value originated. For example, it is often the case that the best local variable name is not the same as the struct or protocol buffer field name.</p> <p>In general:</p> <ul> <li>Single-word names like <code>count</code> or <code>options</code> are a good starting point.</li> <li>Additional words can be added to disambiguate similar names, for example     <code>userCount</code> and <code>projectCount</code>.</li> <li>Do not simply drop letters to save typing. For example <code>Sandbox</code> is     preferred over <code>Sbx</code>, particularly for exported names.</li> <li>Omit types and type-like words from most variable names.<ul> <li>For a number, <code>userCount</code> is a better name than <code>numUsers</code> or     <code>usersInt</code>.</li> <li>For a slice, <code>users</code> is a better name than <code>userSlice</code>.</li> <li>It is acceptable to include a type-like qualifier if there are two     versions of a value in scope, for example you might have an input stored     in <code>ageString</code> and use <code>age</code> for the parsed value.</li> </ul> </li> <li>Omit words that are clear from the surrounding context. For example, in     the implementation of a <code>UserCount</code> method, a local variable called     <code>userCount</code> is probably redundant; <code>count</code>, <code>users</code>, or even <code>c</code> are just as     readable.</li> </ul> <p></p>"},{"location":"knowledge/programming_languages/go/go_style/decisions/#single-letter-variable-names","title":"Single-letter variable names","text":"<p>Single-letter variable names can be a useful tool to minimize repetition, but can also make code needlessly opaque. Limit their use to instances where the full word is obvious and where it would be repetitive for it to appear in place of the single-letter variable.</p> <p>In general:</p> <ul> <li>For a method receiver variable, a one-letter or two-letter name is     preferred.</li> <li>Using familiar variable names for common types is often helpful:<ul> <li><code>r</code> for an <code>io.Reader</code> or <code>*http.Request</code></li> <li><code>w</code> for an <code>io.Writer</code> or <code>http.ResponseWriter</code></li> </ul> </li> <li>Single-letter identifiers are acceptable as integer loop variables,     particularly for indices (e.g., <code>i</code>) and coordinates (e.g., <code>x</code> and <code>y</code>).</li> <li>Abbreviations can be acceptable loop identifiers when the scope is short,     for example <code>for _, n := range nodes { ... }</code>.</li> </ul> <p></p>"},{"location":"knowledge/programming_languages/go/go_style/decisions/#repetition","title":"Repetition","text":"<p>A piece of Go source code should avoid unnecessary repetition. One common source of this is repetitive names, which often include unnecessary words or repeat their context or type. Code itself can also be unnecessarily repetitive if the same or a similar code segment appears multiple times in close proximity.</p> <p>Repetitive naming can come in many forms, including:</p> <p></p>"},{"location":"knowledge/programming_languages/go/go_style/decisions/#package-vs-exported-symbol-name","title":"Package vs. exported symbol name","text":"<p>When naming exported symbols, the name of the package is always visible outside your package, so redundant information between the two should be reduced or eliminated. If a package exports only one type and it is named after the package itself, the canonical name for the constructor is <code>New</code> if one is required.</p> <p>Examples: Repetitive Name -&gt; Better Name</p> <ul> <li><code>widget.NewWidget</code> -&gt; <code>widget.New</code></li> <li><code>widget.NewWidgetWithName</code> -&gt; <code>widget.NewWithName</code></li> <li><code>db.LoadFromDatabase</code> -&gt; <code>db.Load</code></li> <li><code>goatteleportutil.CountGoatsTeleported</code> -&gt; <code>gtutil.CountGoatsTeleported</code>     or <code>goatteleport.Count</code></li> <li><code>myteampb.MyTeamMethodRequest</code> -&gt; <code>mtpb.MyTeamMethodRequest</code> or     <code>myteampb.MethodRequest</code></li> </ul> <p></p>"},{"location":"knowledge/programming_languages/go/go_style/decisions/#variable-name-vs-type","title":"Variable name vs. type","text":"<p>The compiler always knows the type of a variable, and in most cases it is also clear to the reader what type a variable is by how it is used. It is only necessary to clarify the type of a variable if its value appears twice in the same scope.</p> Repetitive Name Better Name <code>var numUsers int</code> <code>var users int</code> <code>var nameString string</code> <code>var name string</code> <code>var primaryProject *Project</code> <code>var primary *Project</code> <p>If the value appears in multiple forms, this can be clarified either with an extra word like <code>raw</code> and <code>parsed</code> or with the underlying representation:</p> <pre><code>// Good:\nlimitStr := r.FormValue(\"limit\")\nlimit, err := strconv.Atoi(limitStr)\n</code></pre> <pre><code>// Good:\nlimitRaw := r.FormValue(\"limit\")\nlimit, err := strconv.Atoi(limitRaw)\n</code></pre> <p></p>"},{"location":"knowledge/programming_languages/go/go_style/decisions/#external-context-vs-local-names","title":"External context vs. local names","text":"<p>Names that include information from their surrounding context often create extra noise without benefit. The package name, method name, type name, function name, import path, and even filename can all provide context that automatically qualifies all names within.</p> <pre><code>// Bad:\n// In package \"ads/targeting/revenue/reporting\"\ntype AdsTargetingRevenueReport struct{}\n\nfunc (p *Project) ProjectName() string\n</code></pre> <pre><code>// Good:\n// In package \"ads/targeting/revenue/reporting\"\ntype Report struct{}\n\nfunc (p *Project) Name() string\n</code></pre> <pre><code>// Bad:\n// In package \"sqldb\"\ntype DBConnection struct{}\n</code></pre> <pre><code>// Good:\n// In package \"sqldb\"\ntype Connection struct{}\n</code></pre> <pre><code>// Bad:\n// In package \"ads/targeting\"\nfunc Process(in *pb.FooProto) *Report {\n    adsTargetingID := in.GetAdsTargetingID()\n}\n</code></pre> <pre><code>// Good:\n// In package \"ads/targeting\"\nfunc Process(in *pb.FooProto) *Report {\n    id := in.GetAdsTargetingID()\n}\n</code></pre> <p>Repetition should generally be evaluated in the context of the user of the symbol, rather than in isolation. For example, the following code has lots of names that may be fine in some circumstances, but redundant in context:</p> <pre><code>// Bad:\nfunc (db *DB) UserCount() (userCount int, err error) {\n    var userCountInt64 int64\n    if dbLoadError := db.LoadFromDatabase(\"count(distinct users)\", &amp;userCountInt64); dbLoadError != nil {\n        return 0, fmt.Errorf(\"failed to load user count: %s\", dbLoadError)\n    }\n    userCount = int(userCountInt64)\n    return userCount, nil\n}\n</code></pre> <p>Instead, information about names that are clear from context or usage can often be omitted:</p> <pre><code>// Good:\nfunc (db *DB) UserCount() (int, error) {\n    var count int64\n    if err := db.Load(\"count(distinct users)\", &amp;count); err != nil {\n        return 0, fmt.Errorf(\"failed to load user count: %s\", err)\n    }\n    return int(count), nil\n}\n</code></pre> <p></p>"},{"location":"knowledge/programming_languages/go/go_style/decisions/#commentary","title":"Commentary","text":"<p>The conventions around commentary (which include what to comment, what style to use, how to provide runnable examples, etc.) are intended to support the experience of reading the documentation of a public API. See Effective Go for more information.</p> <p>The best practices document\u2019s section on documentation conventions discusses this further.</p> <p>Best Practice: Use doc preview during development and code review to see whether the documentation and runnable examples are useful and are presented the way you expect them to be.</p> <p>Tip: Godoc uses very little special formatting; lists and code snippets should usually be indented to avoid linewrapping. Apart from indentation, decoration should generally be avoided.</p> <p></p>"},{"location":"knowledge/programming_languages/go/go_style/decisions/#comment-line-length","title":"Comment line length","text":"<p>Ensure that commentary is readable from source even on narrow screens.</p> <p>When a comment gets too long, it is recommended to wrap it into multiple single-line comments. When possible, aim for comments that will read well on an 80-column wide terminal, however this is not a hard cut-off; there is no fixed line length limit for comments in Go. The standard library, for example, often chooses to break a comment based on punctuation, which sometimes leaves the individual lines closer to the 60-70 character mark.</p> <p>There is plenty of existing code in which comments exceed 80 characters in length. This guidance should not be used as a justification to change such code as part of a readability review (see consistency), though teams are encouraged to opportunistically update comments to follow this guideline as a part of other refactors. The primary goal of this guideline is to ensure that all Go readability mentors make the same recommendation when and if recommendations are made.</p> <p>See this post from The Go Blog on documentation for more on commentary.</p> <pre><code># Good:\n// This is a comment paragraph.\n// The length of individual lines doesn't matter in Godoc;\n// but the choice of wrapping makes it easy to read on narrow screens.\n//\n// Don't worry too much about the long URL:\n// https://supercalifragilisticexpialidocious.example.com:8080/Animalia/Chordata/Mammalia/Rodentia/Geomyoidea/Geomyidae/\n//\n// Similarly, if you have other information that is made awkward\n// by too many line breaks, use your judgment and include a long line\n// if it helps rather than hinders.\n</code></pre> <p>Avoid comments that will wrap repeatedly on small screens, which is a poor reader experience.</p> <pre><code># Bad:\n// This is a comment paragraph. The length of individual lines doesn't matter in\nGodoc;\n// but the choice of wrapping causes jagged lines on narrow screens or in code\nreview,\n// which can be annoying, especially when in a comment block that will wrap\nrepeatedly.\n//\n// Don't worry too much about the long URL:\n// https://supercalifragilisticexpialidocious.example.com:8080/Animalia/Chordata/Mammalia/Rodentia/Geomyoidea/Geomyidae/\n</code></pre> <p></p>"},{"location":"knowledge/programming_languages/go/go_style/decisions/#doc-comments","title":"Doc comments","text":"<p>All top-level exported names must have doc comments, as should unexported type or function declarations with unobvious behavior or meaning. These comments should be full sentences that begin with the name of the object being described. An article (\u201ca\u201d, \u201can\u201d, \u201cthe\u201d) can precede the name to make it read more naturally.</p> <pre><code>// Good:\n// A Request represents a request to run a command.\ntype Request struct { ...\n\n// Encode writes the JSON encoding of req to w.\nfunc Encode(w io.Writer, req *Request) { ...\n</code></pre> <p>Doc comments appear in Godoc and are surfaced by IDEs, and therefore should be written for anyone using the package.</p> <p>A documentation comment applies to the following symbol, or the group of fields if it appears in a struct.</p> <pre><code>// Good:\n// Options configure the group management service.\ntype Options struct {\n    // General setup:\n    Name  string\n    Group *FooGroup\n\n    // Dependencies:\n    DB *sql.DB\n\n    // Customization:\n    LargeGroupThreshold int // optional; default: 10\n    MinimumMembers      int // optional; default: 2\n}\n</code></pre> <p>Best Practice: If you have doc comments for unexported code, follow the same custom as if it were exported (namely, starting the comment with the unexported name). This makes it easy to export it later by simply replacing the unexported name with the newly-exported one across both comments and code.</p> <p></p>"},{"location":"knowledge/programming_languages/go/go_style/decisions/#comment-sentences","title":"Comment sentences","text":"<p>Comments that are complete sentences should be capitalized and punctuated like standard English sentences. (As an exception, it is okay to begin a sentence with an uncapitalized identifier name if it is otherwise clear. Such cases are probably best done only at the beginning of a paragraph.)</p> <p>Comments that are sentence fragments have no such requirements for punctuation or capitalization.</p> <p>Documentation comments should always be complete sentences, and as such should always be capitalized and punctuated. Simple end-of-line comments (especially for struct fields) can be simple phrases that assume the field name is the subject.</p> <pre><code>// Good:\n// A Server handles serving quotes from the collected works of Shakespeare.\ntype Server struct {\n    // BaseDir points to the base directory under which Shakespeare's works are stored.\n    //\n    // The directory structure is expected to be the following:\n    //   {BaseDir}/manifest.json\n    //   {BaseDir}/{name}/{name}-part{number}.txt\n    BaseDir string\n\n    WelcomeMessage  string // displayed when user logs in\n    ProtocolVersion string // checked against incoming requests\n    PageLength      int    // lines per page when printing (optional; default: 20)\n}\n</code></pre> <p></p>"},{"location":"knowledge/programming_languages/go/go_style/decisions/#examples","title":"Examples","text":"<p>Packages should clearly document their intended usage. Try to provide a runnable example; examples show up in Godoc. Runnable examples belong in the test file, not the production source file. See this example (Godoc, source).</p> <p>If it isn\u2019t feasible to provide a runnable example, example code can be provided within code comments. As with other code and command-line snippets in comments, it should follow standard formatting conventions.</p> <p></p>"},{"location":"knowledge/programming_languages/go/go_style/decisions/#named-result-parameters","title":"Named result parameters","text":"<p>When naming parameters, consider how function signatures appear in Godoc. The name of the function itself and the type of the result parameters are often sufficiently clear.</p> <pre><code>// Good:\nfunc (n *Node) Parent1() *Node\nfunc (n *Node) Parent2() (*Node, error)\n</code></pre> <p>If a function returns two or more parameters of the same type, adding names can be useful.</p> <pre><code>// Good:\nfunc (n *Node) Children() (left, right *Node, err error)\n</code></pre> <p>If the caller must take action on particular result parameters, naming them can help suggest what the action is:</p> <pre><code>// Good:\n// WithTimeout returns a context that will be canceled no later than d duration\n// from now.\n//\n// The caller must arrange for the returned cancel function to be called when\n// the context is no longer needed to prevent a resource leak.\nfunc WithTimeout(parent Context, d time.Duration) (ctx Context, cancel func())\n</code></pre> <p>In the code above, cancellation is a particular action a caller must take. However, were the result parameters written as <code>(Context, func())</code> alone, it would be unclear what is meant by \u201ccancel function\u201d.</p> <p>Don\u2019t use named result parameters when the names produce unnecessary repetition.</p> <pre><code>// Bad:\nfunc (n *Node) Parent1() (node *Node)\nfunc (n *Node) Parent2() (node *Node, err error)\n</code></pre> <p>Don\u2019t name result parameters in order to avoid declaring a variable inside the function. This practice results in unnecessary API verbosity at the cost of minor implementation brevity.</p> <p>Naked returns are acceptable only in a small function. Once it\u2019s a medium-sized function, be explicit with your returned values. Similarly, do not name result parameters just because it enables you to use naked returns. Clarity is always more important than saving a few lines in your function.</p> <p>It is always acceptable to name a result parameter if its value must be changed in a deferred closure.</p> <p>Tip: Types can often be clearer than names in function signatures. GoTip #38: Functions as Named Types demonstrates this.</p> <p>In, [<code>WithTimeout</code>] above, the real code uses a [<code>CancelFunc</code>] instead of a raw <code>func()</code> in the result parameter list and requires little effort to document.</p> <p></p>"},{"location":"knowledge/programming_languages/go/go_style/decisions/#package-comments","title":"Package comments","text":"<p>Package comments must appear immediately above the package clause with no blank line between the comment and the package name. Example:</p> <pre><code>// Good:\n// Package math provides basic constants and mathematical functions.\n//\n// This package does not guarantee bit-identical results across architectures.\npackage math\n</code></pre> <p>There must be a single package comment per package. If a package is composed of multiple files, exactly one of the files should have a package comment.</p> <p>Comments for <code>main</code> packages have a slightly different form, where the name of the <code>go_binary</code> rule in the BUILD file takes the place of the package name.</p> <pre><code>// Good:\n// The seed_generator command is a utility that generates a Finch seed file\n// from a set of JSON study configs.\npackage main\n</code></pre> <p>Other styles of comment are fine as long as the name of the binary is exactly as written in the BUILD file. When the binary name is the first word, capitalizing it is required even though it does not strictly match the spelling of the command-line invocation.</p> <pre><code>// Good:\n// Binary seed_generator ...\n// Command seed_generator ...\n// Program seed_generator ...\n// The seed_generator command ...\n// The seed_generator program ...\n// Seed_generator ...\n</code></pre> <p>Tips:</p> <ul> <li> <p>Example command-line invocations and API usage can be useful documentation.     For Godoc formatting, indent the comment lines containing code.</p> </li> <li> <p>If there is no obvious primary file or if the package comment is     extraordinarily long, it is acceptable to put the doc comment in a file     named <code>doc.go</code> with only the comment and the package clause.</p> </li> <li> <p>Multiline comments can be used instead of multiple single-line comments.     This is primarily useful if the documentation contains sections which may be     useful to copy and paste from the source file, as with sample command-lines     (for binaries) and template examples.</p> <p>```go // Good: /* The seed_generator command is a utility that generates a Finch seed file from a set of JSON study configs.</p> <pre><code>seed_generator *.json | base64 &gt; finch-seed.base64\n</code></pre> <p>*/ package template ```</p> </li> <li> <p>Comments intended for maintainers and that apply to the whole file are     typically placed after import declarations. These are not surfaced in Godoc     and are not subject to the rules above on package comments.</p> </li> </ul> <p></p>"},{"location":"knowledge/programming_languages/go/go_style/decisions/#imports","title":"Imports","text":""},{"location":"knowledge/programming_languages/go/go_style/decisions/#import-renaming","title":"Import renaming","text":"<p>Imports should only be renamed to avoid a name collision with other imports. (A corollary of this is that good package names should not require renaming.) In the event of a name collision, prefer to rename the most local or project-specific import. Local names (aliases) for packages must follow the guidance around package naming, including the prohibition on the use of underscores and capital letters.</p> <p>Generated protocol buffer packages must be renamed to remove underscores from their names, and their aliases must have a <code>pb</code> suffix. See proto and stub best practices for more information.</p> <pre><code>// Good:\nimport (\n    fspb \"path/to/package/foo_service_go_proto\"\n)\n</code></pre> <p>Imports that have package names with no useful identifying information (e.g. <code>package v1</code>) should be renamed to include the previous path component. The rename must be consistent with other local files importing the same package and may include the version number.</p> <p>Note: It is preferred to rename the package to conform with good package names, but that is often not feasible for packages in vendored directories.</p> <pre><code>// Good:\nimport (\n    core \"github.com/kubernetes/api/core/v1\"\n    meta \"github.com/kubernetes/apimachinery/pkg/apis/meta/v1beta1\"\n)\n</code></pre> <p>If you need to import a package whose name collides with a common local variable name that you want to use (e.g. <code>url</code>, <code>ssh</code>) and you wish to rename the package, the preferred way to do so is with the <code>pkg</code> suffix (e.g. <code>urlpkg</code>). Note that it is possible to shadow a package with a local variable; this rename is only necessary if the package still needs to be used when such a variable is in scope.</p> <p></p>"},{"location":"knowledge/programming_languages/go/go_style/decisions/#import-grouping","title":"Import grouping","text":"<p>Imports should be organized in two groups:</p> <ul> <li> <p>Standard library packages</p> </li> <li> <p>Other (project and vendored) packages</p> </li> </ul> <pre><code>// Good:\npackage main\n\nimport (\n    \"fmt\"\n    \"hash/adler32\"\n    \"os\"\n\n    \"github.com/dsnet/compress/flate\"\n    \"golang.org/x/text/encoding\"\n    \"google.golang.org/protobuf/proto\"\n    foopb \"myproj/foo/proto/proto\"\n    _ \"myproj/rpc/protocols/dial\"\n    _ \"myproj/security/auth/authhooks\"\n)\n</code></pre> <p>It is acceptable to split the project packages into multiple groups, for example if you want a separate group for renamed, imported-only-for-side-effects or another special group of imports.</p> <pre><code>// Good:\npackage main\n\nimport (\n    \"fmt\"\n    \"hash/adler32\"\n    \"os\"\n\n\n    \"github.com/dsnet/compress/flate\"\n    \"golang.org/x/text/encoding\"\n    \"google.golang.org/protobuf/proto\"\n\n    foopb \"myproj/foo/proto/proto\"\n\n    _ \"myproj/rpc/protocols/dial\"\n    _ \"myproj/security/auth/authhooks\"\n)\n</code></pre> <p>Note: Maintaining optional groups - splitting beyond what is necessary for the mandatory separation between standard library and Google imports - is not supported by the goimports tool. Additional import subgroups require attention on the part of both authors and reviewers to maintain in a conforming state.</p> <p>Google programs that are also AppEngine apps should have a separate group for AppEngine imports.</p> <p>Gofmt takes care of sorting each group by import path. However, it does not automatically separate imports into groups. The popular goimports tool combines Gofmt and import management, separating imports into groups based on the decision above. It is permissible to let goimports manage import arrangement entirely, but as a file is revised its import list must remain internally consistent.</p> <p></p>"},{"location":"knowledge/programming_languages/go/go_style/decisions/#import-blank-import-_","title":"Import \u201cblank\u201d (<code>import _</code>)","text":"<p>Packages that are imported only for their side effects (using the syntax <code>import _ \"package\"</code>) may only be imported in a main package, or in tests that require them.</p> <p>Some examples of such packages include:</p> <ul> <li> <p>time/tzdata</p> </li> <li> <p>image/jpeg in image processing code</p> </li> </ul> <p>Avoid blank imports in library packages, even if the library indirectly depends on them. Constraining side-effect imports to the main package helps control dependencies, and makes it possible to write tests that rely on a different import without conflict or wasted build costs.</p> <p>The following are the only exceptions to this rule:</p> <ul> <li> <p>You may use a blank import to bypass the check for disallowed imports in the     nogo static checker.</p> </li> <li> <p>You may use a blank import of the embed package     in a source file which uses the <code>//go:embed</code> compiler directive.</p> </li> </ul> <p>Tip: If you create a library package that indirectly depends on a side-effect import in production, document the intended usage.</p> <p></p>"},{"location":"knowledge/programming_languages/go/go_style/decisions/#import-dot-import","title":"Import \u201cdot\u201d (<code>import .</code>)","text":"<p>The <code>import .</code> form is a language feature that allows bringing identifiers exported from another package to the current package without qualification. See the language spec for more.</p> <p>Do not use this feature in the Google codebase; it makes it harder to tell where the functionality is coming from.</p> <pre><code>// Bad:\npackage foo_test\n\nimport (\n    \"bar/testutil\" // also imports \"foo\"\n    . \"foo\"\n)\n\nvar myThing = Bar() // Bar defined in package foo; no qualification needed.\n</code></pre> <pre><code>// Good:\npackage foo_test\n\nimport (\n    \"bar/testutil\" // also imports \"foo\"\n    \"foo\"\n)\n\nvar myThing = foo.Bar()\n</code></pre> <p></p>"},{"location":"knowledge/programming_languages/go/go_style/decisions/#errors","title":"Errors","text":""},{"location":"knowledge/programming_languages/go/go_style/decisions/#returning-errors","title":"Returning errors","text":"<p>Use <code>error</code> to signal that a function can fail. By convention, <code>error</code> is the last result parameter.</p> <pre><code>// Good:\nfunc Good() error { /* ... */ }\n</code></pre> <p>Returning a <code>nil</code> error is the idiomatic way to signal a successful operation that could otherwise fail. If a function returns an error, callers must treat all non-error return values as unspecified unless explicitly documented otherwise. Commonly, the non-error return values are their zero values, but this cannot be assumed.</p> <pre><code>// Good:\nfunc GoodLookup() (*Result, error) {\n    // ...\n    if err != nil {\n        return nil, err\n    }\n    return res, nil\n}\n</code></pre> <p>Exported functions that return errors should return them using the <code>error</code> type. Concrete error types are susceptible to subtle bugs: a concrete <code>nil</code> pointer can get wrapped into an interface and thus become a non-nil value (see the Go FAQ entry on the topic).</p> <pre><code>// Bad:\nfunc Bad() *os.PathError { /*...*/ }\n</code></pre> <p>Tip: A function that takes a <code>context.Context</code> argument should usually return an <code>error</code> so that the caller can determine if the context was cancelled while the function was running.</p> <p></p>"},{"location":"knowledge/programming_languages/go/go_style/decisions/#error-strings","title":"Error strings","text":"<p>Error strings should not be capitalized (unless beginning with an exported name, a proper noun or an acronym) and should not end with punctuation. This is because error strings usually appear within other context before being printed to the user.</p> <pre><code>// Bad:\nerr := fmt.Errorf(\"Something bad happened.\")\n</code></pre> <pre><code>// Good:\nerr := fmt.Errorf(\"something bad happened\")\n</code></pre> <p>On the other hand, the style for the full displayed message (logging, test failure, API response, or other UI) depends, but should typically be capitalized.</p> <pre><code>// Good:\nlog.Infof(\"Operation aborted: %v\", err)\nlog.Errorf(\"Operation aborted: %v\", err)\nt.Errorf(\"Op(%q) failed unexpectedly; err=%v\", args, err)\n</code></pre> <p></p>"},{"location":"knowledge/programming_languages/go/go_style/decisions/#handle-errors","title":"Handle errors","text":"<p>Code that encounters an error should make a deliberate choice about how to handle it. It is not usually appropriate to discard errors using <code>_</code> variables. If a function returns an error, do one of the following:</p> <ul> <li>Handle and address the error immediately.</li> <li>Return the error to the caller.</li> <li>In exceptional situations, call [<code>log.Fatal</code>] or (if absolutely necessary)     <code>panic</code>.</li> </ul> <p>Note: <code>log.Fatalf</code> is not the standard library log. See [#logging].</p> <p>In the rare circumstance where it is appropriate to ignore or discard an error (for example a call to [<code>(*bytes.Buffer).Write</code>] that is documented to never fail), an accompanying comment should explain why this is safe.</p> <pre><code>// Good:\nvar b *bytes.Buffer\n\nn, _ := b.Write(p) // never returns a non-nil error\n</code></pre> <p>For more discussion and examples of error handling, see Effective Go and best practices.</p> <p></p>"},{"location":"knowledge/programming_languages/go/go_style/decisions/#in-band-errors","title":"In-band errors","text":"<p>In C and similar languages, it is common for functions to return values like -1, null, or the empty string to signal errors or missing results. This is known as in-band error handling.</p> <pre><code>// Bad:\n// Lookup returns the value for key or -1 if there is no mapping for key.\nfunc Lookup(key string) int\n</code></pre> <p>Failing to check for an in-band error value can lead to bugs and can attribute errors to the wrong function.</p> <pre><code>// Bad:\n// The following line returns an error that Parse failed for the input value,\n// whereas the failure was that there is no mapping for missingKey.\nreturn Parse(Lookup(missingKey))\n</code></pre> <p>Go\u2019s support for multiple return values provides a better solution (see the Effective Go section on multiple returns). Instead of requiring clients to check for an in-band error value, a function should return an additional value to indicate whether its other return values are valid. This return value may be an error or a boolean when no explanation is needed, and should be the final return value.</p> <pre><code>// Good:\n// Lookup returns the value for key or ok=false if there is no mapping for key.\nfunc Lookup(key string) (value string, ok bool)\n</code></pre> <p>This API prevents the caller from incorrectly writing <code>Parse(Lookup(key))</code> which causes a compile-time error, since <code>Lookup(key)</code> has 2 outputs.</p> <p>Returning errors in this way encourages more robust and explicit error handling:</p> <pre><code>// Good:\nvalue, ok := Lookup(key)\nif !ok {\n    return fmt.Errorf(\"no value for %q\", key)\n}\nreturn Parse(value)\n</code></pre> <p>Some standard library functions, like those in package <code>strings</code>, return in-band error values. This greatly simplifies string-manipulation code at the cost of requiring more diligence from the programmer. In general, Go code in the Google codebase should return additional values for errors.</p> <p></p>"},{"location":"knowledge/programming_languages/go/go_style/decisions/#indent-error-flow","title":"Indent error flow","text":"<p>Handle errors before proceeding with the rest of your code. This improves the readability of the code by enabling the reader to find the normal path quickly. This same logic applies to any block which tests a condition then ends in a terminal condition (e.g., <code>return</code>, <code>panic</code>, <code>log.Fatal</code>).</p> <p>Code that runs if the terminal condition is not met should appear after the <code>if</code> block, and should not be indented in an <code>else</code> clause.</p> <pre><code>// Good:\nif err != nil {\n    // error handling\n    return // or continue, etc.\n}\n// normal code\n</code></pre> <pre><code>// Bad:\nif err != nil {\n    // error handling\n} else {\n    // normal code that looks abnormal due to indentation\n}\n</code></pre> <p>Tip: If you are using a variable for more than a few lines of code, it is generally not worth using the <code>if</code>-with-initializer style. In these cases, it is usually better to move the declaration out and use a standard <code>if</code> statement:</p> <p><code>go // Good: x, err := f() if err != nil {   // error handling   return } // lots of code that uses x // across multiple lines</code></p> <p><code>go // Bad: if x, err := f(); err != nil {   // error handling   return } else {   // lots of code that uses x   // across multiple lines }</code></p> <p>See Go Tip #1: Line of Sight and TotT: Reduce Code Complexity by Reducing Nesting for more details.</p> <p></p>"},{"location":"knowledge/programming_languages/go/go_style/decisions/#language","title":"Language","text":""},{"location":"knowledge/programming_languages/go/go_style/decisions/#literal-formatting","title":"Literal formatting","text":"<p>Go has an exceptionally powerful composite literal syntax, with which it is possible to express deeply-nested, complicated values in a single expression. Where possible, this literal syntax should be used instead of building values field-by-field. The <code>gofmt</code> formatting for literals is generally quite good, but there are some additional rules for keeping these literals readable and maintainable.</p> <p></p>"},{"location":"knowledge/programming_languages/go/go_style/decisions/#field-names","title":"Field names","text":"<p>Struct literals should usually specify field names for types defined outside the current package.</p> <ul> <li> <p>Include field names for types from other packages.</p> <p><code>go // Good: good := otherpkg.Type{A: 42}</code></p> <p>The position of fields in a struct and the full set of fields (both of which are necessary to get right when field names are omitted) are not usually considered to be part of a struct\u2019s public API; specifying the field name is needed to avoid unnecessary coupling.</p> <p><code>go // Bad: // https://pkg.go.dev/encoding/csv#Reader r := csv.Reader{',', '#', 4, false, false, false, false}</code></p> <p>Field names may be omitted within small, simple structs whose composition and order are documented as being stable.</p> <p><code>go // Good: okay := image.Point{42, 54} also := image.Point{X: 42, Y: 54}</code></p> </li> <li> <p>For package-local types, field names are optional.</p> <p><code>go // Good: okay := Type{42} also := internalType{4, 2}</code></p> <p>Field names should still be used if it makes the code clearer, and it is very common to do so. For example, a struct with a large number of fields should almost always be initialized with field names.</p> <p><code>go // Good: okay := StructWithLotsOfFields{   field1: 1,   field2: \"two\",   field3: 3.14,   field4: true, }</code></p> </li> </ul> <p></p>"},{"location":"knowledge/programming_languages/go/go_style/decisions/#matching-braces","title":"Matching braces","text":"<p>The closing half of a brace pair should always appear on a line with the same amount of indentation as the opening brace. One-line literals necessarily have this property. When the literal spans multiple lines, maintaining this property keeps the brace matching for literals the same as brace matching for common Go syntactic constructs like functions and <code>if</code> statements.</p> <p>The most common mistake in this area is putting the closing brace on the same line as a value in a multi-line struct literal. In these cases, the line should end with a comma and the closing brace should appear on the next line.</p> <pre><code>// Good:\ngood := []*Type{{Key: \"value\"}}\n</code></pre> <pre><code>// Good:\ngood := []*Type{\n    {Key: \"multi\"},\n    {Key: \"line\"},\n}\n</code></pre> <pre><code>// Bad:\nbad := []*Type{\n    {Key: \"multi\"},\n    {Key: \"line\"}}\n</code></pre> <pre><code>// Bad:\nbad := []*Type{\n    {\n        Key: \"value\"},\n}\n</code></pre> <p></p>"},{"location":"knowledge/programming_languages/go/go_style/decisions/#cuddled-braces","title":"Cuddled braces","text":"<p>Dropping whitespace between braces (aka \u201ccuddling\u201d them) for slice and array literals is only permitted when both of the following are true.</p> <ul> <li>The indentation matches</li> <li>The inner values are also literals or proto builders (i.e. not a variable or     other expression)</li> </ul> <pre><code>// Good:\ngood := []*Type{\n    { // Not cuddled\n        Field: \"value\",\n    },\n    {\n        Field: \"value\",\n    },\n}\n</code></pre> <pre><code>// Good:\ngood := []*Type{{ // Cuddled correctly\n    Field: \"value\",\n}, {\n    Field: \"value\",\n}}\n</code></pre> <pre><code>// Good:\ngood := []*Type{\n    first, // Can't be cuddled\n    {Field: \"second\"},\n}\n</code></pre> <pre><code>// Good:\nokay := []*pb.Type{pb.Type_builder{\n    Field: \"first\", // Proto Builders may be cuddled to save vertical space\n}.Build(), pb.Type_builder{\n    Field: \"second\",\n}.Build()}\n</code></pre> <pre><code>// Bad:\nbad := []*Type{\n    first,\n    {\n        Field: \"second\",\n    }}\n</code></pre> <p></p>"},{"location":"knowledge/programming_languages/go/go_style/decisions/#repeated-type-names","title":"Repeated type names","text":"<p>Repeated type names may be omitted from slice and map literals. This can be helpful in reducing clutter. A reasonable occasion for repeating the type names explicitly is when dealing with a complex type that is not common in your project, when the repetitive type names are on lines that are far apart and can remind the reader of the context.</p> <pre><code>// Good:\ngood := []*Type{\n    {A: 42},\n    {A: 43},\n}\n</code></pre> <pre><code>// Bad:\nrepetitive := []*Type{\n    &amp;Type{A: 42},\n    &amp;Type{A: 43},\n}\n</code></pre> <pre><code>// Good:\ngood := map[Type1]*Type2{\n    {A: 1}: {B: 2},\n    {A: 3}: {B: 4},\n}\n</code></pre> <pre><code>// Bad:\nrepetitive := map[Type1]*Type2{\n    Type1{A: 1}: &amp;Type2{B: 2},\n    Type1{A: 3}: &amp;Type2{B: 4},\n}\n</code></pre> <p>Tip: If you want to remove repetitive type names in struct literals, you can run <code>gofmt -s</code>.</p> <p></p>"},{"location":"knowledge/programming_languages/go/go_style/decisions/#zero-value-fields","title":"Zero-value fields","text":"<p>Zero-value fields may be omitted from struct literals when clarity is not lost as a result.</p> <p>Well-designed APIs often employ zero-value construction for enhanced readability. For example, omitting the three zero-value fields from the following struct draws attention to the only option that is being specified.</p> <pre><code>// Bad:\nimport (\n  \"github.com/golang/leveldb\"\n  \"github.com/golang/leveldb/db\"\n)\n\nldb := leveldb.Open(\"/my/table\", &amp;db.Options{\n    BlockSize: 1&lt;&lt;16,\n    ErrorIfDBExists: true,\n\n    // These fields all have their zero values.\n    BlockRestartInterval: 0,\n    Comparer: nil,\n    Compression: nil,\n    FileSystem: nil,\n    FilterPolicy: nil,\n    MaxOpenFiles: 0,\n    WriteBufferSize: 0,\n    VerifyChecksums: false,\n})\n</code></pre> <pre><code>// Good:\nimport (\n  \"github.com/golang/leveldb\"\n  \"github.com/golang/leveldb/db\"\n)\n\nldb := leveldb.Open(\"/my/table\", &amp;db.Options{\n    BlockSize: 1&lt;&lt;16,\n    ErrorIfDBExists: true,\n})\n</code></pre> <p>Structs within table-driven tests often benefit from explicit field names, especially when the test struct is not trivial. This allows the author to omit the zero-valued fields entirely when the fields in question are not related to the test case. For example, successful test cases should omit any error-related or failure-related fields. In cases where the zero value is necessary to understand the test case, such as testing for zero or <code>nil</code> inputs, the field names should be specified.</p> <p>Concise</p> <pre><code>tests := []struct {\n    input      string\n    wantPieces []string\n    wantErr    error\n}{\n    {\n        input:      \"1.2.3.4\",\n        wantPieces: []string{\"1\", \"2\", \"3\", \"4\"},\n    },\n    {\n        input:   \"hostname\",\n        wantErr: ErrBadHostname,\n    },\n}\n</code></pre> <p>Explicit</p> <pre><code>tests := []struct {\n    input    string\n    wantIPv4 bool\n    wantIPv6 bool\n    wantErr  bool\n}{\n    {\n        input:    \"1.2.3.4\",\n        wantIPv4: true,\n        wantIPv6: false,\n    },\n    {\n        input:    \"1:2::3:4\",\n        wantIPv4: false,\n        wantIPv6: true,\n    },\n    {\n        input:    \"hostname\",\n        wantIPv4: false,\n        wantIPv6: false,\n        wantErr:  true,\n    },\n}\n</code></pre> <p></p>"},{"location":"knowledge/programming_languages/go/go_style/decisions/#nil-slices","title":"Nil slices","text":"<p>For most purposes, there is no functional difference between <code>nil</code> and the empty slice. Built-in functions like <code>len</code> and <code>cap</code> behave as expected on <code>nil</code> slices.</p> <pre><code>// Good:\nimport \"fmt\"\n\nvar s []int         // nil\n\nfmt.Println(s)      // []\nfmt.Println(len(s)) // 0\nfmt.Println(cap(s)) // 0\nfor range s {...}   // no-op\n\ns = append(s, 42)\nfmt.Println(s)      // [42]\n</code></pre> <p>If you declare an empty slice as a local variable (especially if it can be the source of a return value), prefer the nil initialization to reduce the risk of bugs by callers.</p> <pre><code>// Good:\nvar t []string\n</code></pre> <pre><code>// Bad:\nt := []string{}\n</code></pre> <p>Do not create APIs that force their clients to make distinctions between nil and the empty slice.</p> <pre><code>// Good:\n// Ping pings its targets.\n// Returns hosts that successfully responded.\nfunc Ping(hosts []string) ([]string, error) { ... }\n</code></pre> <pre><code>// Bad:\n// Ping pings its targets and returns a list of hosts\n// that successfully responded. Can be empty if the input was empty.\n// nil signifies that a system error occurred.\nfunc Ping(hosts []string) []string { ... }\n</code></pre> <p>When designing interfaces, avoid making a distinction between a <code>nil</code> slice and a non-<code>nil</code>, zero-length slice, as this can lead to subtle programming errors. This is typically accomplished by using <code>len</code> to check for emptiness, rather than <code>== nil</code>.</p> <p>This implementation accepts both <code>nil</code> and zero-length slices as \u201cempty\u201d:</p> <pre><code>// Good:\n// describeInts describes s with the given prefix, unless s is empty.\nfunc describeInts(prefix string, s []int) {\n    if len(s) == 0 {\n        return\n    }\n    fmt.Println(prefix, s)\n}\n</code></pre> <p>Instead of relying on the distinction as a part of the API:</p> <pre><code>// Bad:\nfunc maybeInts() []int { /* ... */ }\n\n// describeInts describes s with the given prefix; pass nil to skip completely.\nfunc describeInts(prefix string, s []int) {\n  // The behavior of this function unintentionally changes depending on what\n  // maybeInts() returns in 'empty' cases (nil or []int{}).\n  if s == nil {\n    return\n  }\n  fmt.Println(prefix, s)\n}\n\ndescribeInts(\"Here are some ints:\", maybeInts())\n</code></pre> <p>See in-band errors for further discussion.</p> <p></p>"},{"location":"knowledge/programming_languages/go/go_style/decisions/#indentation-confusion","title":"Indentation confusion","text":"<p>Avoid introducing a line break if it would align the rest of the line with an indented code block. If this is unavoidable, leave a space to separate the code in the block from the wrapped line.</p> <pre><code>// Bad:\nif longCondition1 &amp;&amp; longCondition2 &amp;&amp;\n    // Conditions 3 and 4 have the same indentation as the code within the if.\n    longCondition3 &amp;&amp; longCondition4 {\n    log.Info(\"all conditions met\")\n}\n</code></pre> <p>See the following sections for specific guidelines and examples:</p> <ul> <li>Function formatting</li> <li>Conditionals and loops</li> <li>Literal formatting</li> </ul> <p></p>"},{"location":"knowledge/programming_languages/go/go_style/decisions/#function-formatting","title":"Function formatting","text":"<p>The signature of a function or method declaration should remain on a single line to avoid indentation confusion.</p> <p>Function argument lists can make some of the longest lines in a Go source file. However, they precede a change in indentation, and therefore it is difficult to break the line in a way that does not make subsequent lines look like part of the function body in a confusing way:</p> <pre><code>// Bad:\nfunc (r *SomeType) SomeLongFunctionName(foo1, foo2, foo3 string,\n    foo4, foo5, foo6 int) {\n    foo7 := bar(foo1)\n    // ...\n}\n</code></pre> <p>See best practices for a few options for shortening the call sites of functions that would otherwise have many arguments.</p> <pre><code>// Good:\ngood := foo.Call(long, CallOptions{\n    Names:   list,\n    Of:      of,\n    The:     parameters,\n    Func:    all,\n    Args:    on,\n    Now:     separate,\n    Visible: lines,\n})\n</code></pre> <pre><code>// Bad:\nbad := foo.Call(\n    long,\n    list,\n    of,\n    parameters,\n    all,\n    on,\n    separate,\n    lines,\n)\n</code></pre> <p>Lines can often be shortened by factoring out local variables.</p> <pre><code>// Good:\nlocal := helper(some, parameters, here)\ngood := foo.Call(list, of, parameters, local)\n</code></pre> <p>Similarly, function and method calls should not be separated based solely on line length.</p> <pre><code>// Good:\ngood := foo.Call(long, list, of, parameters, all, on, one, line)\n</code></pre> <pre><code>// Bad:\nbad := foo.Call(long, list, of, parameters,\n    with, arbitrary, line, breaks)\n</code></pre> <p>Do not add comments to specific function parameters. Instead, use an option struct or add more detail to the function documentation.</p> <pre><code>// Good:\ngood := server.New(ctx, server.Options{Port: 42})\n</code></pre> <pre><code>// Bad:\nbad := server.New(\n    ctx,\n    42, // Port\n)\n</code></pre> <p>If call-sites are uncomfortably long, consider refactoring:</p> <pre><code>// Good:\n// Sometimes variadic arguments can be factored out\nreplacements := []string{\n    \"from\", \"to\", // related values can be formatted adjacent to one another\n    \"source\", \"dest\",\n    \"original\", \"new\",\n}\n\n// Use the replacement struct as inputs to NewReplacer.\nreplacer := strings.NewReplacer(replacements...)\n</code></pre> <p>If the API cannot be changed or if the local call is unusual (whether or not the call is too long), it is always permissible to add line breaks if it aids in understanding the call.</p> <pre><code>// Good:\ncanvas.RenderCube(cube,\n    x0, y0, z0,\n    x0, y0, z1,\n    x0, y1, z0,\n    x0, y1, z1,\n    x1, y0, z0,\n    x1, y0, z1,\n    x1, y1, z0,\n    x1, y1, z1,\n)\n</code></pre> <p>Note that the lines in the above example are not wrapped at a specific column boundary but are grouped based on co-ordinate triples.</p> <p>Long string literals within functions should not be broken for the sake of line length. For functions that include such strings, a line break can be added after the string format, and the arguments can be provided on the next or subsequent lines. The decision about where the line breaks should go is best made based on semantic groupings of inputs, rather than based purely on line length.</p> <pre><code>// Good:\nlog.Warningf(\"Database key (%q, %d, %q) incompatible in transaction started by (%q, %d, %q)\",\n    currentCustomer, currentOffset, currentKey,\n    txCustomer, txOffset, txKey)\n</code></pre> <pre><code>// Bad:\nlog.Warningf(\"Database key (%q, %d, %q) incompatible in\"+\n    \" transaction started by (%q, %d, %q)\",\n    currentCustomer, currentOffset, currentKey, txCustomer,\n    txOffset, txKey)\n</code></pre> <p></p>"},{"location":"knowledge/programming_languages/go/go_style/decisions/#conditionals-and-loops","title":"Conditionals and loops","text":"<p>An <code>if</code> statement should not be line broken; multi-line <code>if</code> clauses can lead to indentation confusion.</p> <pre><code>// Bad:\n// The second if statement is aligned with the code within the if block, causing\n// indentation confusion.\nif db.CurrentStatusIs(db.InTransaction) &amp;&amp;\n    db.ValuesEqual(db.TransactionKey(), row.Key()) {\n    return db.Errorf(db.TransactionError, \"query failed: row (%v): key does not match transaction key\", row)\n}\n</code></pre> <p>If the short-circuit behavior is not required, the boolean operands can be extracted directly:</p> <pre><code>// Good:\ninTransaction := db.CurrentStatusIs(db.InTransaction)\nkeysMatch := db.ValuesEqual(db.TransactionKey(), row.Key())\nif inTransaction &amp;&amp; keysMatch {\n    return db.Error(db.TransactionError, \"query failed: row (%v): key does not match transaction key\", row)\n}\n</code></pre> <p>There may also be other locals that can be extracted, especially if the conditional is already repetitive:</p> <pre><code>// Good:\nuid := user.GetUniqueUserID()\nif db.UserIsAdmin(uid) || db.UserHasPermission(uid, perms.ViewServerConfig) || db.UserHasPermission(uid, perms.CreateGroup) {\n    // ...\n}\n</code></pre> <pre><code>// Bad:\nif db.UserIsAdmin(user.GetUniqueUserID()) || db.UserHasPermission(user.GetUniqueUserID(), perms.ViewServerConfig) || db.UserHasPermission(user.GetUniqueUserID(), perms.CreateGroup) {\n    // ...\n}\n</code></pre> <p><code>if</code> statements that contain closures or multi-line struct literals should ensure that the braces match to avoid indentation confusion.</p> <pre><code>// Good:\nif err := db.RunInTransaction(func(tx *db.TX) error {\n    return tx.Execute(userUpdate, x, y, z)\n}); err != nil {\n    return fmt.Errorf(\"user update failed: %s\", err)\n}\n</code></pre> <pre><code>// Good:\nif _, err := client.Update(ctx, &amp;upb.UserUpdateRequest{\n    ID:   userID,\n    User: user,\n}); err != nil {\n    return fmt.Errorf(\"user update failed: %s\", err)\n}\n</code></pre> <p>Similarly, don\u2019t try inserting artificial linebreaks into <code>for</code> statements. You can always let the line simply be long if there is no elegant way to refactor it:</p> <pre><code>// Good:\nfor i, max := 0, collection.Size(); i &lt; max &amp;&amp; !collection.HasPendingWriters(); i++ {\n    // ...\n}\n</code></pre> <p>Often, though, there is:</p> <pre><code>// Good:\nfor i, max := 0, collection.Size(); i &lt; max; i++ {\n    if collection.HasPendingWriters() {\n        break\n    }\n    // ...\n}\n</code></pre> <p><code>switch</code> and <code>case</code> statements should also remain on a single line.</p> <pre><code>// Good:\nswitch good := db.TransactionStatus(); good {\ncase db.TransactionStarting, db.TransactionActive, db.TransactionWaiting:\n    // ...\ncase db.TransactionCommitted, db.NoTransaction:\n    // ...\ndefault:\n    // ...\n}\n</code></pre> <pre><code>// Bad:\nswitch bad := db.TransactionStatus(); bad {\ncase db.TransactionStarting,\n    db.TransactionActive,\n    db.TransactionWaiting:\n    // ...\ncase db.TransactionCommitted,\n    db.NoTransaction:\n    // ...\ndefault:\n    // ...\n}\n</code></pre> <p>If the line is excessively long, indent all cases and separate them with a blank line to avoid indentation confusion:</p> <pre><code>// Good:\nswitch db.TransactionStatus() {\ncase\n    db.TransactionStarting,\n    db.TransactionActive,\n    db.TransactionWaiting,\n    db.TransactionCommitted:\n\n    // ...\ncase db.NoTransaction:\n    // ...\ndefault:\n    // ...\n}\n</code></pre> <p>In conditionals comparing a variable to a constant, place the variable value on the left hand side of the equality operator:</p> <pre><code>// Good:\nif result == \"foo\" {\n  // ...\n}\n</code></pre> <p>Instead of the less clear phrasing where the constant comes first (\u201cYoda style conditionals\u201d):</p> <pre><code>// Bad:\nif \"foo\" == result {\n  // ...\n}\n</code></pre> <p></p>"},{"location":"knowledge/programming_languages/go/go_style/decisions/#copying","title":"Copying","text":"<p>To avoid unexpected aliasing and similar bugs, be careful when copying a struct from another package. For example, synchronization objects such as <code>sync.Mutex</code> must not be copied.</p> <p>The <code>bytes.Buffer</code> type contains a <code>[]byte</code> slice and, as an optimization for small strings, a small byte array to which the slice may refer. If you copy a <code>Buffer</code>, the slice in the copy may alias the array in the original, causing subsequent method calls to have surprising effects.</p> <p>In general, do not copy a value of type <code>T</code> if its methods are associated with the pointer type, <code>*T</code>.</p> <pre><code>// Bad:\nb1 := bytes.Buffer{}\nb2 := b1\n</code></pre> <p>Invoking a method that takes a value receiver can hide the copy. When you author an API, you should generally take and return pointer types if your structs contain fields that should not be copied.</p> <p>These are acceptable:</p> <pre><code>// Good:\ntype Record struct {\n  buf bytes.Buffer\n  // other fields omitted\n}\n\nfunc New() *Record {...}\n\nfunc (r *Record) Process(...) {...}\n\nfunc Consumer(r *Record) {...}\n</code></pre> <p>But these are usually wrong:</p> <pre><code>// Bad:\ntype Record struct {\n  buf bytes.Buffer\n  // other fields omitted\n}\n\n\nfunc (r Record) Process(...) {...} // Makes a copy of r.buf\n\nfunc Consumer(r Record) {...} // Makes a copy of r.buf\n</code></pre> <p>This guidance also applies to copying <code>sync.Mutex</code>.</p> <p></p>"},{"location":"knowledge/programming_languages/go/go_style/decisions/#dont-panic","title":"Don\u2019t panic","text":"<p>Do not use <code>panic</code> for normal error handling. Instead, use <code>error</code> and multiple return values. See the Effective Go section on errors.</p> <p>Within <code>package main</code> and initialization code, consider [<code>log.Exit</code>] for errors that should terminate the program (e.g., invalid configuration), as in many of these cases a stack trace will not help the reader. Please note that [<code>log.Exit</code>] calls [<code>os.Exit</code>] and any deferred functions will not be run.</p> <p>For errors that indicate \u201cimpossible\u201d conditions, namely bugs that should always be caught during code review and/or testing, a function may reasonably return an error or call [<code>log.Fatal</code>].</p> <p>Note: <code>log.Fatalf</code> is not the standard library log. See [#logging].</p> <p></p>"},{"location":"knowledge/programming_languages/go/go_style/decisions/#must-functions","title":"Must functions","text":"<p>Setup helper functions that stop the program on failure follow the naming convention <code>MustXYZ</code> (or <code>mustXYZ</code>). In general, they should only be called early on program startup, not on things like user input where normal Go error handling is preferred.</p> <p>This often comes up for functions called to initialize package-level variables exclusively at package initialization time (e.g. template.Must and regexp.MustCompile).</p> <pre><code>// Good:\nfunc MustParse(version string) *Version {\n    v, err := Parse(version)\n    if err != nil {\n        log.Fatalf(\"MustParse(%q) = _, %v\", version, err)\n    }\n    return v\n}\n\n// Package level \"constant\". If we wanted to use `Parse`, we would have had to\n// set the value in `init`.\nvar DefaultVersion = MustParse(\"1.2.3\")\n</code></pre> <p>Note: <code>log.Fatalf</code> is not the standard library log. See [#logging].</p> <p>The same convention may be used in test helpers that only stop the current test (using <code>t.Fatal</code>). Such helpers are often convenient in creating test values, for example in struct fields of table driven tests, as functions that return errors cannot be directly assigned to a struct field.</p> <pre><code>// Good:\nfunc mustMarshalAny(t *testing.T, m proto.Message) *anypb.Any {\n  t.Helper()\n  any, err := anypb.New(m)\n  if err != nil {\n    t.Fatalf(\"MustMarshalAny(t, m) = %v; want %v\", err, nil)\n  }\n  return any\n}\n\nfunc TestCreateObject(t *testing.T) {\n  tests := []struct{\n    desc string\n    data *anypb.Any\n  }{\n    {\n      desc: \"my test case\",\n      // Creating values directly within table driven test cases.\n      data: mustMarshalAny(t, mypb.Object{}),\n    },\n    // ...\n  }\n  // ...\n}\n</code></pre> <p>In both of these cases, the value of this pattern is that the helpers can be called in a \u201cvalue\u201d context. These helpers should not be called in places where it\u2019s difficult to ensure an error would be caught or in a context where an error should be checked (e.g., in many request handlers). For constant inputs, this allows tests to easily ensure that the <code>Must</code> arguments are well-formed, and for non-constant inputs it permits tests to validate that errors are properly handled or propagated.</p> <p>Where <code>Must</code> functions are used in a test, they should generally be marked as a test helper and call <code>t.Fatal</code> on error (see error handling in test helpers for more considerations of using that).</p> <p>They should not be used when ordinary error handling is possible (including with some refactoring):</p> <pre><code>// Bad:\nfunc Version(o *servicepb.Object) (*version.Version, error) {\n    // Return error instead of using Must functions.\n    v := version.MustParse(o.GetVersionString())\n    return dealiasVersion(v)\n}\n</code></pre> <p></p>"},{"location":"knowledge/programming_languages/go/go_style/decisions/#goroutine-lifetimes","title":"Goroutine lifetimes","text":"<p>When you spawn goroutines, make it clear when or whether they exit.</p> <p>Goroutines can leak by blocking on channel sends or receives. The garbage collector will not terminate a goroutine even if the channels it is blocked on are unreachable.</p> <p>Even when goroutines do not leak, leaving them in-flight when they are no longer needed can cause other subtle and hard-to-diagnose problems. Sending on a channel that has been closed causes a panic.</p> <pre><code>// Bad:\nch := make(chan int)\nch &lt;- 42\nclose(ch)\nch &lt;- 13 // panic\n</code></pre> <p>Modifying still-in-use inputs \u201cafter the result isn\u2019t needed\u201d can lead to data races. Leaving goroutines in-flight for arbitrarily long can lead to unpredictable memory usage.</p> <p>Concurrent code should be written such that the goroutine lifetimes are obvious. Typically this will mean keeping synchronization-related code constrained within the scope of a function and factoring out the logic into synchronous functions. If the concurrency is still not obvious, it is important to document when and why the goroutines exit.</p> <p>Code that follows best practices around context usage often helps make this clear. It is conventionally managed with a <code>context.Context</code>:</p> <pre><code>// Good:\nfunc (w *Worker) Run(ctx context.Context) error {\n    // ...\n    for item := range w.q {\n        // process returns at latest when the context is cancelled.\n        go process(ctx, item)\n    }\n    // ...\n}\n</code></pre> <p>There are other variants of the above that use raw signal channels like <code>chan struct{}</code>, synchronized variables, condition variables, and more. The important part is that the goroutine\u2019s end is evident for subsequent maintainers.</p> <p>In contrast, the following code is careless about when its spawned goroutines finish:</p> <pre><code>// Bad:\nfunc (w *Worker) Run() {\n    // ...\n    for item := range w.q {\n        // process returns when it finishes, if ever, possibly not cleanly\n        // handling a state transition or termination of the Go program itself.\n        go process(item)\n    }\n    // ...\n}\n</code></pre> <p>This code may look OK, but there are several underlying problems:</p> <ul> <li> <p>The code probably has undefined behavior in production, and the program may     not terminate cleanly, even if the operating system releases the resources.</p> </li> <li> <p>The code is difficult to test meaningfully due to the code\u2019s indeterminate     lifecycle.</p> </li> <li> <p>The code may leak resources as described above.</p> </li> </ul> <p>See also:</p> <ul> <li>Never start a goroutine without knowing how it will stop</li> <li>Rethinking Classical Concurrency Patterns: slides,     video</li> <li>When Go programs end</li> </ul> <p></p>"},{"location":"knowledge/programming_languages/go/go_style/decisions/#interfaces","title":"Interfaces","text":"<p>Go interfaces generally belong in the package that consumes values of the interface type, not a package that implements the interface type. The implementing package should return concrete (usually pointer or struct) types. That way, new methods can be added to implementations without requiring extensive refactoring. See GoTip #49: Accept Interfaces, Return Concrete Types for more details.</p> <p>Do not export a test double implementation of an interface from an API that consumes it. Instead, design the API so that it can be tested using the public API of the real implementation. See GoTip #42: Authoring a Stub for Testing for more details. Even when it is not feasible to use the real implementation, it may not be necessary to introduce an interface fully covering all methods in the real type; the consumer can create an interface containing only the methods it needs, as demonstrated in GoTip #78: Minimal Viable Interfaces.</p> <p>To test packages that use Stubby RPC clients, use a real client connection. If a real server cannot be run in the test, Google\u2019s internal practice is to obtain a real client connection to a local test double using the internal rpctest package (coming soon!).</p> <p>Do not define interfaces before they are used (see TotT: Code Health: Eliminate YAGNI Smells ). Without a realistic example of usage, it is too difficult to see whether an interface is even necessary, let alone what methods it should contain.</p> <p>Do not use interface-typed parameters if the users of the package do not need to pass different types for them.</p> <p>Do not export interfaces that the users of the package do not need.</p> <p>TODO: Write a more in-depth doc on interfaces and link to it here.</p> <pre><code>// Good:\npackage consumer // consumer.go\n\ntype Thinger interface { Thing() bool }\n\nfunc Foo(t Thinger) string { ... }\n</code></pre> <pre><code>// Good:\npackage consumer // consumer_test.go\n\ntype fakeThinger struct{ ... }\nfunc (t fakeThinger) Thing() bool { ... }\n...\nif Foo(fakeThinger{...}) == \"x\" { ... }\n</code></pre> <pre><code>// Bad:\npackage producer\n\ntype Thinger interface { Thing() bool }\n\ntype defaultThinger struct{ ... }\nfunc (t defaultThinger) Thing() bool { ... }\n\nfunc NewThinger() Thinger { return defaultThinger{ ... } }\n</code></pre> <pre><code>// Good:\npackage producer\n\ntype Thinger struct{ ... }\nfunc (t Thinger) Thing() bool { ... }\n\nfunc NewThinger() Thinger { return Thinger{ ... } }\n</code></pre> <p></p>"},{"location":"knowledge/programming_languages/go/go_style/decisions/#generics","title":"Generics","text":"<p>Generics (formally called \u201cType Parameters\u201d) are allowed where they fulfill your business requirements. In many applications, a conventional approach using existing language features (slices, maps, interfaces, and so on) works just as well without the added complexity, so be wary of premature use. See the discussion on least mechanism.</p> <p>When introducing an exported API that uses generics, make sure it is suitably documented. It\u2019s highly encouraged to include motivating runnable examples.</p> <p>Do not use generics just because you are implementing an algorithm or data structure that does not care about the type of its member elements. If there is only one type being instantiated in practice, start by making your code work on that type without using generics at all. Adding polymorphism later will be straightforward compared to removing abstraction that is found to be unnecessary.</p> <p>Do not use generics to invent domain-specific languages (DSLs). In particular, refrain from introducing error-handling frameworks that might put a significant burden on readers. Instead prefer established error handling practices. For testing, be especially wary of introducing assertion libraries or frameworks that result in less useful test failures.</p> <p>In general:</p> <ul> <li>Write code, don\u2019t design types. From a GopherCon talk by Robert Griesemer     and Ian Lance Taylor.</li> <li>If you have several types that share a useful unifying interface, consider     modeling the solution using that interface. Generics may not be needed.</li> <li>Otherwise, instead of relying on the <code>any</code> type and excessive     type switching, consider generics.</li> </ul> <p>See also:</p> <ul> <li> <p>Using Generics in Go, talk by Ian Lance Taylor</p> </li> <li> <p>Generics tutorial on Go\u2019s webpage</p> </li> </ul> <p></p>"},{"location":"knowledge/programming_languages/go/go_style/decisions/#pass-values","title":"Pass values","text":"<p>Do not pass pointers as function arguments just to save a few bytes. If a function reads its argument <code>x</code> only as <code>*x</code> throughout, then the argument shouldn\u2019t be a pointer. Common instances of this include passing a pointer to a string (<code>*string</code>) or a pointer to an interface value (<code>*io.Reader</code>). In both cases, the value itself is a fixed size and can be passed directly.</p> <p>This advice does not apply to large structs, or even small structs that may increase in size. In particular, protocol buffer messages should generally be handled by pointer rather than by value. The pointer type satisfies the <code>proto.Message</code> interface (accepted by <code>proto.Marshal</code>, <code>protocmp.Transform</code>, etc.), and protocol buffer messages can be quite large and often grow larger over time.</p> <p></p>"},{"location":"knowledge/programming_languages/go/go_style/decisions/#receiver-type","title":"Receiver type","text":"<p>A method receiver can be passed either as a value or a pointer, just as if it were a regular function parameter. The choice between the two is based on which method set(s) the method should be a part of.</p> <p>Correctness wins over speed or simplicity. There are cases where you must use a pointer value. In other cases, pick pointers for large types or as future-proofing if you don\u2019t have a good sense of how the code will grow, and use values for simple plain old data.</p> <p>The list below spells out each case in further detail:</p> <ul> <li> <p>If the receiver is a slice and the method doesn\u2019t reslice or reallocate the     slice, use a value rather than a pointer.</p> <p>```go // Good: type Buffer []byte</p> <p>func (b Buffer) Len() int { return len(b) } ```</p> </li> <li> <p>If the method needs to mutate the receiver, the receiver must be a pointer.</p> <p>```go // Good: type Counter int</p> <p>func (c Counter) Inc() { c++ }</p> <p>// See https://pkg.go.dev/container/heap. type Queue []Item</p> <p>func (q Queue) Push(x Item) { q = append([]Item{x}, *q\u2026) } ```</p> </li> <li> <p>If the receiver is a struct containing fields that     cannot safely be copied, use a pointer receiver. Common examples     are [<code>sync.Mutex</code>] and other synchronization types.</p> <p>```go // Good: type Counter struct {     mu    sync.Mutex     total int }</p> <p>func (c *Counter) Inc() {     c.mu.Lock()     defer c.mu.Unlock()     c.total++ } ```</p> <p>Tip: Check the type\u2019s Godoc for information about whether it is safe or unsafe to copy.</p> </li> <li> <p>If the receiver is a \u201clarge\u201d struct or array, a pointer receiver may be more     efficient. Passing a struct is equivalent to passing all of its fields or     elements as arguments to the method. If that seems too large to     pass by value, a pointer is a good choice.</p> </li> <li> <p>For methods that will call or run concurrently with other functions that     modify the receiver, use a value if those modifications should not be     visible to your method; otherwise use a pointer.</p> </li> <li> <p>If the receiver is a struct or array, any of whose elements is a pointer to     something that may be mutated, prefer a pointer receiver to make the     intention of mutability clear to the reader.</p> <p>```go // Good: type Counter struct {     m *Metric }</p> <p>func (c *Counter) Inc() {     c.m.Add(1) } ```</p> </li> <li> <p>If the receiver is a built-in type, such as an integer or a string, that     does not need to be modified, use a value.</p> <p>```go // Good: type User string</p> <p>func (u User) String() { return string(u) } ```</p> </li> <li> <p>If the receiver is a map, function, or channel, use a value rather than a     pointer.</p> <p>```go // Good: // See https://pkg.go.dev/net/http#Header. type Header map[string][]string</p> <p>func (h Header) Add(key, value string) { / omitted / } ```</p> </li> <li> <p>If the receiver is a \u201csmall\u201d array or struct that is naturally a value type     with no mutable fields and no pointers, a value receiver is usually the     right choice.</p> <p>```go // Good: // See https://pkg.go.dev/time#Time. type Time struct { / omitted / }</p> <p>func (t Time) Add(d Duration) Time { / omitted / } ```</p> </li> <li> <p>When in doubt, use a pointer receiver.</p> </li> </ul> <p>As a general guideline, prefer to make the methods for a type either all pointer methods or all value methods.</p> <p>Note: There is a lot of misinformation about whether passing a value or a pointer to a function can affect performance. The compiler can choose to pass pointers to values on the stack as well as copying values on the stack, but these considerations should not outweigh the readability and correctness of the code in most circumstances. When the performance does matter, it is important to profile both approaches with a realistic benchmark before deciding that one approach outperforms the other.</p> <p></p>"},{"location":"knowledge/programming_languages/go/go_style/decisions/#switch-and-break","title":"<code>switch</code> and <code>break</code>","text":"<p>Do not use <code>break</code> statements without target labels at the ends of <code>switch</code> clauses; they are redundant. Unlike in C and Java, <code>switch</code> clauses in Go automatically break, and a <code>fallthrough</code> statement is needed to achieve the C-style behavior. Use a comment rather than <code>break</code> if you want to clarify the purpose of an empty clause.</p> <pre><code>// Good:\nswitch x {\ncase \"A\", \"B\":\n    buf.WriteString(x)\ncase \"C\":\n    // handled outside of the switch statement\ndefault:\n    return fmt.Errorf(\"unknown value: %q\", x)\n}\n</code></pre> <pre><code>// Bad:\nswitch x {\ncase \"A\", \"B\":\n    buf.WriteString(x)\n    break // this break is redundant\ncase \"C\":\n    break // this break is redundant\ndefault:\n    return fmt.Errorf(\"unknown value: %q\", x)\n}\n</code></pre> <p>Note: If a <code>switch</code> clause is within a <code>for</code> loop, using <code>break</code> within <code>switch</code> does not exit the enclosing <code>for</code> loop.</p> <p><code>go for {   switch x {   case \"A\":      break // exits the switch, not the loop   } }</code></p> <p>To escape the enclosing loop, use a label on the <code>for</code> statement:</p> <p><code>go loop:   for {     switch x {     case \"A\":        break loop // exits the loop     }   }</code></p> <p></p>"},{"location":"knowledge/programming_languages/go/go_style/decisions/#synchronous-functions","title":"Synchronous functions","text":"<p>Synchronous functions return their results directly and finish any callbacks or channel operations before returning. Prefer synchronous functions over asynchronous functions.</p> <p>Synchronous functions keep goroutines localized within a call. This helps to reason about their lifetimes, and avoid leaks and data races. Synchronous functions are also easier to test, since the caller can pass an input and check the output without the need for polling or synchronization.</p> <p>If necessary, the caller can add concurrency by calling the function in a separate goroutine. However, it is quite difficult (sometimes impossible) to remove unnecessary concurrency at the caller side.</p> <p>See also:</p> <ul> <li>\u201cRethinking Classical Concurrency Patterns\u201d, talk by Bryan Mills:     slides, video</li> </ul> <p></p>"},{"location":"knowledge/programming_languages/go/go_style/decisions/#type-aliases","title":"Type aliases","text":"<p>Use a type definition, <code>type T1 T2</code>, to define a new type. Use a type alias, <code>type T1 = T2</code>, to refer to an existing type without defining a new type. Type aliases are rare; their primary use is to aid migrating packages to new source code locations. Don\u2019t use type aliasing when it is not needed.</p> <p></p>"},{"location":"knowledge/programming_languages/go/go_style/decisions/#use-q","title":"Use %q","text":"<p>Go\u2019s format functions (<code>fmt.Printf</code> etc.) have a <code>%q</code> verb which prints strings inside double-quotation marks.</p> <pre><code>// Good:\nfmt.Printf(\"value %q looks like English text\", someText)\n</code></pre> <p>Prefer using <code>%q</code> over doing the equivalent manually, using <code>%s</code>:</p> <pre><code>// Bad:\nfmt.Printf(\"value \\\"%s\\\" looks like English text\", someText)\n// Avoid manually wrapping strings with single-quotes too:\nfmt.Printf(\"value '%s' looks like English text\", someText)\n</code></pre> <p>Using <code>%q</code> is recommended in output intended for humans where the input value could possibly be empty or contain control characters. It can be very hard to notice a silent empty string, but <code>\"\"</code> stands out clearly as such.</p> <p></p>"},{"location":"knowledge/programming_languages/go/go_style/decisions/#use-any","title":"Use any","text":"<p>Go 1.18 introduces an <code>any</code> type as an alias to <code>interface{}</code>. Because it is an alias, <code>any</code> is equivalent to <code>interface{}</code> in many situations and in others it is easily interchangeable via an explicit conversion. Prefer to use <code>any</code> in new code.</p>"},{"location":"knowledge/programming_languages/go/go_style/decisions/#common-libraries","title":"Common libraries","text":""},{"location":"knowledge/programming_languages/go/go_style/decisions/#flags","title":"Flags","text":"<p>Go programs in the Google codebase use an internal variant of the [standard <code>flag</code> package]. It has a similar interface but interoperates well with internal Google systems. Flag names in Go binaries should prefer to use underscores to separate words, though the variables that hold a flag\u2019s value should follow the standard Go name style (mixed caps). Specifically, the flag name should be in snake case, and the variable name should be the equivalent name in camel case.</p> <pre><code>// Good:\nvar (\n    pollInterval = flag.Duration(\"poll_interval\", time.Minute, \"Interval to use for polling.\")\n)\n</code></pre> <pre><code>// Bad:\nvar (\n    poll_interval = flag.Int(\"pollIntervalSeconds\", 60, \"Interval to use for polling in seconds.\")\n)\n</code></pre> <p>Flags must only be defined in <code>package main</code> or equivalent.</p> <p>General-purpose packages should be configured using Go APIs, not by punching through to the command-line interface; don\u2019t let importing a library export new flags as a side effect. That is, prefer explicit function arguments or struct field assignment or much less frequently and under the strictest of scrutiny exported global variables. In the extremely rare case that it is necessary to break this rule, the flag name must clearly indicate the package that it configures.</p> <p>If your flags are global variables, place them in their own <code>var</code> group, following the imports section.</p> <p>There is additional discussion around best practices for creating complex CLIs with subcommands.</p> <p>See also:</p> <ul> <li>Tip of the Week #45: Avoid Flags, Especially in Library Code</li> <li>Go Tip #10: Configuration Structs and Flags</li> <li>Go Tip #80: Dependency Injection Principles</li> </ul> <p></p>"},{"location":"knowledge/programming_languages/go/go_style/decisions/#logging","title":"Logging","text":"<p>Go programs in the Google codebase use a variant of the [standard <code>log</code> package]. It has a similar but more powerful interface and interoperates well with internal Google systems. An open source version of this library is available as [package <code>glog</code>], and open source Google projects may use that, but this guide refers to it as <code>log</code> throughout.</p> <p>Note: For abnormal program exits, this library uses <code>log.Fatal</code> to abort with a stacktrace, and <code>log.Exit</code> to stop without one. There is no <code>log.Panic</code> function as in the standard library.</p> <p>Tip: <code>log.Info(v)</code> is equivalent <code>log.Infof(\"%v\", v)</code>, and the same goes for other logging levels. Prefer the non-formatting version when you have no formatting to do.</p> <p>See also:</p> <ul> <li>Best practices on logging errors and     custom verbosily levels</li> <li>When and how to use the log package to     stop the program</li> </ul> <p></p>"},{"location":"knowledge/programming_languages/go/go_style/decisions/#contexts","title":"Contexts","text":"<p>Values of the [<code>context.Context</code>] type carry security credentials, tracing information, deadlines, and cancellation signals across API and process boundaries. Unlike C++ and Java, which in the Google codebase use thread-local storage, Go programs pass contexts explicitly along the entire function call chain from incoming RPCs and HTTP requests to outgoing requests.</p> <p>When passed to a function or method, <code>context.Context</code> is always the first parameter.</p> <pre><code>func F(ctx context.Context /* other arguments */) {}\n</code></pre> <p>Exceptions are:</p> <ul> <li>In an HTTP handler, where the context comes from     <code>req.Context()</code>.</li> <li> <p>In streaming RPC methods, where the context comes from the stream.</p> <p>Code using gRPC streaming accesses a context from a <code>Context()</code> method in the generated server type, which implements <code>grpc.ServerStream</code>. See gRPC Generated Code documentation.</p> </li> <li> <p>In entrypoint functions (see below for examples of such functions), use     <code>context.Background()</code>.</p> <ul> <li>In binary targets: <code>main</code></li> <li>In general purpose code and libraries: <code>init</code></li> <li>In tests: <code>TestXXX</code>, <code>BenchmarkXXX</code>, <code>FuzzXXX</code></li> </ul> </li> </ul> <p>Note: It is very rare for code in the middle of a callchain to require creating a base context of its own using <code>context.Background()</code>. Always prefer taking a context from your caller, unless it\u2019s the wrong context.</p> <p>You may come across server libraries (the implementation of Stubby, gRPC, or HTTP in Google\u2019s server framework for Go) that construct a fresh context object per request. These contexts are immediately filled with information from the incoming request, so that when passed to the request handler, the context\u2019s attached values have been propagated to it across the network boundary from the client caller. Moreover, these contexts\u2019 lifetimes are scoped to that of the request: when the request is finished, the context is cancelled.</p> <p>Unless you are implementing a server framework, you shouldn\u2019t create contexts with <code>context.Background()</code> in library code. Instead, prefer using context detachment, which is mentioned below, if there is an existing context available. If you think you do need <code>context.Background()</code> outside of entrypoint functions, discuss it with the Google Go style mailing list before committing to an implementation.</p> <p>The convention that <code>context.Context</code> comes first in functions also applies to test helpers.</p> <pre><code>// Good:\nfunc readTestFile(ctx context.Context, t *testing.T, path string) string {}\n</code></pre> <p>Do not add a context member to a struct type. Instead, add a context parameter to each method on the type that needs to pass it along. The one exception is for methods whose signature must match an interface in the standard library or in a third party library outside Google\u2019s control. Such cases are very rare, and should be discussed with the Google Go style mailing list before implementation and readability review.</p> <p>Code in the Google codebase that must spawn background operations which can run after the parent context has been cancelled can use an internal package for detachment. Follow issue #40221 for discussions on an open source alternative.</p> <p>Since contexts are immutable, it is fine to pass the same context to multiple calls that share the same deadline, cancellation signal, credentials, parent trace, and so on.</p> <p>See also:</p> <ul> <li>Contexts and structs</li> </ul> <p></p>"},{"location":"knowledge/programming_languages/go/go_style/decisions/#custom-contexts","title":"Custom contexts","text":"<p>Do not create custom context types or use interfaces other than <code>context.Context</code> in function signatures. There are no exceptions to this rule.</p> <p>Imagine if every team had a custom context. Every function call from package <code>p</code> to package <code>q</code> would have to determine how to convert a <code>p.Context</code> to a <code>q.Context</code>, for all pairs of packages <code>p</code> and <code>q</code>. This is impractical and error-prone for humans, and it makes automated refactorings that add context parameters nearly impossible.</p> <p>If you have application data to pass around, put it in a parameter, in the receiver, in globals, or in a <code>Context</code> value if it truly belongs there. Creating your own context type is not acceptable since it undermines the ability of the Go team to make Go programs work properly in production.</p> <p></p>"},{"location":"knowledge/programming_languages/go/go_style/decisions/#cryptorand","title":"crypto/rand","text":"<p>Do not use package <code>math/rand</code> to generate keys, even throwaway ones. If unseeded, the generator is completely predictable. Seeded with <code>time.Nanoseconds()</code>, there are just a few bits of entropy. Instead, use <code>crypto/rand</code>\u2019s Reader, and if you need text, print to hexadecimal or base64.</p> <pre><code>// Good:\nimport (\n    \"crypto/rand\"\n    // \"encoding/base64\"\n    // \"encoding/hex\"\n    \"fmt\"\n\n    // ...\n)\n\nfunc Key() string {\n    buf := make([]byte, 16)\n    if _, err := rand.Read(buf); err != nil {\n        log.Fatalf(\"Out of randomness, should never happen: %v\", err)\n    }\n    return fmt.Sprintf(\"%x\", buf)\n    // or hex.EncodeToString(buf)\n    // or base64.StdEncoding.EncodeToString(buf)\n}\n</code></pre> <p>Note: <code>log.Fatalf</code> is not the standard library log. See [#logging].</p> <p></p>"},{"location":"knowledge/programming_languages/go/go_style/decisions/#useful-test-failures","title":"Useful test failures","text":"<p>It should be possible to diagnose a test\u2019s failure without reading the test\u2019s source. Tests should fail with helpful messages detailing:</p> <ul> <li>What caused the failure</li> <li>What inputs resulted in an error</li> <li>The actual result</li> <li>What was expected</li> </ul> <p>Specific conventions for achieving this goal are outlined below.</p> <p></p>"},{"location":"knowledge/programming_languages/go/go_style/decisions/#assertion-libraries","title":"Assertion libraries","text":"<p>Do not create \u201cassertion libraries\u201d as helpers for testing.</p> <p>Assertion libraries are libraries that attempt to combine the validation and production of failure messages within a test (though the same pitfalls can apply to other test helpers as well). For more on the distinction between test helpers and assertion libraries, see best practices.</p> <pre><code>// Bad:\nvar obj BlogPost\n\nassert.IsNotNil(t, \"obj\", obj)\nassert.StringEq(t, \"obj.Type\", obj.Type, \"blogPost\")\nassert.IntEq(t, \"obj.Comments\", obj.Comments, 2)\nassert.StringNotEq(t, \"obj.Body\", obj.Body, \"\")\n</code></pre> <p>Assertion libraries tend to either stop the test early (if <code>assert</code> calls <code>t.Fatalf</code> or <code>panic</code>) or omit relevant information about what the test got right:</p> <pre><code>// Bad:\npackage assert\n\nfunc IsNotNil(t *testing.T, name string, val interface{}) {\n    if val == nil {\n        t.Fatalf(\"data %s = nil, want not nil\", name)\n    }\n}\n\nfunc StringEq(t *testing.T, name, got, want string) {\n    if got != want {\n        t.Fatalf(\"data %s = %q, want %q\", name, got, want)\n    }\n}\n</code></pre> <p>Complex assertion functions often do not provide useful failure messages and context that exists within the test function. Too many assertion functions and libraries lead to a fragmented developer experience: which assertion library should I use, what style of output format should it emit, etc.? Fragmentation produces unnecessary confusion, especially for library maintainers and authors of large-scale changes, who are responsible for fixing potential downstream breakages. Instead of creating a domain-specific language for testing, use Go itself.</p> <p>Assertion libraries often factor out comparisons and equality checks. Prefer using standard libraries such as [<code>cmp</code>] and [<code>fmt</code>] instead:</p> <pre><code>// Good:\nvar got BlogPost\n\nwant := BlogPost{\n    Comments: 2,\n    Body:     \"Hello, world!\",\n}\n\nif !cmp.Equal(got, want) {\n    t.Errorf(\"blog post = %v, want = %v\", got, want)\n}\n</code></pre> <p>For more domain-specific comparison helpers, prefer returning a value or an error that can be used in the test\u2019s failure message instead of passing <code>*testing.T</code> and calling its error reporting methods:</p> <pre><code>// Good:\nfunc postLength(p BlogPost) int { return len(p.Body) }\n\nfunc TestBlogPost_VeritableRant(t *testing.T) {\n    post := BlogPost{Body: \"I am Gunnery Sergeant Hartman, your senior drill instructor.\"}\n\n    if got, want := postLength(post), 60; got != want {\n        t.Errorf(\"length of post = %v, want %v\", got, want)\n    }\n}\n</code></pre> <p>Best Practice: Were <code>postLength</code> non-trivial, it would make sense to test it directly, independently of any tests that use it.</p> <p>See also:</p> <ul> <li>Equality comparison and diffs</li> <li>Print diffs</li> <li>For more on the distinction between test helpers and assertion helpers, see     best practices</li> </ul> <p></p>"},{"location":"knowledge/programming_languages/go/go_style/decisions/#identify-the-function","title":"Identify the function","text":"<p>In most tests, failure messages should include the name of the function that failed, even though it seems obvious from the name of the test function. Specifically, your failure message should be <code>YourFunc(%v) = %v, want %v</code> instead of just <code>got %v, want %v</code>.</p> <p></p>"},{"location":"knowledge/programming_languages/go/go_style/decisions/#identify-the-input","title":"Identify the input","text":"<p>In most tests, failure messages should include the function inputs if they are short. If the relevant properties of the inputs are not obvious (for example, because the inputs are large or opaque), you should name your test cases with a description of what\u2019s being tested and print the description as part of your error message.</p> <p></p>"},{"location":"knowledge/programming_languages/go/go_style/decisions/#got-before-want","title":"Got before want","text":"<p>Test outputs should include the actual value that the function returned before printing the value that was expected. A standard format for printing test outputs is <code>YourFunc(%v) = %v, want %v</code>. Where you would write \u201cactual\u201d and \u201cexpected\u201d, prefer using the words \u201cgot\u201d and \u201cwant\u201d, respectively.</p> <p>For diffs, directionality is less apparent, and as such it is important to include a key to aid in interpreting the failure. See the section on printing diffs. Whichever diff order you use in your failure messages, you should explicitly indicate it as a part of the failure message, because existing code is inconsistent about the ordering.</p> <p></p>"},{"location":"knowledge/programming_languages/go/go_style/decisions/#full-structure-comparisons","title":"Full structure comparisons","text":"<p>If your function returns a struct (or any data type with multiple fields such as slices, arrays, and maps), avoid writing test code that performs a hand-coded field-by-field comparison of the struct. Instead, construct the data that you\u2019re expecting your function to return, and compare directly using a deep comparison.</p> <p>Note: This does not apply if your data contains irrelevant fields that obscure the intention of the test.</p> <p>If your struct needs to be compared for approximate (or equivalent kind of semantic) equality or it contains fields that cannot be compared for equality (e.g., if one of the fields is an <code>io.Reader</code>), tweaking a [<code>cmp.Diff</code>] or [<code>cmp.Equal</code>] comparison with [<code>cmpopts</code>] options such as [<code>cmpopts.IgnoreInterfaces</code>] may meet your needs (example).</p> <p>If your function returns multiple return values, you don\u2019t need to wrap those in a struct before comparing them. Just compare the return values individually and print them.</p> <pre><code>// Good:\nval, multi, tail, err := strconv.UnquoteChar(`\\\"Fran &amp; Freddie's Diner\\\"`, '\"')\nif err != nil {\n  t.Fatalf(...)\n}\nif val != `\"` {\n  t.Errorf(...)\n}\nif multi {\n  t.Errorf(...)\n}\nif tail != `Fran &amp; Freddie's Diner\"` {\n  t.Errorf(...)\n}\n</code></pre> <p></p>"},{"location":"knowledge/programming_languages/go/go_style/decisions/#compare-stable-results","title":"Compare stable results","text":"<p>Avoid comparing results that may depend on output stability of a package that you do not own. Instead, the test should compare on semantically relevant information that is stable and resistant to changes in dependencies. For functionality that returns a formatted string or serialized bytes, it is generally not safe to assume that the output is stable.</p> <p>For example, [<code>json.Marshal</code>] can change (and has changed in the past) the specific bytes that it emits. Tests that perform string equality on the JSON string may break if the <code>json</code> package changes how it serializes the bytes. Instead, a more robust test would parse the contents of the JSON string and ensure that it is semantically equivalent to some expected data structure.</p> <p></p>"},{"location":"knowledge/programming_languages/go/go_style/decisions/#keep-going","title":"Keep going","text":"<p>Tests should keep going for as long as possible, even after a failure, in order to print out all of the failed checks in a single run. This way, a developer who is fixing the failing test doesn\u2019t have to re-run the test after fixing each bug to find the next bug.</p> <p>Prefer calling <code>t.Error</code> over <code>t.Fatal</code> for reporting a mismatch. When comparing several different properties of a function\u2019s output, use <code>t.Error</code> for each of those comparisons.</p> <p>Calling <code>t.Fatal</code> is primarily useful for reporting an unexpected error condition, when subsequent comparison failures are not going to be meaningful.</p> <p>For table-driven test, consider using subtests and use <code>t.Fatal</code> rather than <code>t.Error</code> and <code>continue</code>. See also GoTip #25: Subtests: Making Your Tests Lean.</p> <p>Best practice: For more discussion about when <code>t.Fatal</code> should be used, see best practices.</p> <p></p>"},{"location":"knowledge/programming_languages/go/go_style/decisions/#equality-comparison-and-diffs","title":"Equality comparison and diffs","text":"<p>The <code>==</code> operator evaluates equality using language-defined comparisons. Scalar values (numbers, booleans, etc) are compared based on their values, but only some structs and interfaces can be compared in this way. Pointers are compared based on whether they point to the same variable, rather than based on the equality of the values to which they point.</p> <p>The [<code>cmp</code>] package can compare more complex data structures not appropriately handled by <code>==</code>, such as slices. Use [<code>cmp.Equal</code>] for equality comparison and [<code>cmp.Diff</code>] to obtain a human-readable diff between objects.</p> <pre><code>// Good:\nwant := &amp;Doc{\n    Type:     \"blogPost\",\n    Comments: 2,\n    Body:     \"This is the post body.\",\n    Authors:  []string{\"isaac\", \"albert\", \"emmy\"},\n}\nif !cmp.Equal(got, want) {\n    t.Errorf(\"AddPost() = %+v, want %+v\", got, want)\n}\n</code></pre> <p>As a general-purpose comparison library, <code>cmp</code> may not know how to compare certain types. For example, it can only compare protocol buffer messages if passed the [<code>protocmp.Transform</code>] option.</p> <pre><code>// Good:\nif diff := cmp.Diff(want, got, protocmp.Transform()); diff != \"\" {\n    t.Errorf(\"Foo() returned unexpected difference in protobuf messages (-want +got):\\n%s\", diff)\n}\n</code></pre> <p>Although the <code>cmp</code> package is not part of the Go standard library, it is maintained by the Go team and should produce stable equality results over time. It is user-configurable and should serve most comparison needs.</p> <p>Existing code may make use of the following older libraries, and may continue using them for consistency:</p> <ul> <li>[<code>pretty</code>] produces aesthetically pleasing difference reports. However, it     quite deliberately considers values that have the same visual representation     as equal. In particular, <code>pretty</code> does not catch differences between nil     slices and empty ones, is not sensitive to different interface     implementations with identical fields, and it is possible to use a nested     map as the basis for comparison with a struct value. It also serializes the     entire value into a string before producing a diff, and as such is not a     good choice for comparing large values. By default, it compares unexported     fields, which makes it sensitive to changes in implementation details in     your dependencies. For this reason, it is not appropriate to use <code>pretty</code> on     protobuf messages.</li> </ul> <p>Prefer using <code>cmp</code> for new code, and it is worth considering updating older code to use <code>cmp</code> where and when it is practical to do so.</p> <p>Older code may use the standard library <code>reflect.DeepEqual</code> function to compare complex structures. <code>reflect.DeepEqual</code> should not be used for checking equality, as it is sensitive to changes in unexported fields and other implementation details. Code that is using <code>reflect.DeepEqual</code> should be updated to one of the above libraries.</p> <p>Note: The <code>cmp</code> package is designed for testing, rather than production use. As such, it may panic when it suspects that a comparison is performed incorrectly to provide instruction to users on how to improve the test to be less brittle. Given cmp\u2019s propensity towards panicking, it makes it unsuitable for code that is used in production as a spurious panic may be fatal.</p> <p></p>"},{"location":"knowledge/programming_languages/go/go_style/decisions/#level-of-detail","title":"Level of detail","text":"<p>The conventional failure message, which is suitable for most Go tests, is <code>YourFunc(%v) = %v, want %v</code>. However, there are cases that may call for more or less detail:</p> <ul> <li>Tests performing complex interactions should describe the interactions too.     For example, if the same <code>YourFunc</code> is called several times, identify which     call failed the test. If it\u2019s important to know any extra state of the     system, include that in the failure output (or at least in the logs).</li> <li>If the data is a complex struct with significant boilerplate, it is     acceptable to describe only the important parts in the message, but do not     overly obscure the data.</li> <li>Setup failures do not require the same level of detail. If a test helper     populates a Spanner table but Spanner was down, you probably don\u2019t need to     include which test input you were going to store in the database.     <code>t.Fatalf(\"Setup: Failed to set up test database: %s\", err)</code> is usually     helpful enough to resolve the issue.</li> </ul> <p>Tip: Make your failure mode trigger during development. Review what the failure message looks like and whether a maintainer can effectively deal with the failure.</p> <p>There are some techniques for reproducing test inputs and outputs clearly:</p> <ul> <li>When printing string data, <code>%q</code> is often useful to     emphasize that the value is important and to more easily spot bad values.</li> <li>When printing (small) structs, <code>%+v</code> can be more useful than <code>%v</code>.</li> <li>When validation of larger values fails, printing a diff can     make it easier to understand the failure.</li> </ul> <p></p>"},{"location":"knowledge/programming_languages/go/go_style/decisions/#print-diffs","title":"Print diffs","text":"<p>If your function returns large output then it can be hard for someone reading the failure message to find the differences when your test fails. Instead of printing both the returned value and the wanted value, make a diff.</p> <p>To compute diffs for such values, <code>cmp.Diff</code> is preferred, particularly for new tests and new code, but other tools may be used. See types of equality for guidance regarding the strengths and weaknesses of each function.</p> <ul> <li> <p>[<code>cmp.Diff</code>]</p> </li> <li> <p>[<code>pretty.Compare</code>]</p> </li> </ul> <p>You can use the [<code>diff</code>] package to compare multi-line strings or lists of strings. You can use this as a building block for other kinds of diffs.</p> <p>Add some text to your failure message explaining the direction of the diff.</p> <ul> <li> <p>Something like <code>diff (-want +got)</code> is good when you\u2019re using the <code>cmp</code>,     <code>pretty</code>, and <code>diff</code> packages (if you pass <code>(want, got)</code> to the function),     because the <code>-</code> and <code>+</code> that you add to your format string will match the     <code>-</code> and <code>+</code> that actually appear at the beginning of the diff lines. If you     pass <code>(got, want)</code> to your function, the correct key would be <code>(-got +want)</code>     instead.</p> </li> <li> <p>The <code>messagediff</code> package uses a different output format, so the message     <code>diff (want -&gt; got)</code> is appropriate when you\u2019re using it (if you pass     <code>(want, got)</code> to the function), because the direction of the arrow will     match the direction of the arrow in the \u201cmodified\u201d lines.</p> </li> </ul> <p>The diff will span multiple lines, so you should print a newline before you print the diff.</p> <p></p>"},{"location":"knowledge/programming_languages/go/go_style/decisions/#test-error-semantics","title":"Test error semantics","text":"<p>When a unit test performs string comparisons or uses a vanilla <code>cmp</code> to check that particular kinds of errors are returned for particular inputs, you may find that your tests are brittle if any of those error messages are reworded in the future. Since this has the potential to turn your unit test into a change detector (see TotT: Change-Detector Tests Considered Harmful ), don\u2019t use string comparison to check what type of error your function returns. However, it is permissible to use string comparisons to check that error messages coming from the package under test satisfy certain properties, for example, that it includes the parameter name.</p> <p>Error values in Go typically have a component intended for human eyes and a component intended for semantic control flow. Tests should seek to only test semantic information that can be reliably observed, rather than display information that is intended for human debugging, as this is often subject to future changes. For guidance on constructing errors with semantic meaning see best-practices regarding errors. If an error with insufficient semantic information is coming from a dependency outside your control, consider filing a bug against the owner to help improve the API, rather than relying on parsing the error message.</p> <p>Within unit tests, it is common to only care whether an error occurred or not. If so, then it is sufficient to only test whether the error was non-nil when you expected an error. If you would like to test that the error semantically matches some other error, then consider using <code>cmp</code> with [<code>cmpopts.EquateErrors</code>].</p> <p>Note: If a test uses [<code>cmpopts.EquateErrors</code>] but all of its <code>wantErr</code> values are either <code>nil</code> or <code>cmpopts.AnyError</code>, then using <code>cmp</code> is unnecessary mechanism. Simplify the code by making the want field a <code>bool</code>. You can then use a simple comparison with <code>!=</code>.</p> <p><code>go // Good: gotErr := f(test.input) != nil if gotErr != test.wantErr {     t.Errorf(\"f(%q) returned err = %v, want error presence = %v\", test.input, gotErr, test.wantErr) }</code></p> <p>See also GoTip #13: Designing Errors for Checking.</p> <p></p>"},{"location":"knowledge/programming_languages/go/go_style/decisions/#test-structure","title":"Test structure","text":""},{"location":"knowledge/programming_languages/go/go_style/decisions/#subtests","title":"Subtests","text":"<p>The standard Go testing library offers a facility to define subtests. This allows flexibility in setup and cleanup, controlling parallelism, and test filtering. Subtests can be useful (particularly for table-driven tests), but using them is not mandatory. See also the Go blog post about subtests.</p> <p>Subtests should not depend on the execution of other cases for success or initial state, because subtests are expected to be able to be run individually with using <code>go test -run</code> flags or with Bazel test filter expressions.</p> <p></p>"},{"location":"knowledge/programming_languages/go/go_style/decisions/#subtest-names","title":"Subtest names","text":"<p>Name your subtest such that it is readable in test output and useful on the command line for users of test filtering. When you use <code>t.Run</code> to create a subtest, the first argument is used as a descriptive name for the test. To ensure that test results are legible to humans reading the logs, choose subtest names that will remain useful and readable after escaping. Think of subtest names more like a function identifier than a prose description. The test runner replaces spaces with underscores, and escapes non-printing characters. If your test data benefits from a longer description, consider putting the description in a separate field (perhaps to be printed using <code>t.Log</code> or alongside failure messages).</p> <p>Subtests may be run individually using flags to the Go test runner or Bazel test filter, so choose descriptive names that are also easy to type.</p> <p>Warning: Slash characters are particularly unfriendly in subtest names, since they have special meaning for test filters.</p> <p>```sh</p> <p>To identify the inputs of the function, include them in the test\u2019s failure messages, where they won\u2019t be escaped by the test runner.</p> <pre><code>// Good:\nfunc TestTranslate(t *testing.T) {\n    data := []struct {\n        name, desc, srcLang, dstLang, srcText, wantDstText string\n    }{\n        {\n            name:        \"hu=en_bug-1234\",\n            desc:        \"regression test following bug 1234. contact: cleese\",\n            srcLang:     \"hu\",\n            srcText:     \"cigarett\u00e1t \u00e9s egy \u00f6ngy\u00fajt\u00f3t k\u00e9rek\",\n            dstLang:     \"en\",\n            wantDstText: \"cigarettes and a lighter please\",\n        }, // ...\n    }\n    for _, d := range data {\n        t.Run(d.name, func(t *testing.T) {\n            got := Translate(d.srcLang, d.dstLang, d.srcText)\n            if got != d.wantDstText {\n                t.Errorf(\"%s\\nTranslate(%q, %q, %q) = %q, want %q\",\n                    d.desc, d.srcLang, d.dstLang, d.srcText, got, d.wantDstText)\n            }\n        })\n    }\n}\n</code></pre> <p>Here are a few examples of things to avoid:</p> <pre><code>// Bad:\n// Too wordy.\nt.Run(\"check that there is no mention of scratched records or hovercrafts\", ...)\n// Slashes cause problems on the command line.\nt.Run(\"AM/PM confusion\", ...)\n</code></pre> <p></p>"},{"location":"knowledge/programming_languages/go/go_style/decisions/#bad","title":"Bad:","text":""},{"location":"knowledge/programming_languages/go/go_style/decisions/#assuming-testtime-and-trunamericanew_york","title":"Assuming TestTime and t.Run(\u201cAmerica/New_York\u201d, \u2026)","text":"<p>bazel test :mytest \u2013test_filter=\u201dTime/New_York\u201d    # Runs nothing! bazel test :mytest \u2013test_filter=\u201dTime//New_York\u201d   # Correct, but awkward. ```</p>"},{"location":"knowledge/programming_languages/go/go_style/decisions/#table-driven-tests","title":"Table-driven tests","text":"<p>Use table-driven tests when many different test cases can be tested using similar testing logic.</p> <ul> <li>When testing whether the actual output of a function is equal to the     expected output. For example, the many [tests of <code>fmt.Sprintf</code>] or the     minimal snippet below.</li> <li>When testing whether the outputs of a function always conform to the same     set of invariants. For example, [tests for <code>net.Dial</code>].</li> </ul> <p>Here is the minimal structure of a table-driven test, copied from the standard <code>strings</code> library. If needed, you may use different names, move the test slice into the test function, or add extra facilities such as subtests or setup and cleanup functions. Always keep useful test failures in mind.</p> <pre><code>// Good:\nvar compareTests = []struct {\n    a, b string\n    i    int\n}{\n    {\"\", \"\", 0},\n    {\"a\", \"\", 1},\n    {\"\", \"a\", -1},\n    {\"abc\", \"abc\", 0},\n    {\"ab\", \"abc\", -1},\n    {\"abc\", \"ab\", 1},\n    {\"x\", \"ab\", 1},\n    {\"ab\", \"x\", -1},\n    {\"x\", \"a\", 1},\n    {\"b\", \"x\", -1},\n    // test runtime\u00b7memeq's chunked implementation\n    {\"abcdefgh\", \"abcdefgh\", 0},\n    {\"abcdefghi\", \"abcdefghi\", 0},\n    {\"abcdefghi\", \"abcdefghj\", -1},\n}\n\nfunc TestCompare(t *testing.T) {\n    for _, tt := range compareTests {\n        cmp := Compare(tt.a, tt.b)\n        if cmp != tt.i {\n            t.Errorf(`Compare(%q, %q) = %v`, tt.a, tt.b, cmp)\n        }\n    }\n}\n</code></pre> <p>Note: The failure messages in this example above fulfill the guidance to identify the function and identify the input. There\u2019s no need to identify the row numerically.</p> <p>When some test cases need to be checked using different logic from other test cases, it is more appropriate to write multiple test functions, as explained in GoTip #50: Disjoint Table Tests. The logic of your test code can get difficult to understand when each entry in a table has its own different conditional logic to check each output for its inputs. If test cases have different logic but identical setup, a sequence of subtests within a single test function might make sense.</p> <p>You can combine table-driven tests with multiple test functions. For example, when testing that a function\u2019s output exactly matches the expected output and that the function returns a non-nil error for an invalid input, then writing two separate table-driven test functions is the best approach: one for normal non-error outputs, and one for error outputs.</p> <p></p>"},{"location":"knowledge/programming_languages/go/go_style/decisions/#data-driven-test-cases","title":"Data-driven test cases","text":"<p>Table test rows can sometimes become complicated, with the row values dictating conditional behavior inside the test case. The extra clarity from the duplication between the test cases is necessary for readability.</p> <pre><code>// Good:\ntype decodeCase struct {\n    name   string\n    input  string\n    output string\n    err    error\n}\n\nfunc TestDecode(t *testing.T) {\n    // setupCodex is slow as it creates a real Codex for the test.\n    codex := setupCodex(t)\n\n    var tests []decodeCase // rows omitted for brevity\n\n    for _, test := range tests {\n        t.Run(test.name, func(t *testing.T) {\n            output, err := Decode(test.input, codex)\n            if got, want := output, test.output; got != want {\n                t.Errorf(\"Decode(%q) = %v, want %v\", test.input, got, want)\n            }\n            if got, want := err, test.err; !cmp.Equal(got, want) {\n                t.Errorf(\"Decode(%q) err %q, want %q\", test.input, got, want)\n            }\n        })\n    }\n}\n\nfunc TestDecodeWithFake(t *testing.T) {\n    // A fakeCodex is a fast approximation of a real Codex.\n    codex := newFakeCodex()\n\n    var tests []decodeCase // rows omitted for brevity\n\n    for _, test := range tests {\n        t.Run(test.name, func(t *testing.T) {\n            output, err := Decode(test.input, codex)\n            if got, want := output, test.output; got != want {\n                t.Errorf(\"Decode(%q) = %v, want %v\", test.input, got, want)\n            }\n            if got, want := err, test.err; !cmp.Equal(got, want) {\n                t.Errorf(\"Decode(%q) err %q, want %q\", test.input, got, want)\n            }\n        })\n    }\n}\n</code></pre> <p>In the counterexample below, note how hard it is to distinguish between which type of <code>Codex</code> is used per test case in the case setup. (The highlighted parts run afoul of the advice from TotT: Data Driven Traps! .)</p> <pre><code>// Bad:\ntype decodeCase struct {\n  name   string\n  input  string\n  codex  testCodex\n  output string\n  err    error\n}\n\ntype testCodex int\n\nconst (\n  fake testCodex = iota\n  prod\n)\n\nfunc TestDecode(t *testing.T) {\n  var tests []decodeCase // rows omitted for brevity\n\n  for _, test := tests {\n    t.Run(test.name, func(t *testing.T) {\n      var codex Codex\n      switch test.codex {\n      case fake:\n        codex = newFakeCodex()\n      case prod:\n        codex = setupCodex(t)\n      default:\n        t.Fatalf(\"unknown codex type: %v\", codex)\n      }\n      output, err := Decode(test.input, codex)\n      if got, want := output, test.output; got != want {\n        t.Errorf(\"Decode(%q) = %q, want %q\", test.input, got, want)\n      }\n      if got, want := err, test.err; !cmp.Equal(got, want) {\n        t.Errorf(\"Decode(%q) err %q, want %q\", test.input, got, want)\n      }\n    })\n  }\n}\n</code></pre> <p></p>"},{"location":"knowledge/programming_languages/go/go_style/decisions/#identifying-the-row","title":"Identifying the row","text":"<p>Do not use the index of the test in the test table as a substitute for naming your tests or printing the inputs. Nobody wants to go through your test table and count the entries in order to figure out which test case is failing.</p> <pre><code>// Bad:\ntests := []struct {\n    input, want string\n}{\n    {\"hello\", \"HELLO\"},\n    {\"wORld\", \"WORLD\"},\n}\nfor i, d := range tests {\n    if strings.ToUpper(d.input) != d.want {\n        t.Errorf(\"failed on case #%d\", i)\n    }\n}\n</code></pre> <p>Add a test description to your test struct and print it along failure messages. When using subtests, your subtest name should be effective in identifying the row.</p> <p>Important: Even though <code>t.Run</code> scopes the output and execution, you must always identify the input. The table test row names must follow the subtest naming guidance.</p> <p></p>"},{"location":"knowledge/programming_languages/go/go_style/decisions/#test-helpers","title":"Test helpers","text":"<p>A test helper is a function that performs a setup or cleanup task. All failures that occur in test helpers are expected to be failures of the environment (not from the code under test) \u2014 for example when a test database cannot be started because there are no more free ports on this machine.</p> <p>If you pass a <code>*testing.T</code>, call [<code>t.Helper</code>] to attribute failures in the test helper to the line where the helper is called. This parameter should come after a context parameter, if present, and before any remaining parameters.</p> <pre><code>// Good:\nfunc TestSomeFunction(t *testing.T) {\n    golden := readFile(t, \"testdata/golden-result.txt\")\n    // ... tests against golden ...\n}\n\n// readFile returns the contents of a data file.\n// It must only be called from the same goroutine as started the test.\nfunc readFile(t *testing.T, filename string) string {\n    t.Helper()\n    contents, err := runfiles.ReadFile(filename)\n    if err != nil {\n        t.Fatal(err)\n    }\n    return string(contents)\n}\n</code></pre> <p>Do not use this pattern when it obscures the connection between a test failure and the conditions that led to it. Specifically, the guidance about assert libraries still applies, and [<code>t.Helper</code>] should not be used to implement such libraries.</p> <p>Tip: For more on the distinction between test helpers and assertion helpers, see best practices.</p> <p>Although the above refers to <code>*testing.T</code>, much of the advice stays the same for benchmark and fuzz helpers.</p> <p></p>"},{"location":"knowledge/programming_languages/go/go_style/decisions/#test-package","title":"Test package","text":""},{"location":"knowledge/programming_languages/go/go_style/decisions/#tests-in-the-same-package","title":"Tests in the same package","text":"<p>Tests may be defined in the same package as the code being tested.</p> <p>To write a test in the same package:</p> <ul> <li>Place the tests in a <code>foo_test.go</code> file</li> <li>Use <code>package foo</code> for the test file</li> <li>Do not explicitly import the package to be tested</li> </ul> <pre><code># Good:\ngo_library(\n    name = \"foo\",\n    srcs = [\"foo.go\"],\n    deps = [\n        ...\n    ],\n)\n\ngo_test(\n    name = \"foo_test\",\n    size = \"small\",\n    srcs = [\"foo_test.go\"],\n    library = \":foo\",\n    deps = [\n        ...\n    ],\n)\n</code></pre> <p>A test in the same package can access unexported identifiers in the package. This may enable better test coverage and more concise tests. Be aware that any examples declared in the test will not have the package names that a user will need in their code.</p> <p></p>"},{"location":"knowledge/programming_languages/go/go_style/decisions/#tests-in-a-different-package","title":"Tests in a different package","text":"<p>It is not always appropriate or even possible to define a test in the same package as the code being tested. In these cases, use a package name with the <code>_test</code> suffix. This is an exception to the \u201cno underscores\u201d rule to package names. For example:</p> <ul> <li> <p>If an integration test does not have an obvious library that it belongs to</p> <p>```go // Good: package gmailintegration_test</p> <p>import \u201ctesting\u201d ```</p> </li> <li> <p>If defining the tests in the same package results in circular dependencies</p> <p>```go // Good: package fireworks_test</p> <p>import (   \u201cfireworks\u201d   \u201cfireworkstestutil\u201d // fireworkstestutil also imports fireworks ) ```</p> </li> </ul> <p></p>"},{"location":"knowledge/programming_languages/go/go_style/decisions/#use-package-testing","title":"Use package <code>testing</code>","text":"<p>The Go standard library provides the [<code>testing</code> package]. This is the only testing framework permitted for Go code in the Google codebase. In particular, assertion libraries and third-party testing frameworks are not allowed.</p> <p>The <code>testing</code> package provides a minimal but complete set of functionality for writing good tests:</p> <ul> <li>Top-level tests</li> <li>Benchmarks</li> <li>Runnable examples</li> <li>Subtests</li> <li>Logging</li> <li>Failures and fatal failures</li> </ul> <p>These are designed to work cohesively with core language features like composite literal and if-with-initializer syntax to enable test authors to write [clear, readable, and maintainable tests].</p> <p></p>"},{"location":"knowledge/programming_languages/go/go_style/decisions/#non-decisions","title":"Non-decisions","text":"<p>A style guide cannot enumerate positive prescriptions for all matters, nor can it enumerate all matters about which it does not offer an opinion. That said, here are a few things where the readability community has previously debated and has not achieved consensus about.</p> <ul> <li>Local variable initialization with zero value. <code>var i int</code> and <code>i := 0</code>     are equivalent. See also initialization best practices.</li> <li>Empty composite literal vs. <code>new</code> or <code>make</code>. <code>&amp;File{}</code> and <code>new(File)</code>     are equivalent. So are <code>map[string]bool{}</code> and <code>make(map[string]bool)</code>. See     also composite declaration best practices.</li> <li>got, want argument ordering in cmp.Diff calls. Be locally consistent,     and include a legend in your failure message.</li> <li><code>errors.New</code> vs <code>fmt.Errorf</code> on non-formatted strings.     <code>errors.New(\"foo\")</code> and <code>fmt.Errorf(\"foo\")</code> may be used interchangeably.</li> </ul> <p>If there are special circumstances where they come up again, the readability mentor might make an optional comment, but in general the author is free to pick the style they prefer in the given situation.</p> <p>Naturally, if anything not covered by the style guide does need more discussion, authors are welcome to ask \u2013 either in the specific review, or on internal message boards.</p> <p>{% endraw %}</p>"},{"location":"knowledge/programming_languages/go/go_style/guide/","title":"Guide","text":""},{"location":"knowledge/programming_languages/go/go_style/guide/#go-style-guide","title":"Go Style Guide","text":"<p>https://google.github.io/styleguide/go/guide</p> <p>Overview | Guide | Decisions | Best practices</p> <p>{% raw %}</p> <p>Note: This is part of a series of documents that outline Go Style at Google. This document is normative and canonical. See the overview for more information.</p> <p></p>"},{"location":"knowledge/programming_languages/go/go_style/guide/#style-principles","title":"Style principles","text":"<p>There are a few overarching principles that summarize how to think about writing readable Go code. The following are attributes of readable code, in order of importance:</p> <ol> <li>Clarity: The code\u2019s purpose and rationale is clear to the reader.</li> <li>Simplicity: The code accomplishes its goal in the simplest way     possible.</li> <li>Concision: The code has a high signal-to-noise ratio.</li> <li>Maintainability: The code is written such that it can be easily     maintained.</li> <li>Consistency: The code is consistent with the broader Google codebase.</li> </ol> <p></p>"},{"location":"knowledge/programming_languages/go/go_style/guide/#clarity","title":"Clarity","text":"<p>The core goal of readability is to produce code that is clear to the reader.</p> <p>Clarity is primarily achieved with effective naming, helpful commentary, and efficient code organization.</p> <p>Clarity is to be viewed through the lens of the reader, not the author of the code. It is more important that code be easy to read than easy to write. Clarity in code has two distinct facets:</p> <ul> <li>What is the code actually doing?</li> <li>Why is the code doing what it does?</li> </ul> <p></p>"},{"location":"knowledge/programming_languages/go/go_style/guide/#what-is-the-code-actually-doing","title":"What is the code actually doing?","text":"<p>Go is designed such that it should be relatively straightforward to see what the code is doing. In cases of uncertainty or where a reader may require prior knowledge in order to understand the code, it is worth investing time in order to make the code\u2019s purpose clearer for future readers. For example, it may help to:</p> <ul> <li>Use more descriptive variable names</li> <li>Add additional commentary</li> <li>Break up the code with whitespace and comments</li> <li>Refactor the code into separate functions/methods to make it more modular</li> </ul> <p>There is no one-size-fits-all approach here, but it is important to prioritize clarity when developing Go code.</p> <p></p>"},{"location":"knowledge/programming_languages/go/go_style/guide/#why-is-the-code-doing-what-it-does","title":"Why is the code doing what it does?","text":"<p>The code\u2019s rationale is often sufficiently communicated by the names of variables, functions, methods, or packages. Where it is not, it is important to add commentary. The \u201cWhy?\u201d is especially important when the code contains nuances that a reader may not be familiar with, such as:</p> <ul> <li>A nuance in the language, e.g., a closure will be capturing a loop variable,     but the closure is many lines away</li> <li>A nuance of the business logic, e.g., an access control check that needs to     distinguish between the actual user and someone impersonating a user</li> </ul> <p>An API might require care to use correctly. For example, a piece of code may be intricate and difficult to follow for performance reasons, or a complex sequence of mathematical operations may use type conversions in an unexpected way. In these cases and many more, it is important that accompanying commentary and documentation explain these aspects so that future maintainers don\u2019t make a mistake and so that readers can understand the code without needing to reverse-engineer it.</p> <p>It is also important to be aware that some attempts to provide clarity (such as adding extra commentary) can actually obscure the code\u2019s purpose by adding clutter, restating what the code already says, contradicting the code, or adding maintenance burden to keep the comments up-to-date. Allow the code to speak for itself (e.g., by making the symbol names themselves self-describing) rather than adding redundant comments. It is often better for comments to explain why something is done, not what the code is doing.</p> <p>The Google codebase is largely uniform and consistent. It is often the case that code that stands out (e.g., by using an unfamiliar pattern) is doing so for a good reason, typically for performance. Maintaining this property is important to make it clear to readers where they should focus their attention when reading a new piece of code.</p> <p>The standard library contains many examples of this principle in action. Among them:</p> <ul> <li>Maintainer comments in     <code>package sort</code>.</li> <li>Good     runnable examples in the same package,     which benefit both users (they     show up in godoc) and maintainers     (they run as part of tests).</li> <li><code>strings.Cut</code> is only four lines of code,     but they improve the     clarity and correctness of callsites.</li> </ul> <p></p>"},{"location":"knowledge/programming_languages/go/go_style/guide/#simplicity","title":"Simplicity","text":"<p>Your Go code should be simple for those using, reading, and maintaining it.</p> <p>Go code should be written in the simplest way that accomplishes its goals, both in terms of behavior and performance. Within the Google Go codebase, simple code:</p> <ul> <li>Is easy to read from top to bottom</li> <li>Does not assume that you already know what it is doing</li> <li>Does not assume that you can memorize all of the preceding code</li> <li>Does not have unnecessary levels of abstraction</li> <li>Does not have names that call attention to something mundane</li> <li>Makes the propagation of values and decisions clear to the reader</li> <li>Has comments that explain why, not what, the code is doing to avoid future     deviation</li> <li>Has documentation that stands on its own</li> <li>Has useful errors and useful test failures</li> <li>May often be mutually exclusive with \u201cclever\u201d code</li> </ul> <p>Tradeoffs can arise between code simplicity and API usage simplicity. For example, it may be worthwhile to have the code be more complex so that the end user of the API may more easily call the API correctly. In contrast, it may also be worthwhile to leave a bit of extra work to the end user of the API so that the code remains simple and easy to understand.</p> <p>When code needs complexity, the complexity should be added deliberately. This is typically necessary if additional performance is required or where there are multiple disparate customers of a particular library or service. Complexity may be justified, but it should come with accompanying documentation so that clients and future maintainers are able to understand and navigate the complexity. This should be supplemented with tests and examples that demonstrate its correct usage, especially if there is both a \u201csimple\u201d and a \u201ccomplex\u201d way to use the code.</p> <p>This principle does not imply that complex code cannot or should not be written in Go or that Go code is not allowed to be complex. We strive for a codebase that avoids unnecessary complexity so that when complexity does appear, it indicates that the code in question requires care to understand and maintain. Ideally, there should be accompanying commentary that explains the rationale and identifies the care that should be taken. This often arises when optimizing code for performance; doing so often requires a more complex approach, like preallocating a buffer and reusing it throughout a goroutine lifetime. When a maintainer sees this, it should be a clue that the code in question is performance-critical, and that should influence the care that is taken when making future changes. If employed unnecessarily, on the other hand, this complexity is a burden on those who need to read or change the code in the future.</p> <p>If code turns out to be very complex when its purpose should be simple, this is often a signal to revisit the implementation to see if there is a simpler way to accomplish the same thing.</p> <p></p>"},{"location":"knowledge/programming_languages/go/go_style/guide/#least-mechanism","title":"Least mechanism","text":"<p>Where there are several ways to express the same idea, prefer the one that uses the most standard tools. Sophisticated machinery often exists, but should not be employed without reason. It is easy to add complexity to code as needed, whereas it is much harder to remove existing complexity after it has been found to be unnecessary.</p> <ol> <li>Aim to use a core language construct (for example a channel, slice, map,     loop, or struct) when sufficient for your use case.</li> <li>If there isn\u2019t one, look for a tool within the standard library (like an     HTTP client or a template engine).</li> <li>Finally, consider whether there is a core library in the Google codebase     that is sufficient before introducing a new dependency or creating your own.</li> </ol> <p>As an example, consider production code that contains a flag bound to a variable with a default value which must be overridden in tests. Unless intending to test the program\u2019s command-line interface itself (say, with <code>os/exec</code>), it is simpler and therefore preferable to override the bound value directly rather than by using <code>flag.Set</code>.</p> <p>Similarly, if a piece of code requires a set membership check, a boolean-valued map (e.g., <code>map[string]bool</code>) often suffices. Libraries that provide set-like types and functionality should only be used if more complicated operations are required that are impossible or overly complicated with a map.</p> <p></p>"},{"location":"knowledge/programming_languages/go/go_style/guide/#concision","title":"Concision","text":"<p>Concise Go code has a high signal-to-noise ratio. It is easy to discern the relevant details, and the naming and structure guide the reader through these details.</p> <p>There are many things that can get in the way of surfacing the most salient details at any given time:</p> <ul> <li>Repetitive code</li> <li>Extraneous syntax</li> <li>Opaque names</li> <li>Unnecessary abstraction</li> <li>Whitespace</li> </ul> <p>Repetitive code especially obscures the differences between each nearly-identical section, and requires a reader to visually compare similar lines of code to find the changes. Table-driven testing is a good example of a mechanism that can concisely factor out the common code from the important details of each repetition, but the choice of which pieces to include in the table will have an impact on how easy the table is to understand.</p> <p>When considering multiple ways to structure code, it is worth considering which way makes important details the most apparent.</p> <p>Understanding and using common code constructions and idioms are also important for maintaining a high signal-to-noise ratio. For example, the following code block is very common in error handling, and the reader can quickly understand the purpose of this block.</p> <pre><code>// Good:\nif err := doSomething(); err != nil {\n    // ...\n}\n</code></pre> <p>If code looks very similar to this but is subtly different, a reader may not notice the change. In cases like this, it is worth intentionally \u201cboosting\u201d the signal of the error check by adding a comment to call attention to it.</p> <pre><code>// Good:\nif err := doSomething(); err == nil { // if NO error\n    // ...\n}\n</code></pre> <p></p>"},{"location":"knowledge/programming_languages/go/go_style/guide/#maintainability","title":"Maintainability","text":"<p>Code is edited many more times than it is written. Readable code not only makes sense to a reader who is trying to understand how it works, but also to the programmer who needs to change it. Clarity is key.</p> <p>Maintainable code:</p> <ul> <li>Is easy for a future programmer to modify correctly</li> <li>Has APIs that are structured so that they can grow gracefully</li> <li>Is clear about the assumptions that it makes and chooses abstractions that     map to the structure of the problem, not to the structure of the code</li> <li>Avoids unnecessary coupling and doesn\u2019t include features that are not used</li> <li>Has a comprehensive test suite to ensure promised behaviors are maintained     and important logic is correct, and the tests provide clear, actionable     diagnostics in case of failure</li> </ul> <p>When using abstractions like interfaces and types which by definition remove information from the context in which they are used, it is important to ensure that they provide sufficient benefit. Editors and IDEs can connect directly to a method definition and show the corresponding documentation when a concrete type is used, but can only refer to an interface definition otherwise. Interfaces are a powerful tool, but come with a cost, since the maintainer may need to understand the specifics of the underlying implementation in order to correctly use the interface, which must be explained within the interface documentation or at the call-site.</p> <p>Maintainable code also avoids hiding important details in places that are easy to overlook. For example, in each of the following lines of code, the presence or lack of a single character is critical to understand the line:</p> <pre><code>// Bad:\n// The use of = instead of := can change this line completely.\nif user, err = db.UserByID(userID); err != nil {\n    // ...\n}\n</code></pre> <pre><code>// Bad:\n// The ! in the middle of this line is very easy to miss.\nleap := (year%4 == 0) &amp;&amp; (!(year%100 == 0) || (year%400 == 0))\n</code></pre> <p>Neither of these are incorrect, but both could be written in a more explicit fashion, or could have an accompanying comment that calls attention to the important behavior:</p> <pre><code>// Good:\nu, err := db.UserByID(userID)\nif err != nil {\n    return fmt.Errorf(\"invalid origin user: %s\", err)\n}\nuser = u\n</code></pre> <pre><code>// Good:\n// Gregorian leap years aren't just year%4 == 0.\n// See https://en.wikipedia.org/wiki/Leap_year#Algorithm.\nvar (\n    leap4   = year%4 == 0\n    leap100 = year%100 == 0\n    leap400 = year%400 == 0\n)\nleap := leap4 &amp;&amp; (!leap100 || leap400)\n</code></pre> <p>In the same way, a helper function that hides critical logic or an important edge-case could make it easy for a future change to fail to account for it properly.</p> <p>Predictable names are another feature of maintainable code. A user of a package or a maintainer of a piece of code should be able to predict the name of a variable, method, or function in a given context. Function parameters and receiver names for identical concepts should typically share the same name, both to keep documentation understandable and to facilitate refactoring code with minimal overhead.</p> <p>Maintainable code minimizes its dependencies (both implicit and explicit). Depending on fewer packages means fewer lines of code that can affect behavior. Avoiding dependencies on internal or undocumented behavior makes code less likely to impose a maintenance burden when those behaviors change in the future.</p> <p>When considering how to structure or write code, it is worth taking the time to think through ways in which the code may evolve over time. If a given approach is more conducive to easier and safer future changes, that is often a good trade-off, even if it means a slightly more complicated design.</p> <p></p>"},{"location":"knowledge/programming_languages/go/go_style/guide/#consistency","title":"Consistency","text":"<p>Consistent code is code that looks, feels, and behaves like similar code throughout the broader codebase, within the context of a team or package, and even within a single file.</p> <p>Consistency concerns do not override any of the principles above, but if a tie must be broken, it is often beneficial to break it in favor of consistency.</p> <p>Consistency within a package is often the most immediately important level of consistency. It can be very jarring if the same problem is approached in multiple ways throughout a package, or if the same concept has many names within a file. However, even this should not override documented style principles or global consistency.</p> <p></p>"},{"location":"knowledge/programming_languages/go/go_style/guide/#core-guidelines","title":"Core guidelines","text":"<p>These guidelines collect the most important aspects of Go style that all Go code is expected to follow. We expect that these principles be learned and followed by the time readability is granted. These are not expected to change frequently, and new additions will have to clear a high bar.</p> <p>The guidelines below expand on the recommendations in Effective Go, which provide a common baseline for Go code across the entire community.</p> <p></p>"},{"location":"knowledge/programming_languages/go/go_style/guide/#formatting","title":"Formatting","text":"<p>All Go source files must conform to the format outputted by the <code>gofmt</code> tool. This format is enforced by a presubmit check in the Google codebase. Generated code should generally also be formatted (e.g., by using [<code>format.Source</code>]), as it is also browsable in Code Search.</p> <p></p>"},{"location":"knowledge/programming_languages/go/go_style/guide/#mixedcaps","title":"MixedCaps","text":"<p>Go source code uses <code>MixedCaps</code> or <code>mixedCaps</code> (camel case) rather than underscores (snake case) when writing multi-word names.</p> <p>This applies even when it breaks conventions in other languages. For example, a constant is <code>MaxLength</code> (not <code>MAX_LENGTH</code>) if exported and <code>maxLength</code> (not <code>max_length</code>) if unexported.</p> <p>Local variables are considered unexported for the purpose of choosing the initial capitalization.</p> <p></p>"},{"location":"knowledge/programming_languages/go/go_style/guide/#line-length","title":"Line length","text":"<p>There is no fixed line length for Go source code. If a line feels too long, it should be refactored instead of broken. If it is already as short as it is practical for it to be, the line should be allowed to remain long.</p> <p>Do not split a line:</p> <ul> <li>Before an indentation change (e.g.,     function declaration, conditional)</li> <li>To make a long string (e.g., a URL) fit into multiple shorter lines</li> </ul> <p></p>"},{"location":"knowledge/programming_languages/go/go_style/guide/#naming","title":"Naming","text":"<p>Naming is more art than science. In Go, names tend to be somewhat shorter than in many other languages, but the same general guidelines apply. Names should:</p> <ul> <li>Not feel repetitive when they are used</li> <li>Take the context into consideration</li> <li>Not repeat concepts that are already clear</li> </ul> <p>You can find more specific guidance on naming in decisions.</p> <p></p>"},{"location":"knowledge/programming_languages/go/go_style/guide/#local-consistency","title":"Local consistency","text":"<p>Where the style guide has nothing to say about a particular point of style, authors are free to choose the style that they prefer, unless the code in close proximity (usually within the same file or package, but sometimes within a team or project directory) has taken a consistent stance on the issue.</p> <p>Examples of valid local style considerations:</p> <ul> <li>Use of <code>%s</code> or <code>%v</code> for formatted printing of errors</li> <li>Usage of buffered channels in lieu of mutexes</li> </ul> <p>Examples of invalid local style considerations:</p> <ul> <li>Line length restrictions for code</li> <li>Use of assertion-based testing libraries</li> </ul> <p>If the local style disagrees with the style guide but the readability impact is limited to one file, it will generally be surfaced in a code review for which a consistent fix would be outside the scope of the CL in question. At that point, it is appropriate to file a bug to track the fix.</p> <p>If a change would worsen an existing style deviation, expose it in more API surfaces, expand the number of files in which the deviation is present, or introduce an actual bug, then local consistency is no longer a valid justification for violating the style guide for new code. In these cases, it is appropriate for the author to clean up the existing codebase in the same CL, perform a refactor in advance of the current CL, or find an alternative that at least does not make the local problem worse.</p> <p>{% endraw %}</p>"},{"location":"knowledge/programming_languages/go/tips/","title":"Golang Tips","text":""},{"location":"knowledge/programming_languages/practices/","title":"Code practices","text":""},{"location":"knowledge/programming_languages/python/","title":"Python","text":""},{"location":"knowledge/programming_languages/python/#python","title":"Python","text":"<ul> <li>How to Update the Python Version in Anaconda</li> <li>Chinese character display on matlabplot show isssue</li> </ul>"},{"location":"knowledge/programming_languages/python/change_python_version/","title":"Change Python version by conda","text":""},{"location":"knowledge/programming_languages/python/change_python_version/#change-python-version-by-conda","title":"Change Python version by <code>conda</code>","text":"<p>Change python version by <code>conda</code>.</p> <ol> <li>Install <code>anaconda</code></li> <li>Change python verion</li> </ol> <p>Take change python version to python3.10.6 as example:</p> <pre><code>conda search python\nconda create -n py3.10.6 python=3.10.6\nconda activate py3.10.6\nconda install python=3.10.6\npython --version\n</code></pre>"},{"location":"knowledge/programming_languages/python/fix_plot_can_not_display_chinese_issue/","title":"Fix Chinese display issue","text":""},{"location":"knowledge/programming_languages/python/fix_plot_can_not_display_chinese_issue/#fix-chinese-display-issue","title":"Fix Chinese display issue","text":""},{"location":"knowledge/programming_languages/python/fix_plot_can_not_display_chinese_issue/#problem-description","title":"Problem description","text":"<pre><code>/home/coyang/anaconda3/lib/python3.10/site-packages/IPython/core/pylabtools.py:152: UserWarning: Glyph 28857 (\\N{CJK UNIFIED IDEOGRAPH-70B9}) missing from current font.\n  fig.canvas.print_figure(bytes_io, **kw)\n/home/coyang/anaconda3/lib/python3.10/site-packages/IPython/core/pylabtools.py:152: UserWarning: Glyph 36190 (\\N{CJK UNIFIED IDEOGRAPH-8D5E}) missing from current font.\n  fig.canvas.print_figure(bytes_io, **kw)\n/home/coyang/anaconda3/lib/python3.10/site-packages/IPython/core/pylabtools.py:152: UserWarning: Glyph 25968 (\\N{CJK UNIFIED IDEOGRAPH-6570}) missing from current font.\n  fig.canvas.print_figure(bytes_io, **kw)\n/home/coyang/anaconda3/lib/python3.10/site-packages/IPython/core/pylabtools.py:152: UserWarning: Glyph 27983 (\\N{CJK UNIFIED IDEOGRAPH-6D4F}) missing from current font.\n  fig.canvas.print_figure(bytes_io, **kw)\n/home/coyang/anaconda3/lib/python3.10/site-packages/IPython/core/pylabtools.py:152: UserWarning: Glyph 35272 (\\N{CJK UNIFIED IDEOGRAPH-89C8}) missing from current font.\n  fig.canvas.print_figure(bytes_io, **kw)\n/home/coyang/anaconda3/lib/python3.10/site-packages/IPython/core/pylabtools.py:152: UserWarning: Glyph 37327 (\\N{CJK UNIFIED IDEOGRAPH-91CF}) missing from current font.\n  fig.canvas.print_figure(bytes_io, **kw)\n</code></pre> <p>Picture</p> <p></p>"},{"location":"knowledge/programming_languages/python/fix_plot_can_not_display_chinese_issue/#solution","title":"Solution","text":"<p>Download <code>simhei.ttc</code> from github</p> <pre><code>wget https://github.com/StellarCN/scp_zh/blob/master/fonts/SimHei.ttf\n</code></pre> <ul> <li>Check where matlabplotlib use the font</li> </ul> <pre><code>&gt;&gt;&gt; import matplotlib\n&gt;&gt;&gt; \n&gt;&gt;&gt; print(matplotlib.matplotlib_fname())\n/home/coyang/anaconda3/lib/python3.10/site-packages/matplotlib/mpl-data/matplotlibrc\n&gt;&gt;&gt; print(matplotlib.get_cachedir())\n/home/coyang/.cache/matplotlib\n&gt;&gt;&gt; \n\n</code></pre> <ul> <li>Copy the font to matplotlib font path</li> </ul> <pre><code>cp ~/Downloads/SimHei.ttf /home/coyang/anaconda3/lib/python3.10/site-packages/matplotlib/mpl-data/fonts/ttf/\n</code></pre> <ul> <li>Edit config</li> </ul> <pre><code>vi  /home/coyang/anaconda3/lib/python3.10/site-packages/matplotlib/mpl-data/matplotlibrc\n\nfont.family:  sans-serif\n#font.style:   normal\n#font.variant: normal\n#font.weight:  normal\n#font.stretch: normal\n#font.size:    10.0\n\n#font.serif:      DejaVu Serif, Bitstream Vera Serif, Computer Modern Roman, New Century Schoolbook, Century Schoolbook L, Utopia, ITC Bookman, Bookman, Nimbus Roman No9 L, Times New Roman, Times, Palatino, Charter, serif\nfont.sans-serif: Simhei, DejaVu Sans, Bitstream Vera Sans, Computer Modern Sans Serif, Lucida Grande, Verdana, Geneva, Lucid, Arial, Helvetica, Avant Garde, sans-serif\n\n</code></pre> <ul> <li>clear cache</li> </ul> <pre><code>rm /home/coyang/.cache/matplotlib/fontlist-v330.json\n</code></pre> <ul> <li>Restart ipython and rerun</li> </ul>"},{"location":"knowledge/programming_languages/python/fix_plot_can_not_display_chinese_issue/#result","title":"Result","text":""},{"location":"knowledge/programming_languages/rust/","title":"Rust","text":""},{"location":"knowledge/security/","title":"Security","text":""},{"location":"knowledge/security/how_to_set_password_never_expire/","title":"How to Set Password to NEVER Expire","text":""},{"location":"knowledge/security/how_to_set_password_never_expire/#how-to-set-password-to-never-expire","title":"How to Set Password to NEVER Expire","text":"<p>To set a user\u2019s password to never expire on a Linux system, you need to use the <code>chage</code> command or modify the user\u2019s password aging settings in the <code>/etc/shadow</code> file. Here are two methods to achieve this:</p>"},{"location":"knowledge/security/how_to_set_password_never_expire/#method-1-using-the-chage-command","title":"Method 1: Using the <code>chage</code> Command","text":"<ol> <li> <p>Open a terminal window.</p> </li> <li> <p>Run the following command to set a user\u2019s password to never expire, replacing    <code>&lt;username&gt;</code> with the actual username of the user you want to modify:</p> </li> </ol> <pre><code>[root@fedora blogs]# chage -l &lt;username&gt;\nLast password change                                    : Sep 10, 2023\nPassword expires                                        : Dec 09, 2023\nPassword inactive                                       : never\nAccount expires                                         : never\nMinimum number of days between password change          : 0\nMaximum number of days between password change          : 90\nNumber of days of warning before password expires       : 14\n[root@fedora blogs]# chage -I -1 -m 0 -M 99999 -E -1  &lt;username&gt;\n[root@fedora blogs]# chage -l &lt;username&gt;\nLast password change                                    : Sep 10, 2023\nPassword expires                                        : never\nPassword inactive                                       : never\nAccount expires                                         : never\nMinimum number of days between password change          : 0\nMaximum number of days between password change          : 99999\nNumber of days of warning before password expires       : 14\n</code></pre> <p>This command will display the user\u2019s password aging information, including the password expiration date, which should now show \u201cNever.\u201d</p>"},{"location":"knowledge/security/how_to_set_password_never_expire/#method-2-modifying-the-etcshadow-file","title":"Method 2: Modifying the <code>/etc/shadow</code> File","text":"<ol> <li> <p>Open a terminal window.</p> </li> <li> <p>Edit the <code>/etc/shadow</code> file using a text editor like <code>sudo nano</code> or <code>sudo    vim</code>. For example:</p> </li> </ol> <p><code>bash    sudo vi /etc/shadow</code></p> <ol> <li> <p>Locate the line that corresponds to the user whose password you want to make    never expire. The <code>/etc/shadow</code> file has fields separated by colons (<code>:</code>),    and the field you\u2019re interested in is the one that controls password    expiration. It\u2019s typically the second field.</p> </li> <li> <p>Modify the second field to set the password to never expire. This means    removing any value from this field. For example, change:</p> </li> </ol> <p><code>log    username:$6$randomstring:18576:0:99999:7:::</code></p> <p>to:</p> <p><code>log    username::18576:0:99999:7:::</code></p> <p>Note that you may need to use a different field format based on your system\u2019s    configuration, but removing the value between the first and second colons    usually signifies a password that never expires.</p> <ol> <li> <p>Save the changes and exit the text editor.</p> </li> <li> <p>Verify that the changes have been applied by running the following command:</p> </li> </ol> <p><code>bash    sudo chage -l &lt;username&gt;</code></p> <p>The password expiration date should now show \u201cNever.\u201d</p> <p>Remember to use these methods responsibly, as setting passwords to never expire can pose a security risk if not managed carefully. Always consider alternative security measures like strong password policies and multi-factor authentication to enhance system security.</p>"},{"location":"knowledge/software_development/","title":"Software development","text":""},{"location":"knowledge/software_development/#software-development","title":"Software development","text":""},{"location":"knowledge/software_development/#process","title":"Process","text":"<ul> <li>SCRUM</li> <li>Agile genre</li> <li>How to hold an effective retrospective meeting</li> <li>Sailboat retrospective</li> </ul>"},{"location":"knowledge/software_development/scrum/genre/","title":"Agile genre \u6d41\u6d3e","text":""},{"location":"knowledge/software_development/scrum/genre/#agile-genre","title":"Agile genre \u6d41\u6d3e","text":""},{"location":"knowledge/software_development/scrum/genre/#_1","title":"\u654f\u6377\u5ba3\u8a00","text":"<pre><code>\u4e2a\u4f53\u548c\u4e92\u52a8\u3000\u3000\u9ad8\u4e8e\u3000\u3000\u6d41\u7a0b\u548c\u5de5\u5177\n\u5de5\u4f5c\u7684\u8f6f\u4ef6\u3000\u3000\u9ad8\u4e8e\u3000\u3000\u8be6\u5c3d\u7684\u6587\u6863\n\u5ba2\u6237\u5408\u4f5c\u3000\u3000\u3000\u9ad8\u4e8e\u3000\u3000\u3000\u5408\u540c\u8c08\u5224\n\u54cd\u5e94\u53d8\u5316\u3000\u3000\u3000\u9ad8\u4e8e\u3000\u3000\u3000\u9075\u5faa\u8ba1\u5212\n</code></pre>"},{"location":"knowledge/software_development/scrum/genre/#scrum","title":"Scrum","text":"<p>Scrum\u662f\u4e00\u79cd\u654f\u6377\u9879\u76ee\u7ba1\u7406\u65b9\u6cd5\uff0c\u901a\u5e38\u7528\u4e8e\u8f6f\u4ef6\u5f00\u53d1\uff0c\u4f46\u4e5f\u9002\u7528\u4e8e\u5176\u4ed6\u9886\u57df\u3002\u5b83\u7684\u76ee\u6807\u662f\u5e2e \u52a9\u56e2\u961f\u9ad8\u6548\u5730\u5b8c\u6210\u590d\u6742\u7684\u9879\u76ee\uff0c\u540c\u65f6\u4fdd\u6301\u7075\u6d3b\u6027\u548c\u9002\u5e94\u6027\u3002</p> <p>Scrum\u4e2d\u7684\u6838\u5fc3\u662f\u56e2\u961f\u5408\u4f5c\u3001\u81ea\u7ec4\u7ec7\u548c\u6301\u7eed\u6539\u8fdb\u3002</p>"},{"location":"knowledge/software_development/scrum/genre/#xp","title":"XP \u6781\u9650\u7f16\u7a0b","text":"<p>\u6781\u9650\u7f16\u7a0b\uff08Extreme Programming\uff0c\u7b80\u79f0XP\uff09\u662f\u4e00\u79cd\u654f\u6377\u8f6f\u4ef6\u5f00\u53d1\u65b9\u6cd5\uff0c\u65e8\u5728\u63d0\u9ad8\u8f6f\u4ef6\u5f00\u53d1 \u56e2\u961f\u7684\u6548\u7387\u548c\u8d28\u91cf\u3002\u5b83\u5f3a\u8c03\u56e2\u961f\u6210\u5458\u4e4b\u95f4\u7684\u7d27\u5bc6\u5408\u4f5c\u3001\u6301\u7eed\u53cd\u9988\u3001\u9ad8\u5ea6\u81ea\u52a8\u5316\u548c\u5feb\u901f\u4ea4\u4ed8\u4ef7 \u503c\u7684\u8f6f\u4ef6\u3002</p> <p>\u4e3b\u8981\u539f\u5219\u548c\u5b9e\u8df5\uff1a</p> <p>\u5feb\u901f\u53cd\u9988\uff1a \u5f3a\u8c03\u9891\u7e41\u4ea4\u4ed8\u8f6f\u4ef6\uff0c\u5e76\u53ca\u65f6\u4ece\u5ba2\u6237\u6216\u5229\u76ca\u76f8\u5173\u8005\u90a3\u91cc\u83b7\u5f97\u53cd\u9988\uff0c\u4ee5\u4fbf\u66f4\u597d \u5730\u9002\u5e94\u9700\u6c42\u53d8\u5316\u3002</p> <p>\u6301\u7eed\u96c6\u6210\uff1a \u5f00\u53d1\u4eba\u5458\u5728\u9891\u7e41\u5730\u5c06\u4ee3\u7801\u96c6\u6210\u5230\u5171\u4eab\u7684\u4ee3\u7801\u5e93\u4e2d\uff0c\u5e76\u901a\u8fc7\u81ea\u52a8\u5316\u6784\u5efa\u548c\u6d4b \u8bd5\uff0c\u786e\u4fdd\u4ee3\u7801\u7684\u7a33\u5b9a\u6027\u548c\u4e00\u81f4\u6027\u3002</p> <p>\u7b80\u5355\u8bbe\u8ba1\uff1a XP\u9f13\u52b1\u91c7\u7528\u6700\u7b80\u5355\u3001\u6700\u6709\u6548\u7684\u89e3\u51b3\u65b9\u6848\uff0c\u907f\u514d\u8fc7\u5ea6\u8bbe\u8ba1\uff0c\u4fdd\u6301\u4ee3\u7801\u7684\u53ef\u8bfb \u6027\u548c\u6613\u7ef4\u62a4\u6027\u3002</p> <p>\u6d4b\u8bd5\u9a71\u52a8\u5f00\u53d1\uff08TDD\uff09\uff1a \u5f00\u53d1\u4eba\u5458\u9996\u5148\u7f16\u5199\u6d4b\u8bd5\uff0c\u7136\u540e\u518d\u7f16\u5199\u8db3\u591f\u7684\u4ee3\u7801\u6765\u901a\u8fc7\u8fd9\u4e9b\u6d4b \u8bd5\u3002\u8fd9\u6709\u52a9\u4e8e\u63d0\u9ad8\u4ee3\u7801\u8d28\u91cf\u548c\u53ef\u6d4b\u8bd5\u6027\u3002</p> <p>\u6301\u7eed\u90e8\u7f72\uff1a \u5f3a\u8c03\u81ea\u52a8\u5316\u7684\u90e8\u7f72\u8fc7\u7a0b\uff0c\u4f7f\u5f97\u8f6f\u4ef6\u53ef\u4ee5\u5728\u4efb\u4f55\u65f6\u5019\u5feb\u901f\u5730\u90e8\u7f72\u5230\u751f\u4ea7\u73af \u5883\u3002</p> <p>\u56e2\u961f\u5408\u4f5c\uff1a XP\u9f13\u52b1\u5f00\u53d1\u4eba\u5458\u3001\u6d4b\u8bd5\u4eba\u5458\u548c\u4ea7\u54c1\u8d1f\u8d23\u4eba\u4e4b\u95f4\u7684\u7d27\u5bc6\u5408\u4f5c\u548c\u4ea4\u6d41\uff0c\u5171\u540c\u63a8 \u52a8\u9879\u76ee\u7684\u6210\u529f\u3002</p>"},{"location":"knowledge/software_development/scrum/genre/#_2","title":"\u7cbe\u76ca","text":"<p>\u7cbe\u76ca\uff08Lean\uff09\u662f\u4e00\u79cd\u7ba1\u7406\u7406\u5ff5\u548c\u65b9\u6cd5\u8bba\uff0c\u6700\u521d\u6e90\u4e8e\u4e30\u7530\u6c7d\u8f66\u516c\u53f8\u7684\u751f\u4ea7\u6a21\u5f0f\uff0c\u540e\u6765\u6269\u5c55\u5230\u5176 \u4ed6\u9886\u57df\uff0c\u5305\u62ec\u8f6f\u4ef6\u5f00\u53d1\u548c\u9879\u76ee\u7ba1\u7406\u3002\u7cbe\u76ca\u65b9\u6cd5\u5f3a\u8c03\u6d88\u9664\u6d6a\u8d39\u3001\u63d0\u9ad8\u4ef7\u503c\u6d41\u52a8\u548c\u6301\u7eed\u6539\u8fdb\uff0c\u65e8 \u5728\u5b9e\u73b0\u9ad8\u6548\u3001\u7075\u6d3b\u548c\u8d28\u91cf\u9ad8\u7684\u5de5\u4f5c\u6d41\u7a0b\u3002</p> <p>\u4e3b\u8981\u539f\u5219\u548c\u5b9e\u8df5\uff1a</p> <p>\u4ef7\u503c\u6d41\uff1a \u7cbe\u76ca\u5173\u6ce8\u4ef7\u503c\u6d41\uff0c\u5373\u5c06\u5de5\u4f5c\u4ece\u5f00\u59cb\u5230\u7ed3\u675f\u7684\u6240\u6709\u6b65\u9aa4\u90fd\u89c6\u4e3a\u4ef7\u503c\u521b\u9020\u7684\u73af \u8282\u3002\u901a\u8fc7\u4f18\u5316\u6574\u4e2a\u4ef7\u503c\u6d41\u7a0b\uff0c\u6d88\u9664\u4e0d\u5fc5\u8981\u7684\u73af\u8282\u548c\u5ef6\u8fdf\uff0c\u63d0\u9ad8\u6574\u4f53\u6548\u7387\u548c\u8d28\u91cf\u3002</p> <p>\u6d88\u9664\u6d6a\u8d39\uff1a \u7cbe\u76ca\u5f3a\u8c03\u6d88\u9664\u5404\u79cd\u5f62\u5f0f\u7684\u6d6a\u8d39\uff0c\u5305\u62ec\u7b49\u5f85\u3001\u8fc7\u5ea6\u751f\u4ea7\u3001\u4e0d\u5fc5\u8981\u7684\u8fd0\u8f93\u3001\u5b58 \u8d27\u8fc7\u591a\u3001\u4e0d\u5408\u683c\u54c1\u7b49\uff0c\u4ee5\u63d0\u9ad8\u8d44\u6e90\u5229\u7528\u7387\u548c\u751f\u4ea7\u6548\u7387\u3002</p> <p>\u6301\u7eed\u6539\u8fdb\uff1a \u7cbe\u76ca\u9f13\u52b1\u6301\u7eed\u6539\u8fdb\u548c\u5b66\u4e60\uff0c\u4e0d\u65ad\u5bfb\u627e\u63d0\u9ad8\u6548\u7387\u548c\u8d28\u91cf\u7684\u65b9\u6cd5\uff0c\u5e76\u5c06\u6539\u8fdb\u4f5c \u4e3a\u4e00\u4e2a\u6301\u7eed\u7684\u8fc7\u7a0b\u3002</p> <p>\u62c9\u52a8\u751f\u4ea7\uff1a \u7cbe\u76ca\u91c7\u7528\u62c9\u52a8\u751f\u4ea7\u7684\u65b9\u5f0f\uff0c\u5373\u6839\u636e\u9700\u6c42\u8fdb\u884c\u751f\u4ea7\uff0c\u800c\u4e0d\u662f\u63a8\u52a8\u751f\u4ea7\uff0c\u907f\u514d \u8fc7\u5ea6\u751f\u4ea7\u548c\u5e93\u5b58\u79ef\u538b\u3002</p> <p>\u4eba\u5458\u53d1\u5c55\uff1a \u7cbe\u76ca\u5f3a\u8c03\u5bf9\u5458\u5de5\u7684\u57f9\u8bad\u548c\u53d1\u5c55\uff0c\u4f7f\u5176\u5177\u5907\u89e3\u51b3\u95ee\u9898\u548c\u6539\u8fdb\u5de5\u4f5c\u6d41\u7a0b\u7684\u80fd \u529b\u3002</p>"},{"location":"knowledge/software_development/scrum/genre/#_3","title":"\u770b\u677f","text":"<p>\u770b\u677f\uff08Kanban\uff09\u662f\u4e00\u79cd\u654f\u6377\u9879\u76ee\u7ba1\u7406\u65b9\u6cd5\uff0c\u7528\u4e8e\u8ddf\u8e2a\u5de5\u4f5c\u6d41\u7a0b\u4e2d\u7684\u4efb\u52a1\u3001\u95ee\u9898\u6216\u9700\u6c42\u7684\u72b6\u6001 \u548c\u8fdb\u5ea6\u3002\u5b83\u901a\u8fc7\u4e00\u4e2a\u53ef\u89c6\u5316\u7684\u9762\u677f\u6765\u5c55\u793a\u4efb\u52a1\u7684\u72b6\u6001\uff0c\u4f7f\u56e2\u961f\u6210\u5458\u80fd\u591f\u6e05\u6670\u5730\u4e86\u89e3\u5de5\u4f5c\u7684\u60c5 \u51b5\uff0c\u53d1\u73b0\u95ee\u9898\u5e76\u66f4\u597d\u5730\u8fdb\u884c\u534f\u4f5c\u3002</p> <p>\u5728\u770b\u677f\u4e2d\uff0c\u4efb\u52a1\u901a\u5e38\u4ee5\u5361\u7247\u7684\u5f62\u5f0f\u8868\u793a\uff0c\u6bcf\u4e2a\u5361\u7247\u4ee3\u8868\u4e00\u4e2a\u7279\u5b9a\u7684\u5de5\u4f5c\u9879\u3002\u8fd9\u4e9b\u5361\u7247\u6309\u7167\u5de5 \u4f5c\u6d41\u7a0b\u7684\u4e0d\u540c\u9636\u6bb5\u8fdb\u884c\u6392\u5217\uff0c\u4f8b\u5982\u201d\u5f85\u529e\u201d\u3001\u201d\u8fdb\u884c\u4e2d\u201d\u548c\u201d\u5df2\u5b8c\u6210\u201d\u3002\u56e2\u961f\u6210\u5458\u53ef\u4ee5\u6839\u636e\u4efb\u52a1\u7684 \u72b6\u6001\u79fb\u52a8\u8fd9\u4e9b\u5361\u7247\uff0c\u4ee5\u53cd\u6620\u5de5\u4f5c\u7684\u8fdb\u5c55\u3002</p> <p>\u770b\u677f\u7684\u4e3b\u8981\u7279\u70b9\u5305\u62ec\uff1a</p> <p>\u53ef\u89c6\u5316\uff1a \u770b\u677f\u4f7f\u7528\u7269\u7406\u9762\u677f\u6216\u6570\u5b57\u5de5\u5177\uff0c\u5728\u56e2\u961f\u6210\u5458\u4e4b\u95f4\u63d0\u4f9b\u4e00\u4e2a\u53ef\u89c6\u5316\u7684\u5de5\u4f5c\u6d41 \u7a0b\uff0c\u4f7f\u6bcf\u4e2a\u4eba\u90fd\u80fd\u8f7b\u677e\u4e86\u89e3\u4efb\u52a1\u7684\u72b6\u6001\u3002</p> <p>\u6d41\u7a0b\u900f\u660e\uff1a \u770b\u677f\u6e05\u695a\u5730\u5c55\u793a\u4e86\u5de5\u4f5c\u9879\u5728\u4e0d\u540c\u9636\u6bb5\u4e4b\u95f4\u7684\u6d41\u8f6c\uff0c\u5e2e\u52a9\u56e2\u961f\u6210\u5458\u4e86\u89e3\u5de5\u4f5c \u7684\u4f18\u5148\u7ea7\u548c\u62e5\u585e\u60c5\u51b5\u3002</p> <p>\u6301\u7eed\u6539\u8fdb\uff1a \u770b\u677f\u9f13\u52b1\u56e2\u961f\u5728\u6bcf\u4e2a\u9636\u6bb5\u8fdb\u884c\u6301\u7eed\u6539\u8fdb\uff0c\u4f18\u5316\u5de5\u4f5c\u6d41\u7a0b\u548c\u63d0\u9ad8\u6548\u7387\u3002</p> <p>\u9650\u5236\u5728\u5236\u54c1\uff1a \u770b\u677f\u4f7f\u7528WIP\uff08Work In Progress\uff09\u9650\u5236\uff0c\u9632\u6b62\u56e2\u961f\u540c\u65f6\u5904\u7406\u8fc7\u591a\u7684\u4efb \u52a1\uff0c\u4ee5\u907f\u514d\u4efb\u52a1\u79ef\u538b\u548c\u8d28\u91cf\u4e0b\u964d\u3002</p> <p>\u9ad8\u7075\u6d3b\u6027\uff1a \u770b\u677f\u9002\u7528\u4e8e\u5404\u79cd\u9879\u76ee\u548c\u56e2\u961f\uff0c\u53ef\u4ee5\u6839\u636e\u5b9e\u9645\u60c5\u51b5\u8fdb\u884c\u5b9a\u5236\u548c\u8c03\u6574\u3002</p>"},{"location":"knowledge/software_development/scrum/genre/#devops","title":"DevOps","text":"<p>DevOps\u662f\u4e00\u79cd\u8f6f\u4ef6\u5f00\u53d1\u548c\u8fd0\u7ef4\u7684\u6587\u5316\u548c\u65b9\u6cd5\u8bba\uff0c\u65e8\u5728\u4fc3\u8fdb\u5f00\u53d1\u56e2\u961f\u548c\u8fd0\u7ef4\u56e2\u961f\u4e4b\u95f4\u7684\u534f\u4f5c\u548c \u6c9f\u901a\uff0c\u4ee5\u5b9e\u73b0\u5feb\u901f\u3001\u9891\u7e41\u548c\u7a33\u5b9a\u7684\u8f6f\u4ef6\u4ea4\u4ed8\u3002DevOps\u7684\u540d\u79f0\u7531\u201dDevelopment\u201d\uff08\u5f00\u53d1\uff09\u548c \u201cOperations\u201d\uff08\u8fd0\u7ef4\uff09\u4e24\u4e2a\u5355\u8bcd\u7ec4\u5408\u800c\u6210\u3002</p> <p>\u7279\u70b9\u548c\u539f\u5219\uff1a</p> <p>\u534f\u4f5c\u4e0e\u6c9f\u901a\uff1a DevOps\u5f3a\u8c03\u5f00\u53d1\u56e2\u961f\u548c\u8fd0\u7ef4\u56e2\u961f\u4e4b\u95f4\u7684\u7d27\u5bc6\u5408\u4f5c\u548c\u6c9f\u901a\u3002\u901a\u8fc7\u6d88\u9664\u4f20\u7edf \u7684\u9694\u9602\u548c\u58c1\u5792\uff0c\u4fc3\u8fdb\u5171\u540c\u7684\u76ee\u6807\u548c\u4ef7\u503c\u89c2\u3002</p> <p>\u81ea\u52a8\u5316\uff1a DevOps\u5021\u5bfc\u81ea\u52a8\u5316\u5404\u4e2a\u9636\u6bb5\u7684\u8f6f\u4ef6\u4ea4\u4ed8\u8fc7\u7a0b\uff0c\u5305\u62ec\u6784\u5efa\u3001\u6d4b\u8bd5\u3001\u90e8\u7f72\u548c\u76d1 \u63a7\u3002\u81ea\u52a8\u5316\u53ef\u4ee5\u63d0\u9ad8\u6548\u7387\uff0c\u964d\u4f4e\u9519\u8bef\u548c\u624b\u52a8\u5e72\u9884\u5e26\u6765\u7684\u98ce\u9669\u3002</p> <p>\u6301\u7eed\u4ea4\u4ed8\uff1a DevOps\u652f\u6301\u6301\u7eed\u4ea4\u4ed8\uff08Continuous Delivery\uff09\u7684\u5b9e\u8df5\uff0c\u5373\u5728\u4efb\u4f55\u65f6\u5019\u90fd\u80fd \u591f\u5feb\u901f\u3001\u53ef\u9760\u5730\u5c06\u8f6f\u4ef6\u4ea4\u4ed8\u5230\u751f\u4ea7\u73af\u5883\u3002</p> <p>\u6301\u7eed\u96c6\u6210\uff1a DevOps\u5021\u5bfc\u6301\u7eed\u96c6\u6210\uff08Continuous Integration\uff09\u7684\u5b9e\u8df5\uff0c\u5f00\u53d1\u4eba\u5458\u5c06\u4ee3 \u7801\u9891\u7e41\u5730\u96c6\u6210\u5230\u5171\u4eab\u4ee3\u7801\u5e93\u4e2d\uff0c\u5e76\u8fdb\u884c\u81ea\u52a8\u5316\u7684\u6784\u5efa\u548c\u6d4b\u8bd5\u3002</p> <p>\u76d1\u63a7\u548c\u53cd\u9988\uff1a DevOps\u5f3a\u8c03\u5b9e\u65f6\u76d1\u63a7\u548c\u53cd\u9988\u673a\u5236\uff0c\u4ee5\u4fbf\u53ca\u65e9\u53d1\u73b0\u548c\u89e3\u51b3\u6f5c\u5728\u7684\u95ee\u9898\uff0c\u4fdd \u969c\u7cfb\u7edf\u7684\u7a33\u5b9a\u6027\u548c\u53ef\u9760\u6027\u3002</p> <p>\u7075\u6d3b\u6027\u548c\u5feb\u901f\u54cd\u5e94\uff1a DevOps\u4f7f\u56e2\u961f\u80fd\u591f\u66f4\u52a0\u7075\u6d3b\u5730\u5e94\u5bf9\u9700\u6c42\u53d8\u5316\uff0c\u5feb\u901f\u54cd\u5e94\u5ba2\u6237\u7684\u53cd \u9988\u548c\u5e02\u573a\u7684\u53d8\u5316\u3002</p> <p>\u6587\u5316\u548c\u56e2\u961f\uff1a DevOps\u4e0d\u4ec5\u662f\u4e00\u79cd\u5de5\u5177\u548c\u6d41\u7a0b\uff0c\u66f4\u662f\u4e00\u79cd\u6587\u5316\u548c\u56e2\u961f\u7cbe\u795e\u3002\u5b83\u9f13\u52b1\u5171\u4eab \u8d23\u4efb\u3001\u5f00\u653e\u7684\u6c9f\u901a\u548c\u6301\u7eed\u5b66\u4e60\u3002</p> <p>\u53ef\u6301\u7eed\u6027\u548c\u7a33\u5b9a\u6027\uff1a DevOps\u5f3a\u8c03\u901a\u8fc7\u81ea\u52a8\u5316\u548c\u6301\u7eed\u6539\u8fdb\u6765\u63d0\u9ad8\u7cfb\u7edf\u7684\u7a33\u5b9a\u6027\u548c\u53ef\u6301\u7eed \u6027\uff0c\u51cf\u5c11\u56e0\u4eba\u4e3a\u5e72\u9884\u5e26\u6765\u7684\u98ce\u9669\u3002</p>"},{"location":"knowledge/software_development/scrum/how_to_hold_retrospective_meeting_effectively/","title":"How to hold an effective retrospective meeting","text":""},{"location":"knowledge/software_development/scrum/how_to_hold_retrospective_meeting_effectively/#how-to-hold-an-effective-retrospective-meeting","title":"How to hold an effective retrospective meeting","text":"<p>Retrospectives are a crucial component of the Agile process, providing your team with a chance to reflect on what went well, what didn\u2019t, and how to improve in the next iteration. Here\u2019s a step-by-step guide:</p>"},{"location":"knowledge/software_development/scrum/how_to_hold_retrospective_meeting_effectively/#1-set-the-stage","title":"1. Set the Stage","text":"<ul> <li>Choose a comfortable environment, either in-person or virtual, where team   members can openly communicate.</li> <li>Begin with an icebreaker or a quick warm-up activity to get everyone engaged   and in the right mindset.</li> </ul>"},{"location":"knowledge/software_development/scrum/how_to_hold_retrospective_meeting_effectively/#2-gather-data","title":"2. Gather Data","text":"<ul> <li>Have each team member share their thoughts on the recent iteration. This can   include what they felt went well, what didn\u2019t go as expected, and any concerns   or observations they have.</li> </ul>"},{"location":"knowledge/software_development/scrum/how_to_hold_retrospective_meeting_effectively/#3-generate-insights","title":"3. Generate Insights","text":"<ul> <li>Organize the feedback into categories, such as \u201cWhat Went Well,\u201d \u201cWhat Didn\u2019t   Go Well,\u201d and \u201cIdeas for Improvement.\u201d</li> <li>Encourage team members to discuss and elaborate on each point. Aim to   understand the root causes rather than just the surface-level issues.</li> </ul>"},{"location":"knowledge/software_development/scrum/how_to_hold_retrospective_meeting_effectively/#4-identify-action-items","title":"4. Identify Action Items","text":"<ul> <li>Collaboratively decide on specific action items to address the areas that need   improvement.</li> <li>Use techniques like \u201cStart, Stop, Continue\u201d or \u201cSailboat\u201d to guide the   discussion towards actionable solutions.</li> <li>Make sure the action items are feasible, measurable, and relevant.</li> </ul>"},{"location":"knowledge/software_development/scrum/how_to_hold_retrospective_meeting_effectively/#5-prioritize","title":"5. Prioritize","text":"<ul> <li>If there are multiple action items, prioritize them based on their impact and   feasibility. This ensures that the team focuses on changes that will yield the   most significant improvements.</li> </ul>"},{"location":"knowledge/software_development/scrum/how_to_hold_retrospective_meeting_effectively/#6-create-a-plan","title":"6. Create a Plan","text":"<ul> <li>Assign responsibilities for each action item to team members. Everyone should   have a role in implementing the improvements.</li> <li>Set clear deadlines for each action item to avoid procrastination and ensure   accountability.</li> </ul>"},{"location":"knowledge/software_development/scrum/how_to_hold_retrospective_meeting_effectively/#7-reflect-on-the-retrospective","title":"7. Reflect on the Retrospective","text":"<ul> <li>Before concluding the meeting, gather feedback from the team about the   retrospective itself. Ask questions like \u201cHow could this retrospective have   been more effective?\u201d or \u201cWhat format or activities worked well?\u201d</li> </ul>"},{"location":"knowledge/software_development/scrum/how_to_hold_retrospective_meeting_effectively/#8-follow-up","title":"8. Follow Up","text":"<ul> <li>Track progress on the action items in the subsequent iterations. Use a visual   representation, like a Kanban board or a simple spreadsheet, to monitor their   status.</li> <li>Celebrate successes and acknowledge efforts made toward improvement during the   next retrospective.</li> </ul>"},{"location":"knowledge/software_development/scrum/how_to_hold_retrospective_meeting_effectively/#9-adapt-and-experiment","title":"9. Adapt and Experiment","text":"<ul> <li>Retrospectives are about continuous improvement. Experiment with different   retrospective formats, activities, and timings to keep the process fresh and   effective.</li> <li>Regularly revisit and adjust your retrospective process based on team feedback   and evolving needs.</li> </ul> <p>Remember, the key to a successful retrospective is creating an environment where team members feel safe to share their thoughts and opinions. As the Agile Master, your role is to facilitate the discussion, ensure equal participation, and guide the team toward actionable outcomes.</p>"},{"location":"knowledge/software_development/scrum/sailboat_retrospective/","title":"Sailboat retrospective","text":""},{"location":"knowledge/software_development/scrum/sailboat_retrospective/#sailboat-retrospective","title":"Sailboat retrospective","text":"<p>The Sailboat Retrospective, also known as the Speedboat or Windshield Wipers retrospective, is an Agile retrospective technique that uses a visual metaphor of a sailboat to facilitate discussions about what\u2019s helping a team move forward, what\u2019s holding them back, and what can help them navigate more smoothly.</p>"},{"location":"knowledge/software_development/scrum/sailboat_retrospective/#how-it-works","title":"How It Works:","text":"<p>template</p>"},{"location":"knowledge/software_development/scrum/sailboat_retrospective/#preparation","title":"Preparation","text":"<p>To conduct a Sailboat Retrospective, you need a space where you can draw or visualize a simple sailboat diagram. The diagram typically consists of the following components:</p> <ol> <li>Rocks (risks)</li> </ol> <p>What happens if a boat hits a rock? It gets hung up and damaged. The same is true for your sprint. The rocks represent a potential risk or obstacle for your sprint. These can persist for a long time if your team doesn\u2019t come up with a way to address them.</p> <ol> <li>Anchors (delaying issues)</li> </ol> <p>An anchor keeps a boat in one spot, and that\u2019s why they\u2019re the perfect representation of the things that held your sprint back. What caused major bottlenecks or challenges? What inhibited your agile team from making as much progress as possible?</p> <ol> <li>Wind (helping teams)</li> </ol> <p>Wind propels a sailboat forward, and that\u2019s why it represents what went well with your previous sprint. You\u2019ll identify what was quite literally putting wind in your sails. You might also hear this referred to as the helping team.</p> <ol> <li> <p>Sunshine: Things that make the team happy.</p> </li> <li> <p>Land (the goal)</p> </li> </ol> <p>Finally, the land is where your boat is headed. Using the sailboat metaphor, it represents your goal or vision for the sprint. It can include both long and short-term objectives for the agile team.</p>"},{"location":"knowledge/software_development/scrum/sailboat_retrospective/#facilitation","title":"Facilitation","text":"<p>Start the retrospective by explaining the sailboat metaphor to the team. Briefly explain the significance of each component.</p>"},{"location":"knowledge/software_development/scrum/sailboat_retrospective/#brainstorming-and-discussion","title":"Brainstorming and Discussion","text":"<p>Ask team members to contribute their thoughts and insights related to each component of the sailboat:</p>"},{"location":"knowledge/software_development/scrum/sailboat_retrospective/#visualizing-the-sailboat","title":"Visualizing the Sailboat","text":"<p>As team members share their thoughts, you or a designated scribe can draw or update the sailboat diagram in real-time. This helps visualize the team\u2019s insights and creates a shared understanding.</p>"},{"location":"knowledge/software_development/scrum/sailboat_retrospective/#discussion-and-action-items","title":"Discussion and Action Items","text":"<p>Once the diagram is complete and all team members have had a chance to contribute, engage the team in a discussion about the insights gathered. Focus on identifying actionable items that can address the challenges and leverage the positive factors.</p>"},{"location":"knowledge/software_development/scrum/sailboat_retrospective/#action-planning","title":"Action Planning","text":"<p>Collaboratively decide on specific actions that the team will take in response to the insights from the retrospective. Assign responsibilities and set deadlines for each action item.</p>"},{"location":"knowledge/software_development/scrum/sailboat_retrospective/#why-use-sailboat-retrospective","title":"Why Use Sailboat Retrospective","text":"<p>The Sailboat Retrospective is effective for several reasons:</p> <ol> <li> <p>Visual Metaphor: The sailboat metaphor is easy to understand and    relatable, making it an engaging way to discuss retrospective topics.</p> </li> <li> <p>Balanced Perspective: The technique encourages both positive and critical    discussions, helping teams celebrate successes and address challenges.</p> </li> <li> <p>Visual Representation: The sailboat diagram provides a visual    representation of the team\u2019s current state, making it easier to identify    patterns and connections.</p> </li> <li> <p>Collaboration: Team members actively participate and contribute their    insights, leading to a collaborative effort in identifying improvements.</p> </li> <li> <p>Action-Oriented: By focusing on actionable strategies and solutions, the    retrospective leads to concrete changes that can enhance the team\u2019s    performance.</p> </li> <li> <p>External Factors: The wind component highlights external factors, such as    market changes or organizational challenges, which might impact the team\u2019s    progress.</p> </li> </ol> <p>Incorporating the Sailboat Retrospective into your Agile process can encourage open communication, team alignment, and continuous improvement. It offers a creative and engaging way to identify areas for growth and change while celebrating the team\u2019s strengths.</p>"},{"location":"knowledge/software_development/scrum/sailboat_retrospective/#references","title":"References","text":"<ul> <li>https://conceptboard.com/blog/sailboat-retrospective-template-and-guide/</li> <li>https://miro.com/guides/retrospectives/how-to-run-sailboat-retrospective/</li> <li>https://miro.com/miroverse/sailboat-retrospective/</li> <li>https://www.pagerduty.com/blog/4-step-agile-sailboat-retrospective/</li> </ul>"},{"location":"knowledge/software_development/scrum/scrum/","title":"Scrum","text":""},{"location":"knowledge/software_development/scrum/scrum/#scrum","title":"Scrum","text":"<p>Scrum\u662f\u4e00\u79cd\u654f\u6377\u9879\u76ee\u7ba1\u7406\u65b9\u6cd5\uff0c\u901a\u5e38\u7528\u4e8e\u8f6f\u4ef6\u5f00\u53d1\uff0c\u4f46\u4e5f\u9002\u7528\u4e8e\u5176\u4ed6\u9886\u57df\u3002\u5b83\u7684\u76ee\u6807\u662f\u5e2e \u52a9\u56e2\u961f\u9ad8\u6548\u5730\u5b8c\u6210\u590d\u6742\u7684\u9879\u76ee\uff0c\u540c\u65f6\u4fdd\u6301\u7075\u6d3b\u6027\u548c\u9002\u5e94\u6027\u3002</p> <p>Scrum\u4e2d\u7684\u6838\u5fc3\u662f\u56e2\u961f\u5408\u4f5c\u3001\u81ea\u7ec4\u7ec7\u548c\u6301\u7eed\u6539\u8fdb\u3002\u8fd9\u91cc\u6709\u51e0\u4e2a\u91cd\u8981\u7684\u89d2\u8272\uff1a</p> <ul> <li> <p>\u4ea7\u54c1\u8d1f\u8d23\u4eba(Product Owner)\uff1a\u8d1f\u8d23\u660e\u786e\u9879\u76ee\u7684\u613f\u666f\u548c\u9700\u6c42\uff0c\u4ee5\u53ca\u4f18\u5148\u7ea7\u6392\u5e8f\u3002\u4ed6\u4eec\u4ee3\u8868 \u5229\u76ca\u76f8\u5173\u8005\uff0c\u786e\u4fdd\u56e2\u961f\u5f00\u53d1\u7684\u4ea7\u54c1\u7b26\u5408\u5ba2\u6237\u548c\u4e1a\u52a1\u9700\u6c42\u3002</p> </li> <li> <p>Scrum\u56e2\u961f(Development Team)\uff1a\u7531\u5f00\u53d1\u4eba\u5458\u7ec4\u6210\uff0c\u8d1f\u8d23\u5c06\u4ea7\u54c1\u9700\u6c42\u8f6c\u5316\u4e3a\u5b9e\u9645\u53ef\u7528\u7684\u529f \u80fd\u3002\u56e2\u961f\u662f\u81ea\u7ec4\u7ec7\u7684\uff0c\u610f\u5473\u7740\u4ed6\u4eec\u81ea\u5df1\u51b3\u5b9a\u5982\u4f55\u5b8c\u6210\u5de5\u4f5c\u3002</p> </li> <li> <p>Scrum\u5927\u5e08(Scrum Master)\uff1aSM\u7684\u804c\u8d23\u662f\u5e2e\u52a9\u56e2\u961f\u9075\u5faaScrum\u6d41\u7a0b\uff0c\u6e05\u9664\u969c\u788d\uff0c\u786e\u4fdd\u4ed6\u4eec\u80fd \u9ad8\u6548\u5730\u5de5\u4f5c\u3002</p> </li> </ul> <p>Scrum\u5de5\u4f5c\u5468\u671f\u88ab\u79f0\u4e3aSprint\uff08\u8fed\u4ee3\uff09\uff0c\u901a\u5e38\u662f2\u52304\u5468\u3002\u5728\u6bcf\u4e2aSprint\u5f00\u59cb\u4e4b\u524d\uff0c\u56e2\u961f\u548c\u4ea7 \u54c1\u8d1f\u8d23\u4eba\u4f1a\u5f00\u4f1a\u786e\u5b9a\u8981\u5b9e\u73b0\u7684\u529f\u80fd\u548c\u76ee\u6807\u3002\u7136\u540e\u56e2\u961f\u4f1a\u5236\u5b9a\u4e00\u4e2a\u8ba1\u5212\uff0c\u51b3\u5b9a\u5982\u4f55\u5728Sprint\u671f \u95f4\u5b8c\u6210\u8fd9\u4e9b\u529f\u80fd\u3002</p> <p>\u6bcf\u5929\uff0c\u56e2\u961f\u90fd\u4f1a\u8fdb\u884c\u77ed\u6682\u7684\u65e5\u5e38\u7ad9\u4f1a(Daily Scrum)\uff0c\u5927\u7ea615\u5206\u949f\uff0c\u5206\u4eab\u4ed6\u4eec\u6628\u5929\u5b8c\u6210\u4e86\u4ec0 \u4e48\uff0c\u4eca\u5929\u8981\u505a\u4ec0\u4e48\uff0c\u4ee5\u53ca\u9047\u5230\u4e86\u54ea\u4e9b\u95ee\u9898\u3002\u8fd9\u6709\u52a9\u4e8e\u56e2\u961f\u4fdd\u6301\u6c9f\u901a\u548c\u5bf9\u76ee\u6807\u7684\u4e13\u6ce8\u3002</p> <p>Sprint\u7ed3\u675f\u65f6\uff0c\u56e2\u961f\u4f1a\u8fdb\u884c\u4e00\u4e2a\u56de\u987e\u4f1a(Sprint Review)\uff0c\u5411\u5229\u76ca\u76f8\u5173\u8005\u6f14\u793a\u4ed6\u4eec\u5b8c\u6210\u7684\u5de5 \u4f5c\uff0c\u5e76\u63a5\u53d7\u53cd\u9988\u3002\u7136\u540e\u4ed6\u4eec\u4f1a\u8fdb\u884cSprint\u603b\u7ed3\u4f1a(Sprint Retrospective)\uff0c\u8ba8\u8bba\u5728Sprint\u8fc7 \u7a0b\u4e2d\u9047\u5230\u7684\u95ee\u9898\uff0c\u4ee5\u53ca\u5982\u4f55\u6539\u8fdb\u5de5\u4f5c\u65b9\u5f0f\u3002</p> <p>Scrum\u7684\u4f18\u52bf\u5728\u4e8e\uff1a</p> <p>\u7075\u6d3b\u6027\uff1a\u53ef\u4ee5\u6839\u636e\u9700\u6c42\u8fdb\u884c\u8c03\u6574\u548c\u6539\u8fdb\u3002\u900f\u660e\u5ea6\uff1a\u6240\u6709\u4eba\u90fd\u77e5\u9053\u9879\u76ee\u7684\u8fdb\u5c55\u60c5\u51b5\u548c\u56f0\u96be\u3002\u6301 \u7eed\u6539\u8fdb\uff1a\u56e2\u961f\u4e0d\u65ad\u627e\u5230\u6539\u8fdb\u5de5\u4f5c\u7684\u65b9\u6cd5\uff0c\u63d0\u9ad8\u6548\u7387\u3002</p>"},{"location":"knowledge/software_development/scrum/scrum/#how-to-be-a-scrum-master","title":"How to be a Scrum Master","text":"<ol> <li> <p>\u6df1\u5165\u4e86\u89e3Scrum\uff1a \u786e\u4fdd\u4f60\u5bf9Scrum\u6846\u67b6\u3001\u539f\u5219\u548c\u4ef7\u503c\u89c2\u6709\u6df1\u5165\u7684\u7406\u89e3\u3002\u638c\u63e1Scrum\u7684\u5de5\u4f5c    \u6d41\u7a0b\u3001\u89d2\u8272\u548c\u4eea\u5f0f\uff0c\u4ee5\u4fbf\u80fd\u591f\u6709\u6548\u5730\u5f15\u5bfc\u56e2\u961f\u3002</p> </li> <li> <p>\u57f9\u517b\u534f\u8c03\u548c\u6c9f\u901a\u6280\u5de7\uff1a Scrum Master\u7684\u89d2\u8272\u5f3a\u8c03\u4fc3\u8fdb\u56e2\u961f\u5408\u4f5c\u548c\u6c9f\u901a\u3002\u4f60\u5e94\u8be5\u64c5\u957f\u503e    \u542c\u3001\u5f15\u5bfc\u8ba8\u8bba\uff0c\u5e76\u80fd\u89e3\u51b3\u6f5c\u5728\u7684\u51b2\u7a81\u3002</p> </li> <li> <p>\u5f15\u5bfc\u81ea\u7ec4\u7ec7\u56e2\u961f\uff1a Scrum\u56e2\u961f\u5e94\u8be5\u662f\u81ea\u7ec4\u7ec7\u7684\uff0cScrum Master\u7684\u89d2\u8272\u662f\u5e2e\u52a9\u56e2\u961f\u53d1\u6325\u6700    \u4f73\u6c34\u5e73\u3002\u9f13\u52b1\u6210\u5458\u627f\u62c5\u8d23\u4efb\uff0c\u540c\u65f6\u63d0\u4f9b\u652f\u6301\u548c\u8d44\u6e90\u3002</p> </li> <li> <p>\u89e3\u51b3\u969c\u788d\uff1a \u786e\u4fdd\u56e2\u961f\u5728\u5f00\u53d1\u8fc7\u7a0b\u4e2d\u4e0d\u53d7\u963b\u788d\uff0c\u53ca\u65f6\u89e3\u51b3\u95ee\u9898\u548c\u969c\u788d\uff0c\u5e2e\u52a9\u56e2\u961f\u987a\u5229\u63a8    \u8fdb\u3002</p> </li> <li> <p>\u4fdd\u62a4\u56e2\u961f\uff1a \u5728Sprint\u671f\u95f4\uff0c\u786e\u4fdd\u56e2\u961f\u4e0d\u4f1a\u53d7\u5230\u5e72\u6270\uff0c\u4fdd\u6301\u4e13\u6ce8\uff0c\u4e0d\u8981\u53d7\u5230\u8fc7\u591a\u7684\u5916\u90e8\u538b    \u529b\u3002</p> </li> <li> <p>\u6301\u7eed\u5b66\u4e60\uff1a Scrum Master\u5e94\u8be5\u65f6\u523b\u4fdd\u6301\u5b66\u4e60\u7684\u6001\u5ea6\uff0c\u4e86\u89e3\u65b0\u7684\u5de5\u5177\u3001\u6280\u672f\u548c\u6700\u4f73\u5b9e\u8df5\uff0c    \u4ee5\u63d0\u9ad8Scrum\u56e2\u961f\u7684\u6548\u7387\u548c\u8d28\u91cf\u3002</p> </li> <li> <p>\u5173\u6ce8\u56e2\u961f\u52a8\u6001\uff1a \u7559\u610f\u56e2\u961f\u6210\u5458\u4e4b\u95f4\u7684\u76f8\u4e92\u4f5c\u7528\u548c\u52a8\u6001\u3002\u4e86\u89e3\u56e2\u961f\u6210\u5458\u7684\u9700\u6c42\uff0c\u5e2e\u52a9\u4ed6\u4eec    \u8fbe\u5230\u6700\u4f73\u72b6\u6001\u3002</p> </li> <li> <p>\u6559\u7ec3\u6280\u80fd\uff1a \u6210\u4e3a\u56e2\u961f\u6210\u5458\u548c\u5229\u76ca\u76f8\u5173\u8005\u7684\u6559\u7ec3\uff0c\u5e2e\u52a9\u4ed6\u4eec\u7406\u89e3Scrum\u5e76\u9075\u5faa\u6700\u4f73\u5b9e\u8df5\u3002</p> </li> <li> <p>\u4fc3\u8fdb\u6301\u7eed\u6539\u8fdb\uff1a \u5728Sprint Retrospective\u4e2d\u9f13\u52b1\u56e2\u961f\u53d1\u73b0\u95ee\u9898\uff0c\u5e76\u5e2e\u52a9\u4ed6\u4eec\u627e\u5230\u6539\u8fdb\u65b9    \u6cd5\uff0c\u786e\u4fdd\u56e2\u961f\u5728\u6bcf\u4e2aSprint\u90fd\u80fd\u53d8\u5f97\u66f4\u597d\u3002</p> </li> <li> <p>\u9002\u5e94\u6027\u548c\u7075\u6d3b\u6027\uff1a Scrum Master\u9700\u8981\u9002\u5e94\u4e0d\u540c\u7684\u60c5\u51b5\u548c\u56e2\u961f\u6587\u5316\uff0c\u7075\u6d3b\u5e94\u5bf9\u53d8\u5316\u3002</p> </li> <li> <p>\u652f\u6301\u4ea7\u54c1\u8d1f\u8d23\u4eba\uff1a \u4e0e\u4ea7\u54c1\u8d1f\u8d23\u4eba\u5bc6\u5207\u5408\u4f5c\uff0c\u786e\u4fdd\u4ea7\u54c1\u5f85\u529e\u6e05\u5355\uff08Product Backlog\uff09\u7684    \u4f18\u5148\u7ea7\u548c\u5185\u5bb9\u660e\u786e\u3002</p> </li> <li> <p>\u6811\u7acb\u699c\u6837\uff1a \u6210\u4e3a\u56e2\u961f\u7684\u699c\u6837\uff0c\u5c55\u73b0\u79ef\u6781\u7684\u5de5\u4f5c\u6001\u5ea6\u548c\u4ef7\u503c\u89c2\u3002</p> </li> </ol> <p>\u6700\u540e\uff0cScrum Master\u4e0d\u662f\u9879\u76ee\u7ecf\u7406\u6216\u9886\u5bfc\u8005\uff0c\u800c\u662f\u4fc3\u8fdb\u56e2\u961f\u81ea\u4e3b\u548c\u534f\u4f5c\u7684\u654f\u6377\u6559\u7ec3\u3002\u5e2e\u52a9\u56e2 \u961f\u53d1\u6325\u6700\u4f73\u6c34\u5e73\uff0c\u5e76\u81f4\u529b\u4e8e\u8ba9\u56e2\u961f\u5728\u654f\u6377\u5f00\u53d1\u8fc7\u7a0b\u4e2d\u53d6\u5f97\u6210\u529f\u3002</p>"},{"location":"knowledge/tech/","title":"Technology","text":""},{"location":"knowledge/tech/#technology","title":"Technology","text":""},{"location":"knowledge/tech/#performance-tuning-tools","title":"Performance tuning tools","text":""},{"location":"knowledge/tech/#web","title":"Web","text":"<ul> <li>How to register domain name</li> </ul>"},{"location":"knowledge/tech/#testing","title":"Testing","text":""},{"location":"knowledge/tech/#testing-method","title":"Testing method","text":"<ul> <li>\u5951\u7ea6\u6d4b\u8bd5</li> <li>Mutation testing</li> </ul>"},{"location":"knowledge/tech/#file-system","title":"File system","text":""},{"location":"knowledge/tech/#distribute-file-system","title":"Distribute file system","text":""},{"location":"knowledge/tech/#db","title":"DB","text":"<ul> <li>ACID</li> <li>Vault</li> </ul>"},{"location":"knowledge/tech/db/acid/","title":"ACID","text":""},{"location":"knowledge/tech/db/acid/#acid","title":"ACID","text":"<p>The acronym ACID refers to the four key properties of a transaction: atomicity, consistency, isolation, and durability.</p>"},{"location":"knowledge/tech/db/acid/#atomicity","title":"Atomicity","text":"<p>All changes to data are performed as if they are a single operation. That is, all the changes are performed, or none of them are.</p> <p>For example, in an application that transfers funds from one account to another, the atomicity property ensures that, if a debit is made successfully from one account, the corresponding credit is made to the other account.</p>"},{"location":"knowledge/tech/db/acid/#consistency","title":"Consistency","text":"<p>Data is in a consistent state when a transaction starts and when it ends.</p> <p>For example, in an application that transfers funds from one account to another, the consistency property ensures that the total value of funds in both the accounts is the same at the start and end of each transaction.</p>"},{"location":"knowledge/tech/db/acid/#isolation","title":"Isolation","text":"<p>The intermediate state of a transaction is invisible to other transactions. As a result, transactions that run concurrently appear to be serialized.</p> <p>For example, in an application that transfers funds from one account to another, the isolation property ensures that another transaction sees the transferred funds in one account or the other, but not in both, nor in neither.</p>"},{"location":"knowledge/tech/db/acid/#durability","title":"Durability","text":"<p>After a transaction successfully completes, changes to data persist and are not undone, even in the event of a system failure.</p> <p>For example, in an application that transfers funds from one account to another, the durability property ensures that the changes made to each account will not be reversed.</p>"},{"location":"knowledge/tech/db/vault/","title":"Vault","text":""},{"location":"knowledge/tech/db/vault/#vault","title":"Vault","text":""},{"location":"knowledge/tech/db/vault/#what-is-hashicorp-vault","title":"What is HashiCorp Vault?","text":"<p>HashiCorp Vault is a popular open-source tool that provides secure secrets management, data encryption, and identity-based access management for modern applications and infrastructure. It helps organizations keep sensitive information, such as passwords, API keys, tokens, and certificates, secure and easily accessible by authorized users and applications.</p>"},{"location":"knowledge/tech/db/vault/#key-concepts-in-vault","title":"Key Concepts in Vault","text":"<ol> <li> <p>Secrets: Secrets are any sensitive pieces of information that need to be    protected, such as database credentials, SSH keys, encryption keys, and API    tokens. Vault provides a secure storage mechanism for secrets, ensuring they    are encrypted both at rest and in transit.</p> </li> <li> <p>Encryption as a Service (EaaS): Vault can be used as a centralized    service to perform encryption and decryption operations, ensuring that    sensitive data remains secure even if stored in untrusted environments.</p> </li> <li> <p>Dynamic Secrets: Vault can generate dynamic secrets on-demand for various    backends, such as databases, cloud providers, and more. Dynamic secrets are    short-lived, reducing the risk of unauthorized access to long-lived    credentials.</p> </li> <li> <p>Authentication Methods: Vault supports various authentication methods to    verify the identity of users or applications before granting access to    secrets. Common methods include tokens, usernames/passwords, AWS IAM,    Kubernetes service accounts, and more.</p> </li> <li> <p>Authorization Policies: Once authenticated, users or applications are    subject to authorization policies that define what operations they can    perform within Vault. Policies are written using HashiCorp Configuration    Language (HCL).</p> </li> <li> <p>Leases and Renewals: Vault issues time-limited tokens or leases to users    and applications upon successful authentication. Users must periodically    renew these leases to maintain access. If not renewed or revoked, the leases    expire automatically, ensuring security.</p> </li> <li> <p>Seal/Unseal Mechanism: Vault uses a \u201cseal\u201d mechanism to protect the    encrypted data. When Vault starts, it\u2019s in a sealed state, and secret data is    inaccessible. The administrator needs to \u201cunseal\u201d Vault by providing the    required number of unseal keys or by using an external key provider.</p> </li> <li> <p>High Availability (HA): Vault can be deployed in a highly available mode    to ensure reliability and fault tolerance. In an HA setup, multiple Vault    nodes work together to provide uninterrupted service even if some nodes fail.</p> </li> </ol>"},{"location":"knowledge/tech/db/vault/#summary","title":"Summary","text":"<p>Vault is a powerful tool with many features, so it\u2019s essential to understand its concepts and take security seriously when using it to safeguard sensitive information in your infrastructure and applications. HashiCorp provides comprehensive documentation and tutorials that can help you along your journey with Vault.</p>"},{"location":"knowledge/tech/db/vault/#references","title":"References","text":"<ul> <li>Vault</li> </ul>"},{"location":"knowledge/tech/file_system/distribute_filesystem/","title":"Distribute file system","text":""},{"location":"knowledge/tech/file_system/distribute_filesystem/#distribute-file-system","title":"Distribute file system","text":""},{"location":"knowledge/tech/file_system/distribute_filesystem/#hadoop-distributed-file-system-hdfs","title":"Hadoop Distributed File System (HDFS)","text":"<p>HDFS\u662fApache Hadoop\u751f\u6001\u7cfb\u7edf\u7684\u4e00\u90e8\u5206\uff0c\u6700\u521d\u7531Google\u7684GFS\uff08Google File System\uff09\u8bba\u6587 \u542f\u53d1\u800c\u6765\u3002\u5b83\u8bbe\u8ba1\u7528\u4e8e\u5728\u5ec9\u4ef7\u786c\u4ef6\u4e0a\u5b58\u50a8\u6d77\u91cf\u6570\u636e\uff0c\u5e76\u63d0\u4f9b\u9ad8\u5bb9\u9519\u6027\u3002HDFS\u5c06\u5927\u6587\u4ef6\u5207\u5206\u6210 \u591a\u4e2a\u6570\u636e\u5757\uff0c\u5e76\u5728\u591a\u4e2a\u8282\u70b9\u4e0a\u8fdb\u884c\u5206\u5e03\u5f0f\u5b58\u50a8\u3002\u5b83\u9002\u7528\u4e8e\u6279\u5904\u7406\u4f5c\u4e1a\uff0c\u5982Hadoop MapReduce \u7b49\u3002</p>"},{"location":"knowledge/tech/file_system/distribute_filesystem/#ceph","title":"Ceph","text":"<p>Ceph\u662f\u4e00\u4e2a\u5f00\u6e90\u7684\u3001\u81ea\u6211\u4fee\u590d\u7684\u5206\u5e03\u5f0f\u5b58\u50a8\u7cfb\u7edf\uff0c\u53ef\u4ee5\u901a\u8fc7\u591a\u4e2a\u5bf9\u8c61\u5b58\u50a8\u3001\u5757\u5b58\u50a8\u548c\u6587\u4ef6\u7cfb \u7edf\u63a5\u53e3\u8bbf\u95ee\u6570\u636e\u3002Ceph\u8bbe\u8ba1\u7528\u4e8e\u5728\u53ef\u6269\u5c55\u96c6\u7fa4\u4e0a\u63d0\u4f9b\u9ad8\u6027\u80fd\u3001\u9ad8\u53ef\u9760\u6027\u548c\u9ad8\u53ef\u7528\u6027\u3002\u5b83\u5e7f\u6cdb \u7528\u4e8e\u4e91\u8ba1\u7b97\u73af\u5883\u4e2d\uff0c\u652f\u6301\u591a\u4e2a\u6570\u636e\u4e2d\u5fc3\u7684\u590d\u5236\u548c\u5bb9\u707e\u3002</p>"},{"location":"knowledge/tech/file_system/distribute_filesystem/#glusterfs","title":"GlusterFS","text":"<p>GlusterFS\u662f\u4e00\u4e2a\u5206\u5e03\u5f0f\u6587\u4ef6\u7cfb\u7edf\uff0c\u53ef\u4ee5\u6a2a\u5411\u6269\u5c55\u5230\u6210\u767e\u4e0a\u5343\u7684\u670d\u52a1\u5668\u3002\u5b83\u4f7f\u7528\u53ef\u6269\u5c55\u7684\u5b58 \u50a8\u6c60\u548c\u5206\u5e03\u5f0f\u5377\u6765\u5b58\u50a8\u6570\u636e\u3002GlusterFS\u63d0\u4f9b\u6587\u4ef6\u7ea7\u522b\u7684\u8bbf\u95ee\uff0c\u5e76\u652f\u6301\u591a\u79cd\u6570\u636e\u590d\u5236\u6a21\u5f0f\uff0c \u4ee5\u63d0\u4f9b\u9ad8\u53ef\u7528\u6027\u3002</p>"},{"location":"knowledge/tech/performance/performance_tuning_tools/","title":"Linux performance tuning tools","text":""},{"location":"knowledge/tech/performance/performance_tuning_tools/#linux-performance-tuning-tools","title":"Linux performance tuning tools","text":"<p>All the pictures are collect from Brendan Gregg\u2019s blog.</p>"},{"location":"knowledge/tech/performance/performance_tuning_tools/#linux-performance-tuning-tools_1","title":"Linux Performance tuning tools","text":""},{"location":"knowledge/tech/performance/performance_tuning_tools/#linux-benchmarking-tools","title":"Linux Benchmarking tools","text":""},{"location":"knowledge/tech/performance/performance_tuning_tools/#linux-observability-tools","title":"Linux observability tools","text":""},{"location":"knowledge/tech/performance/performance_tuning_tools/#sar","title":"Sar","text":""},{"location":"knowledge/tech/performance/performance_tuning_tools/#perf-tools","title":"Perf tools","text":""},{"location":"knowledge/tech/performance/performance_tuning_tools/#bpf-tracing-tools","title":"BPF tracing tools","text":""},{"location":"knowledge/tech/performance/performance_tuning_tools/#bpf-performance-tools","title":"BPF performance tools","text":""},{"location":"knowledge/tech/testing/mutation_testing/","title":"Mutation testing","text":""},{"location":"knowledge/tech/testing/mutation_testing/#mutation-testing","title":"Mutation testing","text":""},{"location":"knowledge/tech/testing/mutation_testing/#what","title":"What","text":"<p>Mutation testing is the practice of making better code by introducing bugs.</p> <p>\u53d8\u5f02\u6d4b\u8bd5\u662f\u4e00\u79cd\u8f6f\u4ef6\u6d4b\u8bd5\u6280\u672f\uff0c\u65e8\u5728\u8bc4\u4f30\u6d4b\u8bd5\u7528\u4f8b\u7684\u8d28\u91cf\u548c\u53d1\u73b0\u4ee3\u7801\u4e2d\u7684\u7f3a\u9677\u3002\u5b83\u7684\u57fa\u672c\u601d \u60f3\u662f\u901a\u8fc7\u5bf9\u7a0b\u5e8f\u4ee3\u7801\u505a\u51fa\u5c0f\u7684\u4fee\u6539\uff0c\u751f\u6210\u8bb8\u591a\u53d8\u5f02\u4f53\uff08\u5373\u53d8\u5f02\u7248\u672c\uff09\uff0c\u7136\u540e\u4f7f\u7528\u8fd9\u4e9b\u53d8\u5f02\u4f53 \u6765\u6267\u884c\u6d4b\u8bd5\u7528\u4f8b\u3002\u53d8\u5f02\u4f53\u5728\u6e90\u4ee3\u7801\u4e2d\u5f15\u5165\u4e86\u6709\u610f\u4e49\u7684\u9519\u8bef\u6216\u7f3a\u9677\uff0c\u4ee5\u6a21\u62df\u6f5c\u5728\u7684\u7a0b\u5e8f\u9519\u8bef\u3002</p> <pre><code>\ngraph TD\nA[\u5f00\u59cb]\nB[\u751f\u6210\u53d8\u5f02\u4f53]\nC[\u9009\u62e9\u6d4b\u8bd5\u7528\u4f8b]\nD[\u6267\u884c\u6d4b\u8bd5\u7528\u4f8b]\nE[\u68c0\u6d4b\u53d8\u5f02\u4f53\u7684\u6740\u6b7b]\nF[\u8ba1\u7b97\u53d8\u5f02\u4f53\u7684\u6740\u622e\u6307\u6807]\nG[\u5b8c\u6210]\n\nA --&gt; B\nB --&gt; C\nC --&gt; D\nD --&gt; E\nE --&gt; F\nF --&gt; G\nE --&gt; C\n\n</code></pre>"},{"location":"knowledge/tech/testing/mutation_testing/#how","title":"How","text":"<p>\u53d8\u5f02\u6d4b\u8bd5\u7684\u6b65\u9aa4\u5982\u4e0b\uff1a</p> <ol> <li> <p>\u53d8\u5f02\u4f53\u751f\u6210\uff1a\u901a\u8fc7\u5bf9\u6e90\u4ee3\u7801\u8fdb\u884c\u4e00\u7cfb\u5217\u5c0f\u7684\u6539\u52a8\uff08\u4f8b\u5982\u63d2\u5165\u3001\u5220\u9664\u3001\u4fee\u6539\u8bed\u53e5\uff09\uff0c\u751f\u6210 \u4e00\u7ec4\u53d8\u5f02\u4f53\u3002\u6bcf\u4e2a\u53d8\u5f02\u4f53\u90fd\u4ee3\u8868\u4e86\u5bf9\u539f\u59cb\u4ee3\u7801\u7684\u4e00\u79cd\u53d8\u5f02\u3002</p> </li> <li> <p>\u6d4b\u8bd5\u7528\u4f8b\u6267\u884c\uff1a\u5bf9\u6bcf\u4e2a\u53d8\u5f02\u4f53\u5e94\u7528\u76f8\u540c\u7684\u6d4b\u8bd5\u7528\u4f8b\u96c6\u5408\u3002\u6d4b\u8bd5\u7528\u4f8b\u662f\u8bbe\u8ba1\u7528\u6765\u8986\u76d6\u4e0d\u540c \u7a0b\u5e8f\u8def\u5f84\u548c\u529f\u80fd\u7684\u8f93\u5165\u6570\u636e\u3002</p> </li> <li> <p>\u68c0\u6d4b\u53d8\u5f02\u4f53\u7684\u6740\u6b7b\uff1a\u5982\u679c\u4e00\u4e2a\u53d8\u5f02\u4f53\u88ab\u67d0\u4e2a\u6d4b\u8bd5\u7528\u4f8b\u6740\u6b7b\uff0c\u610f\u5473\u7740\u6d4b\u8bd5\u7528\u4f8b\u80fd\u591f\u63ed\u793a\u53d8 \u5f02\u4f53\u4e2d\u5f15\u5165\u7684\u9519\u8bef\u3002\u8fd9\u4e2a\u6d4b\u8bd5\u7528\u4f8b\u88ab\u79f0\u4e3a\u201d\u6740\u624b\u6d4b\u8bd5\u7528\u4f8b\u201d\u3002</p> </li> <li> <p>\u53d8\u5f02\u4f53\u7684\u6740\u622e\u6307\u6807\uff1a\u6839\u636e\u88ab\u6740\u6b7b\u7684\u53d8\u5f02\u4f53\u6570\u91cf\u548c\u603b\u53d8\u5f02\u4f53\u6570\u76ee\uff0c\u8ba1\u7b97\u53d8\u5f02\u4f53\u7684\u6740\u622e\u6307 \u6807\u3002\u8fd9\u4e2a\u6307\u6807\u8868\u793a\u6d4b\u8bd5\u7528\u4f8b\u96c6\u5408\u5bf9\u4e8e\u68c0\u6d4b\u6f5c\u5728\u9519\u8bef\u7684\u6548\u80fd\u3002</p> </li> </ol> <p>\u901a\u8fc7\u6267\u884c\u53d8\u5f02\u6d4b\u8bd5\uff0c\u60a8\u53ef\u4ee5\u83b7\u5f97\u4ee5\u4e0b\u4f18\u70b9\uff1a</p> <ul> <li> <p>\u53d1\u73b0\u6d4b\u8bd5\u7528\u4f8b\u4e0d\u8db3\u4e4b\u5904\uff1a\u53d8\u5f02\u6d4b\u8bd5\u53ef\u4ee5\u68c0\u6d4b\u6d4b\u8bd5\u7528\u4f8b\u96c6\u5408\u5bf9\u4e8e\u6355\u6349\u6f5c\u5728\u9519\u8bef\u7684\u8986\u76d6\u7a0b\u5ea6\u3002 \u5982\u679c\u67d0\u4e9b\u53d8\u5f02\u4f53\u5f88\u5c11\u88ab\u6740\u6b7b\uff0c\u8bf4\u660e\u6d4b\u8bd5\u7528\u4f8b\u9700\u8981\u66f4\u597d\u5730\u8986\u76d6\u76f8\u5e94\u7684\u4ee3\u7801\u533a\u57df\u3002</p> </li> <li> <p>\u68c0\u6d4b\u4ee3\u7801\u7f3a\u9677\uff1a\u901a\u8fc7\u5f15\u5165\u6709\u610f\u4e49\u7684\u9519\u8bef\u548c\u7f3a\u9677\uff0c\u53d8\u5f02\u6d4b\u8bd5\u53ef\u4ee5\u5e2e\u52a9\u53d1\u73b0\u4ee3\u7801\u4e2d\u5b58\u5728\u7684\u6f5c\u5728 \u95ee\u9898\u3002\u6bcf\u4e2a\u53d8\u5f02\u4f53\u90fd\u4ee3\u8868\u4e86\u4e00\u79cd\u9519\u8bef\u7c7b\u578b\uff0c\u53ef\u4ee5\u8bc4\u4f30\u7cfb\u7edf\u5bf9\u8fd9\u4e9b\u9519\u8bef\u7684\u68c0\u6d4b\u80fd\u529b\u3002</p> </li> <li> <p>\u63d0\u9ad8\u6d4b\u8bd5\u7528\u4f8b\u8d28\u91cf\uff1a\u53d8\u5f02\u6d4b\u8bd5\u53ef\u4ee5\u5e2e\u52a9\u8bc6\u522b\u548c\u6539\u8fdb\u6d4b\u8bd5\u7528\u4f8b\u7684\u8d28\u91cf\uff0c\u4ece\u800c\u63d0\u9ad8\u8f6f\u4ef6\u7cfb\u7edf\u7684 \u6574\u4f53\u53ef\u9760\u6027\u548c\u7a33\u5b9a\u6027\u3002</p> </li> </ul>"},{"location":"knowledge/tech/testing/mutation_testing/#_1","title":"\u6d4b\u8bd5\u6846\u67b6","text":"<ul> <li>Java-Pitest</li> <li>go-mutesting</li> </ul>"},{"location":"knowledge/tech/testing/mutation_testing/#references","title":"References","text":"<ul> <li>https://en.wikipedia.org/wiki/Mutation_testing</li> <li>https://github.com/theofidry/awesome-mutation-testing</li> <li>https://dev.to/guilhermeguitte/mutation-testing-on-go-1lbf</li> <li>https://pitest.org/quickstart/mutators/</li> <li>https://time.geekbang.org/column/article/519677</li> <li>https://www.infoq.cn/article/test-coverage-rate-role</li> </ul>"},{"location":"knowledge/tech/testing/pact_testing/","title":"\u5951\u7ea6\u6d4b\u8bd5","text":""},{"location":"knowledge/tech/testing/pact_testing/#_1","title":"\u5951\u7ea6\u6d4b\u8bd5","text":""},{"location":"knowledge/tech/testing/pact_testing/#_2","title":"\u4ec0\u4e48\u662f\u5951\u7ea6\u6d4b\u8bd5","text":"<p>\u5f53\u6211\u4eec\u8ba8\u8bba\u5951\u7ea6\u6d4b\u8bd5\uff08Consumer Driven Contracts\uff0cCDC\uff09\u65f6\uff0c\u5b83\u662f\u4e00\u79cd\u8f6f\u4ef6\u5f00\u53d1\u4e2d\u7684\u6d4b\u8bd5 \u65b9\u6cd5\uff0c\u65e8\u5728\u786e\u4fdd\u5728\u4e0d\u540c\u670d\u52a1\u4e4b\u95f4\u7684\u96c6\u6210\u4e2d\u4fdd\u6301\u4e00\u81f4\u6027\u548c\u53ef\u9760\u6027\u3002</p> <p>\u5728\u4f20\u7edf\u7684\u96c6\u6210\u6d4b\u8bd5\u4e2d\uff0c\u901a\u5e38\u4f1a\u4f7f\u7528\u4e00\u79cd\u4e2d\u5fc3\u5316\u7684\u65b9\u6cd5\uff0c\u5176\u4e2d\u4e00\u4e2a\u670d\u52a1\uff08\u901a\u5e38\u662f\u4f9b\u5e94\u8005\uff09\u63d0\u4f9b \u4e00\u4e2a\u5951\u7ea6\u6216\u63a5\u53e3\u5b9a\u4e49\uff0c\u7136\u540e\u5176\u4ed6\u670d\u52a1\uff08\u901a\u5e38\u662f\u6d88\u8d39\u8005\uff09\u7f16\u5199\u6d4b\u8bd5\u6765\u9a8c\u8bc1\u4ed6\u4eec\u7684\u5b9e\u73b0\u662f\u5426\u7b26\u5408 \u8fd9\u4e2a\u5951\u7ea6\u3002\u8fd9\u79cd\u65b9\u6cd5\u7684\u95ee\u9898\u662f\uff0c\u6d88\u8d39\u8005\u7684\u9700\u6c42\u548c\u671f\u671b\u65e0\u6cd5\u5b8c\u5168\u4f53\u73b0\u5728\u5951\u7ea6\u4e2d\uff0c\u56e0\u6b64\u53ef\u80fd\u4f1a\u5bfc \u81f4\u96c6\u6210\u95ee\u9898\u3002</p> <p>CDC\u7684\u65b9\u6cd5\u4e0e\u4e4b\u4e0d\u540c\uff0c\u5b83\u7740\u91cd\u4e8e\u6d88\u8d39\u8005\u7684\u9700\u6c42\uff0c\u5e76\u5141\u8bb8\u6d88\u8d39\u8005\u5b9a\u4e49\u5951\u7ea6\u3002\u5728CDC\u4e2d\uff0c\u6bcf\u4e2a\u6d88\u8d39 \u8005\u90fd\u53ef\u4ee5\u4e3a\u5176\u4e0e\u4f9b\u5e94\u8005\u7684\u4ea4\u4e92\u5b9a\u4e49\u81ea\u5df1\u7684\u5951\u7ea6\u3002\u8fd9\u4e2a\u5951\u7ea6\u63cf\u8ff0\u4e86\u6d88\u8d39\u8005\u5e0c\u671b\u4f9b\u5e94\u8005\u5c65\u884c\u7684\u884c \u4e3a\u548c\u671f\u671b\u3002\u4f9b\u5e94\u8005\u4f1a\u6839\u636e\u8fd9\u4e9b\u5951\u7ea6\u7f16\u5199\u6d4b\u8bd5\u6765\u9a8c\u8bc1\u5176\u5b9e\u73b0\u662f\u5426\u7b26\u5408\u6d88\u8d39\u8005\u7684\u8981\u6c42\u3002\u8fd9\u6837\u4e00 \u6765\uff0c\u6d88\u8d39\u8005\u548c\u4f9b\u5e94\u8005\u4e4b\u95f4\u7684\u96c6\u6210\u95ee\u9898\u53ef\u4ee5\u5728\u5f00\u53d1\u9636\u6bb5\u5c31\u88ab\u53d1\u73b0\u548c\u89e3\u51b3\u3002</p> <p>CDC\u7684\u4f18\u52bf\u5728\u4e8e\u5b83\u80fd\u591f\u63d0\u4f9b\u66f4\u597d\u7684\u534f\u4f5c\u548c\u89e3\u8026\u3002\u6d88\u8d39\u8005\u53ef\u4ee5\u72ec\u7acb\u5730\u5b9a\u4e49\u548c\u66f4\u65b0\u5951\u7ea6\uff0c\u800c\u4f9b\u5e94 \u8005\u5219\u53ef\u4ee5\u6839\u636e\u8fd9\u4e9b\u5951\u7ea6\u6765\u6d4b\u8bd5\u548c\u9a8c\u8bc1\u4ed6\u4eec\u7684\u5b9e\u73b0\u3002\u8fd9\u79cd\u65b9\u5f0f\u4f7f\u5f97\u4e0d\u540c\u670d\u52a1\u4e4b\u95f4\u7684\u96c6\u6210\u66f4\u52a0\u7075 \u6d3b\u548c\u53ef\u9760\uff0c\u56e0\u4e3a\u4efb\u4f55\u53d8\u5316\u90fd\u4f1a\u5728\u6d4b\u8bd5\u9636\u6bb5\u88ab\u53ca\u65f6\u53d1\u73b0\u5e76\u89e3\u51b3\u3002</p> <p>\u603b\u7ed3\u8d77\u6765\uff0c\u5951\u7ea6\u6d4b\u8bd5\u662f\u4e00\u79cd\u901a\u8fc7\u6d88\u8d39\u8005\u5b9a\u4e49\u5951\u7ea6\u6765\u786e\u4fdd\u4e0d\u540c\u670d\u52a1\u4e4b\u95f4\u4e00\u81f4\u6027\u548c\u53ef\u9760\u6027\u7684\u6d4b\u8bd5 \u65b9\u6cd5\u3002\u5b83\u63d0\u4f9b\u4e86\u66f4\u597d\u7684\u534f\u4f5c\u548c\u89e3\u8026\uff0c\u5e76\u5e2e\u52a9\u5f00\u53d1\u4eba\u5458\u5728\u65e9\u671f\u53d1\u73b0\u548c\u89e3\u51b3\u96c6\u6210\u95ee\u9898\u3002</p>"},{"location":"knowledge/tech/testing/pact_testing/#api","title":"\u5951\u7ea6\u6d4b\u8bd5\u3001\u5355\u5143\u6d4b\u8bd5\u3001API\u6d4b\u8bd5\u548c\u96c6\u6210\u6d4b\u8bd5\u7684\u533a\u522b","text":"<p>\u5f53\u6d89\u53ca\u5230\u6d4b\u8bd5\u65b9\u6cd5\u65f6\uff0c\u5951\u7ea6\u6d4b\u8bd5\u3001\u5355\u5143\u6d4b\u8bd5\u3001API\u6d4b\u8bd5\u548c\u96c6\u6210\u6d4b\u8bd5\u662f\u51e0\u79cd\u4e0d\u540c\u7684\u65b9\u6cd5\uff0c\u7528\u4e8e \u6d4b\u8bd5\u8f6f\u4ef6\u7684\u4e0d\u540c\u65b9\u9762\u548c\u5c42\u6b21\u3002\u4ee5\u4e0b\u662f\u5b83\u4eec\u4e4b\u95f4\u7684\u533a\u522b\uff1a</p> <ol> <li> <p>\u5951\u7ea6\u6d4b\u8bd5\uff08Consumer Driven Contracts\uff09\uff1a    - \u5951\u7ea6\u6d4b\u8bd5\u5173\u6ce8\u4e0d\u540c\u670d\u52a1\u4e4b\u95f4\u7684\u96c6\u6210\uff0c\u4ee5\u786e\u4fdd\u4e00\u81f4\u6027\u548c\u53ef\u9760\u6027\u3002    - \u6d88\u8d39\u8005\u5b9a\u4e49\u5951\u7ea6\uff0c\u63cf\u8ff0\u4ed6\u4eec\u5bf9\u4f9b\u5e94\u8005\u7684\u671f\u671b\u548c\u884c\u4e3a\u3002    - \u5951\u7ea6\u6d4b\u8bd5\u901a\u8fc7\u9a8c\u8bc1\u4f9b\u5e94\u8005\u7684\u5b9e\u73b0\u662f\u5426\u7b26\u5408\u6d88\u8d39\u8005\u7684\u5951\u7ea6\u6765\u53d1\u73b0\u548c\u89e3\u51b3\u96c6\u6210\u95ee\u9898\u3002</p> </li> <li> <p>\u5355\u5143\u6d4b\u8bd5\uff08Unit Testing\uff09\uff1a    - \u5355\u5143\u6d4b\u8bd5\u662f\u5bf9\u8f6f\u4ef6\u4e2d\u6700\u5c0f\u7684\u53ef\u6d4b\u8bd5\u5355\u5143\uff08\u5982\u51fd\u6570\u3001\u65b9\u6cd5\u6216\u7c7b\uff09\u8fdb\u884c\u6d4b\u8bd5\u3002    - \u5b83\u7684\u76ee\u7684\u662f\u9a8c\u8bc1\u5355\u4e2a\u5355\u5143\u7684\u884c\u4e3a\u662f\u5426\u7b26\u5408\u9884\u671f\uff0c\u901a\u5e38\u5728\u5f00\u53d1\u8fc7\u7a0b\u4e2d\u8fdb\u884c\u3002    - \u5355\u5143\u6d4b\u8bd5\u901a\u8fc7\u63d0\u4f9b\u8f93\u5165\u5e76\u68c0\u67e5\u8f93\u51fa\uff0c\u5bf9\u5355\u5143\u7684\u5404\u4e2a\u65b9\u9762\u8fdb\u884c\u9a8c\u8bc1\u3002</p> </li> <li> <p>API\u6d4b\u8bd5\uff08API Testing\uff09\uff1a    - API\u6d4b\u8bd5\u662f\u9488\u5bf9\u5e94\u7528\u7a0b\u5e8f\u7f16\u7a0b\u63a5\u53e3\uff08API\uff09\u8fdb\u884c\u7684\u6d4b\u8bd5\u3002    - \u5b83\u7684\u76ee\u7684\u662f\u9a8c\u8bc1API\u7684\u529f\u80fd\u3001\u6027\u80fd\u548c\u5b89\u5168\u6027\u7b49\u65b9\u9762\u3002    - API\u6d4b\u8bd5\u901a\u5e38\u6d89\u53ca\u5bf9API\u7aef\u70b9\u7684\u8bf7\u6c42\u548c\u54cd\u5e94\u8fdb\u884c\u6d4b\u8bd5\uff0c\u4ee5\u786e\u4fdd\u5176\u884c\u4e3a\u7b26\u5408\u89c4\u8303\u548c\u9884\u671f\u3002</p> </li> <li> <p>\u96c6\u6210\u6d4b\u8bd5\uff08Integration Testing\uff09\uff1a    - \u96c6\u6210\u6d4b\u8bd5\u662f\u5728\u591a\u4e2a\u7ec4\u4ef6\u6216\u6a21\u5757\u4e4b\u95f4\u8fdb\u884c\u7684\u6d4b\u8bd5\uff0c\u4ee5\u9a8c\u8bc1\u5b83\u4eec\u5728\u96c6\u6210\u65f6\u662f\u5426\u6b63\u5e38\u5de5\u4f5c\u3002    - \u5b83\u7684\u76ee\u7684\u662f\u6d4b\u8bd5\u7ec4\u4ef6\u4e4b\u95f4\u7684\u63a5\u53e3\u548c\u4ea4\u4e92\uff0c\u5e76\u53d1\u73b0\u7531\u4e8e\u96c6\u6210\u800c\u5f15\u5165\u7684\u9519\u8bef\u3002    - \u96c6\u6210\u6d4b\u8bd5\u53ef\u4ee5\u6db5\u76d6\u4e0d\u540c\u5c42\u6b21\u7684\u96c6\u6210\uff0c\u5982\u6a21\u5757\u7ea7\u522b\u7684\u96c6\u6210\u6d4b\u8bd5\u3001\u7cfb\u7edf\u7ea7\u522b\u7684\u96c6\u6210\u6d4b\u8bd5      \u7b49\u3002</p> </li> </ol>"},{"location":"knowledge/tech/testing/pact_testing/#pact","title":"PACT","text":"<p>Pact\u662f\u4e00\u79cd\u6d41\u884c\u7684\u5951\u7ea6\u6d4b\u8bd5\u6846\u67b6\uff0c\u5b83\u7528\u4e8e\u5728\u670d\u52a1\u4e4b\u95f4\u8fdb\u884c\u5951\u7ea6\u6d4b\u8bd5\u3002Pact\u6846\u67b6\u7684\u6838\u5fc3\u601d\u60f3\u662f \u6d88\u8d39\u8005\u548c\u4f9b\u5e94\u8005\u4e4b\u95f4\u7684\u5951\u7ea6\u5b9a\u4e49\u548c\u9a8c\u8bc1\uff0c\u4ee5\u786e\u4fdd\u670d\u52a1\u4e4b\u95f4\u7684\u4e00\u81f4\u6027\u548c\u53ef\u9760\u6027\u3002</p> <p>Pact\u6846\u67b6\u7684\u4e3b\u8981\u7ec4\u6210\u90e8\u5206\u5305\u62ec\u6d88\u8d39\u8005\u7aef\u548c\u4f9b\u5e94\u8005\u7aef\u3002\u4e0b\u9762\u662f\u5b83\u4eec\u7684\u529f\u80fd\u548c\u5de5\u4f5c\u539f\u7406\u7684\u7b80\u8981\u4ecb \u7ecd\uff1a</p> <ol> <li> <p>\u6d88\u8d39\u8005\u7aef\uff1a    - \u6d88\u8d39\u8005\u662f\u4f7f\u7528\u670d\u52a1\u7684\u4e00\u65b9\uff0c\u4ed6\u4eec\u4f7f\u7528Pact\u6846\u67b6\u6765\u5b9a\u4e49\u5951\u7ea6\u3002    - \u6d88\u8d39\u8005\u5b9a\u4e49\u4e86\u4ed6\u4eec\u671f\u671b\u4ece\u4f9b\u5e94\u8005\u90a3\u91cc\u63a5\u6536\u7684\u8bf7\u6c42\u548c\u54cd\u5e94\uff0c\u5e76\u751f\u6210\u4e00\u4e2a\u5951\u7ea6\u6587\u4ef6\u3002    - \u5951\u7ea6\u6587\u4ef6\u63cf\u8ff0\u4e86\u6d88\u8d39\u8005\u7684\u8bf7\u6c42\u548c\u4f9b\u5e94\u8005\u5e94\u8be5\u54cd\u5e94\u7684\u9884\u671f\u7ed3\u679c\u3002</p> </li> <li> <p>\u4f9b\u5e94\u8005\u7aef\uff1a    - \u4f9b\u5e94\u8005\u662f\u63d0\u4f9b\u670d\u52a1\u7684\u4e00\u65b9\uff0c\u4ed6\u4eec\u4f7f\u7528Pact\u6846\u67b6\u6765\u9a8c\u8bc1\u5951\u7ea6\u3002    - \u4f9b\u5e94\u8005\u4f7f\u7528\u6d88\u8d39\u8005\u751f\u6210\u7684\u5951\u7ea6\u6587\u4ef6\u6765\u6a21\u62df\u6d88\u8d39\u8005\u7684\u8bf7\u6c42\uff0c\u5e76\u9a8c\u8bc1\u4ed6\u4eec\u7684\u670d\u52a1\u662f\u5426\u6b63\u786e      \u54cd\u5e94\u3002    - \u5982\u679c\u4f9b\u5e94\u8005\u7684\u5b9e\u73b0\u4e0e\u5951\u7ea6\u4e00\u81f4\uff0c\u6d4b\u8bd5\u5c06\u901a\u8fc7\uff1b\u5426\u5219\uff0c\u5c06\u62a5\u544a\u5951\u7ea6\u8fdd\u89c4\u6216\u4e0d\u4e00\u81f4\u7684\u9519      \u8bef\u3002</p> </li> </ol> <p>Pact\u6846\u67b6\u7684\u5de5\u4f5c\u6d41\u7a0b\u5982\u4e0b\uff1a</p> <ol> <li> <p>\u6d88\u8d39\u8005\u548c\u4f9b\u5e94\u8005\u4e4b\u95f4\u5b9a\u4e49\u5951\u7ea6\uff1a\u6d88\u8d39\u8005\u6839\u636e\u4ed6\u4eec\u5bf9\u4f9b\u5e94\u8005\u7684\u671f\u671b\uff0c\u5b9a\u4e49\u8bf7\u6c42\u548c\u9884\u671f\u54cd\u5e94    \u7684\u5951\u7ea6\u3002</p> </li> <li> <p>\u6d88\u8d39\u8005\u751f\u6210\u5951\u7ea6\u6587\u4ef6\uff1a\u6d88\u8d39\u8005\u4f7f\u7528Pact\u6846\u67b6\u751f\u6210\u5305\u542b\u5951\u7ea6\u4fe1\u606f\u7684\u6587\u4ef6\u3002\u8fd9\u4e2a\u5951\u7ea6\u6587\u4ef6\u5c06    \u88ab\u4f9b\u5e94\u8005\u4f7f\u7528\u3002</p> </li> <li> <p>\u4f9b\u5e94\u8005\u9a8c\u8bc1\u5951\u7ea6\uff1a\u4f9b\u5e94\u8005\u4f7f\u7528\u5951\u7ea6\u6587\u4ef6\u6765\u6a21\u62df\u6d88\u8d39\u8005\u7684\u8bf7\u6c42\uff0c\u5e76\u9a8c\u8bc1\u4ed6\u4eec\u7684\u670d\u52a1\u662f\u5426\u6309    \u7167\u5951\u7ea6\u7684\u8981\u6c42\u8fdb\u884c\u54cd\u5e94\u3002</p> </li> <li> <p>\u5951\u7ea6\u6d4b\u8bd5\u7ed3\u679c\uff1aPact\u6846\u67b6\u4f1a\u751f\u6210\u6d4b\u8bd5\u62a5\u544a\uff0c\u663e\u793a\u5951\u7ea6\u6d4b\u8bd5\u7684\u7ed3\u679c\u3002\u5982\u679c\u5951\u7ea6\u4e00\u81f4\uff0c\u6d4b\u8bd5    \u901a\u8fc7\uff1b\u5426\u5219\uff0c\u5c06\u663e\u793a\u5951\u7ea6\u8fdd\u89c4\u6216\u4e0d\u4e00\u81f4\u7684\u9519\u8bef\u3002</p> </li> </ol> <p>Pact\u6846\u67b6\u7684\u4f18\u52bf\u5305\u62ec\uff1a</p> <ul> <li>\u63d0\u4f9b\u4e86\u4e00\u79cd\u8f7b\u91cf\u7ea7\u4e14\u6613\u4e8e\u4f7f\u7528\u7684\u5951\u7ea6\u6d4b\u8bd5\u65b9\u6cd5\u3002</li> <li>\u5141\u8bb8\u6d88\u8d39\u8005\u548c\u4f9b\u5e94\u8005\u5728\u5f00\u53d1\u8fc7\u7a0b\u4e2d\u72ec\u7acb\u5730\u5b9a\u4e49\u548c\u9a8c\u8bc1\u5951\u7ea6\u3002</li> <li>\u901a\u8fc7\u65e9\u671f\u53d1\u73b0\u548c\u89e3\u51b3\u96c6\u6210\u95ee\u9898\uff0c\u4fc3\u8fdb\u4e86\u56e2\u961f\u4e4b\u95f4\u7684\u534f\u4f5c\u548c\u89e3\u8026\u3002</li> </ul>"},{"location":"knowledge/tech/testing/pact_testing/#references","title":"References","text":"<ul> <li>Contract testing asynchronous messaging with Pact and   MockK</li> <li>https://www.infoq.cn/article/U8walzaYhwOZQzsVypVj</li> <li>\u4f7f\u7528\u5951\u7ea6\u6d4b\u8bd5\u63d0\u9ad8\u5206\u5e03\u5f0f\u7cfb\u7edf\u7684\u8d28   \u91cf</li> <li>\u5951\u7ea6\u6d4b\u8bd5\u7406\u8bba\u7bc7</li> <li>\u5951\u7ea6\u6d4b\u8bd5\u5b9e\u8df5\u7bc7</li> <li>\u5fae\u670d\u52a1\u4e0b\u7684\u5951\u7ea6\u6d4b\u8bd5(CDC)\u89e3   \u8bfb</li> <li>pact-specification</li> <li>\u5951\u7ea6\u6d4b\u8bd5\uff1a\u89e3\u51b3\u5fae\u670d\u52a1\u6d4b\u8bd5\u7684\u95ee   \u9898</li> <li>\u5e72\u8d27\u65f6\u95f4\uff1a\u804a\u804a DevOps \u4e0b\u7684\u6280\u672f\u7cfb\u5217\u4e4b\u5951\u7ea6\u6d4b   \u8bd5</li> <li>\u96c6\u6210\u6d4b\u8bd5\uff08\u4e09\uff09\uff1a\u62a4\u822a\u5fae\u670d\u52a1\u96c6\u7fa4\u8fed\u4ee3\u5347   \u7ea7</li> <li>The Practical Test   Pyramid</li> <li>\u57fa\u4e8e\u5951\u7ea6\u7684\u5f00\u53d1\uff1a\u901a\u8fc7\u660e\u786e\u9700\u6c42\u4f18\u5316\u8f6f\u4ef6\u5f00\u53d1\u6d41   \u7a0b</li> <li>pact-workshop-go</li> </ul>"},{"location":"knowledge/tech/web/how_to_apply_domain_name/","title":"How to register domain name","text":""},{"location":"knowledge/tech/web/how_to_apply_domain_name/#how-to-register-domain-name","title":"How to register domain name","text":"<p>This blog elaborating on the process of domain name registration, from the initial application to the deployment of online business:</p> <ul> <li> <p>Select a domain name registrar</p> </li> <li> <p>Choose a reputable domain name registration service provider that suits your    requirements.</p> <ul> <li>Hua Wei cloud</li> <li>Tencent cloud</li> <li>Ali cloud</li> </ul> </li> <li> <p>Register with Alibaba Cloud and complete the authentication process</p> </li> <li> <p>Sign up with Alibaba Cloud and undergo the necessary identity verification    procedures.</p> </li> <li> <p>Create an information template</p> </li> <li> <p>Complying with the requirements of the    Ministry of Industry and Information Technology (MIIT) regarding domain name    registration, you need to provide user information during the registration    process.</p> </li> </ul> <p>You can create an information template in advance, which contains the owner\u2019s    details, and complete the authentication process for the template. Once the    information template is created, you can directly use it to set the domain    name information during registration.</p> <p>The authentication of the information template is handled by the registration    authority and typically takes around 1 to 5 business days.</p> <ul> <li> <p>Purchase the domain name</p> </li> <li> <p>Before registering a domain name, it is essential to perform a \u201cdomain name    availability check\u201d to ensure that the desired domain name has not already    been registered by someone else. Once the availability is confirmed, you can    proceed with purchasing the domain name. This involves selecting the desired    services, confirming the order, and making the payment.</p> </li> <li> <p>Website construction</p> </li> <li> <p>After successfully registering the domain name, the next step is to build    your website.</p> </li> </ul> <p>Please note that this is a general overview of the domain name registration process, and the specific steps and requirements may vary depending on the domain registrar and hosting provider you choose.</p>"},{"location":"knowledge/tools/","title":"Tools","text":""},{"location":"knowledge/tools/#tools","title":"Tools","text":""},{"location":"knowledge/tools/#documentation","title":"Documentation","text":"<ul> <li>Pandoc</li> <li>Mkdocs</li> <li>Sphinx</li> </ul>"},{"location":"knowledge/tools/#restructuredtext","title":"ReStructuredText","text":"<ul> <li>rst</li> </ul>"},{"location":"knowledge/tools/#markdown","title":"Markdown","text":"<ul> <li>mdl</li> </ul>"},{"location":"knowledge/tools/#debug","title":"Debug","text":"<ul> <li>GDB</li> </ul>"},{"location":"knowledge/tools/#pdf","title":"pdf","text":"<ul> <li>pdf</li> </ul>"},{"location":"knowledge/tools/#vscode","title":"Vscode","text":"<ul> <li>vscode tips</li> </ul>"},{"location":"knowledge/tools/#obsidian","title":"Obsidian","text":""},{"location":"knowledge/tools/#git","title":"Git","text":""},{"location":"knowledge/tools/#zoomit","title":"ZoomIt","text":""},{"location":"knowledge/tools/gdb/","title":"GDB","text":""},{"location":"knowledge/tools/gdb/#gdb","title":"GDB","text":"<p>GDB is a powerful and essential tool for software developers, especially those working on the Linux platform. It is a command-line debugger that helps you find and fix issues in your programs during development. The primary purpose of GDB is to allow you to observe and control the execution of your program while it\u2019s running, line by line, and inspect its state at any point.</p> <p>Please refer official documentation for details.</p> <ul> <li>Offical-documentation-pdf</li> <li>Offical-documentation-html</li> </ul>"},{"location":"knowledge/tools/golangci_lint/","title":"Golangci-lint","text":""},{"location":"knowledge/tools/golangci_lint/#golangci-lint","title":"Golangci-lint","text":""},{"location":"knowledge/tools/golangci_lint/#introduction-to-golangci-lint","title":"Introduction to golangci-lint","text":"<p><code>golangci-lint</code> is a fast and extensible linting tool for Go source code. It\u2019s designed to help you catch bugs, enforce coding standards, and improve the overall quality of your Go codebase. It aims to provide a unified interface to various Go linters and is widely used by Go developers to ensure their code meets industry best practices.</p>"},{"location":"knowledge/tools/golangci_lint/#key-features","title":"Key Features","text":"<ul> <li> <p>Fast and Parallel: <code>golangci-lint</code> is optimized for speed. It runs linters   concurrently, taking advantage of multiple CPU cores to quickly analyze your   codebase.</p> </li> <li> <p>Extensible: The tool supports a wide range of linters and allows you to   enable or disable them based on your project\u2019s needs.</p> </li> <li> <p>Configuration: You can configure <code>golangci-lint</code> using a <code>.golangci.yml</code>   file in your project\u2019s root directory. This allows you to customize which   linters are run and set specific rules for each one.</p> </li> <li> <p>Integration: <code>golangci-lint</code> seamlessly integrates with various CI/CD   systems and code editors, making it easy to incorporate into your development   workflow.</p> </li> <li> <p>Rich Output: The tool provides clear and detailed output, highlighting   issues, and suggesting fixes whenever possible.</p> </li> </ul>"},{"location":"knowledge/tools/golangci_lint/#getting-started","title":"Getting Started","text":"<p>To start using <code>golangci-lint</code> in your Go project, follow these steps:</p> <ol> <li> <p>Installation: Install <code>golangci-lint</code> using a package manager or by    downloading the binary directly from the official GitHub    repository.</p> </li> <li> <p>Configuration: Create a <code>.golangci.yml</code> file in your project\u2019s root    directory. This file allows you to configure which linters to enable and    customize their settings.</p> </li> <li> <p>Run Linters: Run <code>golangci-lint</code> in your project directory. The tool will    automatically detect the configuration file and apply the specified linters.</p> </li> <li> <p>Review Output: Examine the output to identify linting issues, errors, and    warnings in your codebase. Address these issues to improve the quality of    your code.</p> </li> </ol>"},{"location":"knowledge/tools/golangci_lint/#example-configuration","title":"Example Configuration","text":"<p>Here\u2019s a basic example of a <code>.golangci.yml</code> configuration file:</p> <pre><code>linters-settings:\n  gosimple:\n    enabled: true\n  staticcheck:\n    enabled: true\n  golint:\n    enabled: true\n</code></pre> <p>In this example, we\u2019ve enabled the <code>gosimple</code>, <code>staticcheck</code>, and <code>golint</code> linters.</p>"},{"location":"knowledge/tools/golangci_lint/#conclusion","title":"Conclusion","text":"<p>By integrating <code>golangci-lint</code> into your Go development workflow, you can ensure consistent code quality, catch bugs early, and follow best practices. It\u2019s a powerful tool that can help you maintain a clean and maintainable codebase.</p> <p><code>golangci-lint</code> is a powerful tool that helps you maintain clean, consistent, and high-quality Go code. By automating the process of identifying potential issues, it saves you time and effort, allowing you to focus on writing great code.</p> <p>For more details and in-depth documentation, you can visit the golangci-lint GitHub repository.</p>"},{"location":"knowledge/tools/mdl/","title":"Markdown Lint Tool (mdl)","text":""},{"location":"knowledge/tools/mdl/#markdown-lint-tool-mdl","title":"Markdown Lint Tool (mdl)","text":"<p>Markdown is a popular markup language for creating documentation, README files, and other forms of plain text content. However, maintaining consistent formatting and style in Markdown documents can be challenging, especially when collaborating with a team. To address this issue, we use a tool called <code>mdl</code> (Markdown lint) to help ensure the quality and consistency of our Markdown files.</p>"},{"location":"knowledge/tools/mdl/#what-is-mdl","title":"What is <code>mdl</code>?","text":"<p><code>mdl</code> is a command-line tool that analyzes Markdown documents and checks them against a set of predefined rules. It helps identify and highlight issues such as formatting inconsistencies, broken links, and other potential problems. By using <code>mdl</code>, we can maintain a uniform style across our Markdown files and catch errors early in the documentation process.</p>"},{"location":"knowledge/tools/mdl/#why-use-mdl","title":"Why Use <code>mdl</code>?","text":"<p>Here are some key reasons why we use <code>mdl</code> in our daily work:</p> <ol> <li> <p>Consistency: <code>mdl</code> enforces a consistent Markdown style across all our documentation, making it easier for team members to read and contribute to Markdown files.</p> </li> <li> <p>Error Prevention: It helps catch errors and formatting issues before they become problems, reducing the chances of publishing inaccurate or poorly formatted documentation.</p> </li> <li> <p>Improved Collaboration: By adhering to a common style guide, team members can work more seamlessly together on Markdown files.</p> </li> <li> <p>Automated Checks: <code>mdl</code> automates the process of checking Markdown files, saving time and effort compared to manual inspections.</p> </li> </ol>"},{"location":"knowledge/tools/mdl/#how-to-install-mdl","title":"How to Install <code>mdl</code>","text":"<p>To use <code>mdl</code>, you\u2019ll need to install it on your local development environment. You can install it using RubyGems, a package manager for Ruby:</p> <pre><code>gem install mdl\n</code></pre> <p>Once installed, you can run <code>mdl</code> on your Markdown files from the command line.</p>"},{"location":"knowledge/tools/mdl/#running-mdl","title":"Running <code>mdl</code>","text":"<p>To check a Markdown file named <code>example.md</code>, you can use the following command:</p> <pre><code>\nmdl example.md\n\n</code></pre> <p><code>mdl</code> will provide a list of any issues it finds in the file, along with suggestions for fixing them.</p>"},{"location":"knowledge/tools/mdl/#customizing-mdl-rules","title":"Customizing <code>mdl</code> Rules","text":"<p>While <code>mdl</code> comes with a set of default rules, you can also customize its behavior by creating a <code>.mdlrc</code> configuration file in your project directory. This allows us to tailor <code>mdl</code> to our specific needs and style preferences.</p>"},{"location":"knowledge/tools/mdl/#integrating-with-our-workflow","title":"Integrating with Our Workflow","text":"<p>We encourage all team members to run <code>mdl</code> on Markdown files before committing changes. You can also consider integrating <code>mdl</code> into your continuous integration (CI) pipeline to automatically check Markdown files as part of your development process.</p>"},{"location":"knowledge/tools/mdl/#resources","title":"Resources","text":"<ul> <li>GitHub Repository</li> </ul>"},{"location":"knowledge/tools/obsidian/","title":"Obsidian","text":""},{"location":"knowledge/tools/obsidian/#obsidian","title":"Obsidian","text":""},{"location":"knowledge/tools/obsidian/#introduction-to-obsidian","title":"Introduction to Obsidian","text":"<p>Obsidian is a powerful note-taking and knowledge management application that leverages the concept of a personal knowledge base (PKB) using Markdown notes.</p>"},{"location":"knowledge/tools/obsidian/#how-i-use-obsidian-in-my-daily-work","title":"How I Use Obsidian in My Daily Work","text":""},{"location":"knowledge/tools/obsidian/#note-organization","title":"Note Organization","text":"<p>Obsidian allows me to create interconnected notes using Markdown, which makes it easy to structure and organize my thoughts, project details, and code snippets. I create a separate note for each project, where I can jot down ideas, requirements, and relevant links.</p>"},{"location":"knowledge/tools/obsidian/#linking-and-backlinking","title":"Linking and Backlinking","text":"<p>One of the standout features of Obsidian is its ability to create bidirectional links between notes. This means I can reference and link notes to each other, creating a web of interconnected information. This is especially helpful for maintaining context across different projects and topics.</p>"},{"location":"knowledge/tools/obsidian/#code-snippets-and-syntax-highlighting","title":"Code Snippets and Syntax Highlighting","text":"<p>Since we\u2019re programmers, I\u2019m sure you\u2019ll appreciate Obsidian\u2019s built-in code block support and syntax highlighting. I can easily embed code snippets in my notes and have them formatted beautifully.</p>"},{"location":"knowledge/tools/obsidian/#daily-logs-and-task-management","title":"Daily Logs and Task Management","text":"<p>Obsidian\u2019s daily notes feature lets me create a new note for each day. This is great for jotting down daily to-dos, accomplishments, and thoughts. It helps me track my progress and stay organized.</p>"},{"location":"knowledge/tools/obsidian/#favorite-plugin-dataview","title":"Favorite Plugin: Dataview","text":"<p>One of my favorite plugins in Obsidian is Dataview. It\u2019s a plugin that turns your notes into a powerful database. With Dataview, I can create tables, lists, and charts directly from the information in my notes. This is incredibly useful for project tracking, data analysis, and even creating documentation with up-to-date statistics.</p>"},{"location":"knowledge/tools/obsidian/#tips-for-getting-started","title":"Tips for Getting Started","text":"<ol> <li> <p>Markdown Basics: Familiarize yourself with Markdown syntax. It\u2019s simple    and will make your notes look neat and well-formatted.</p> </li> <li> <p>Linking: Start creating links between your notes. It might feel a bit    strange at first, but soon you\u2019ll see the benefits of easily navigating    through your personal knowledge base.</p> </li> <li> <p>Backlinks: Explore the concept of backlinks. They\u2019re like a trail of    breadcrumbs that lead you back to the sources referencing a particular note.</p> </li> <li> <p>Custom CSS: If you\u2019re into customization, consider tweaking the CSS to    give Obsidian a personal touch. There\u2019s a supportive community that shares    CSS themes you can use.</p> </li> <li> <p>Plugins: While Dataview is my favorite, Obsidian has a plethora of    plugins. Explore and experiment with them to find what enhances your    workflow.</p> </li> <li> <p>Collaboration: Obsidian doesn\u2019t natively support real-time collaboration,    but you can still collaborate by sharing Markdown notes through version    control systems like Git.</p> </li> </ol>"},{"location":"knowledge/tools/pandoc/","title":"Pandoc","text":""},{"location":"knowledge/tools/pandoc/#pandoc","title":"Pandoc","text":"<p>Pandoc is a powerful tool to convert document to different style as blew:</p> <p></p> <p>Detailed description in link.</p>"},{"location":"knowledge/tools/pdf2text/","title":"pdf to text tool","text":""},{"location":"knowledge/tools/pdf2text/#pdf-to-text-tool","title":"pdf to text tool","text":""},{"location":"knowledge/tools/pdf2text/#on-linux-env","title":"On linux env","text":"<p>There are several tools you can use on a Linux system to convert PDF files to text (txt) or HTML. One of the most commonly used tools for this purpose is <code>pdftotext</code>, which is part of the <code>Poppler</code> utility suite.</p> <p>To install and use it, follow these steps:</p>"},{"location":"knowledge/tools/pdf2text/#install-poppler","title":"Install <code>Poppler</code>","text":"<p>Open your terminal and run the following command to install <code>Poppler</code> utilities, which includes \u201cpdftotext\u201d:</p> <pre><code>sudo apt-get install poppler-utils\n</code></pre>"},{"location":"knowledge/tools/pdf2text/#convert-pdf-to-text-txt","title":"Convert PDF to Text (txt)","text":"<p>Once <code>Poppler</code> is installed, you can use the \u201c<code>pdftotext</code>\u201d command to convert a PDF file to text. Navigate to the directory containing your PDF file and run the following command:</p> <pre><code>pdftotext input.pdf output.txt\n</code></pre> <p>Replace <code>input.pdf</code> with the actual name of your PDF file and <code>output.txt</code> with the desired name for the output text file.</p>"},{"location":"knowledge/tools/pdf2text/#convert-pdf-to-html","title":"Convert PDF to HTML","text":"<p>If you want to convert a PDF file to HTML format, you can use the \u201cpdftohtml\u201d command from the same Poppler utilities package. Run the following command:</p> <pre><code>pdftohtml input.pdf output.html\n</code></pre> <p>Replace <code>input.pdf</code> with the actual name of your PDF file and <code>output.html</code> with the desired name for the output HTML file.</p> <p>Remember that the quality of the conversion can vary depending on the complexity of the PDF content. Some PDFs might have complex formatting, images, or other elements that might not convert perfectly to text or HTML.</p> <p>Also, keep in mind that there might be other tools available for PDF conversion on Linux. For example, you might find \u201c<code>pdf2txt</code>\u201d or \u201c<code>pdf2htmlEX</code>\u201d as alternatives.</p> <p>Always check your distribution\u2019s package repository for the most up-to-date information about available tools and their installation process.</p>"},{"location":"knowledge/tools/shell_check/","title":"Shell Check","text":""},{"location":"knowledge/tools/shell_check/#shell-check","title":"Shell Check","text":""},{"location":"knowledge/tools/shell_check/#introduction-to-shellcheck","title":"Introduction to ShellCheck","text":"<p>ShellCheck is a powerful and widely used static analysis tool that helps you identify and fix issues in your shell scripts. It provides recommendations and suggestions for writing cleaner, more efficient, and more secure shell scripts.</p>"},{"location":"knowledge/tools/shell_check/#installation","title":"Installation","text":"<ul> <li>On Linux: Use your package manager, e.g., <code>sudo apt-get install shellcheck</code>      (Debian/Ubuntu).</li> <li>On macOS: Homebrew works, <code>brew install shellcheck</code>.</li> </ul>"},{"location":"knowledge/tools/shell_check/#basic-usage","title":"Basic Usage","text":"<p>Run ShellCheck to analyze your script:</p> <pre><code>shellcheck your_script.sh\n</code></pre>"},{"location":"knowledge/tools/shell_check/#advanced-usage","title":"Advanced Usage","text":"<p>Explore ShellCheck\u2019s advanced features:</p> <ul> <li>Customizing checks.</li> <li>Suppressing specific warnings.</li> <li>Integrating into your workflow.</li> </ul>"},{"location":"knowledge/tools/shell_check/#references","title":"References","text":"<ul> <li>shellcheck</li> <li>shellcheck wiki</li> </ul>"},{"location":"knowledge/tools/shfmt/","title":"shfmt","text":""},{"location":"knowledge/tools/shfmt/#shfmt","title":"shfmt","text":"<p><code>shfmt</code> is a command-line tool used by shell programmers to automatically format their shell scripts. It\u2019s designed to make shell scripts more readable, consistent, and maintainable by applying a set of formatting rules. This can be especially helpful when working on large projects or collaborating with other developers, as it enforces a consistent coding style across the codebase.</p> <p>Here\u2019s how you can use <code>shfmt</code> to format your shell scripts:</p> <ol> <li>Installation:</li> </ol> <p>Before you can use <code>shfmt</code>, you need to install it on your system. You can    usually do this using a package manager like <code>brew</code> (on macOS) or <code>apt</code> (on    Debian-based systems). For example, to install <code>shfmt</code> using <code>brew</code>, you\u2019d    run the following command:</p> <p><code>sh    brew install shfmt</code></p> <ol> <li>Formatting:</li> </ol> <p>Once installed, you can use <code>shfmt</code> to format your shell scripts. Simply    provide the path to the script you want to format as an argument. For    example, if you have a script called <code>myscript.sh</code>, you can format it using    the following command:</p> <p><code>sh    shfmt -i 4 -w myscript.sh</code></p> <p>In the above command:</p> <ul> <li><code>-i 4</code>: Specifies an indentation of 4 spaces. You can adjust this number to      match your preferred indentation style.</li> <li><code>-w</code>: Writes the changes back to the file.</li> </ul> <ol> <li>Automation:</li> </ol> <p>Many developers integrate <code>shfmt</code> into their development workflows by using    it in conjunction with version control systems (e.g., Git hooks) or build    scripts. This ensures that all shell scripts in a project are automatically    formatted according to the specified rules.</p> <p>By using <code>shfmt</code>, you can easily maintain a consistent and clean coding style throughout your shell scripts, making them easier to understand and collaborate on.</p> <p>Remember that <code>shfmt</code> has several options and customization features, so you can tailor its behavior to match your preferred coding style. To learn more about these options, you can refer to the official documentation or use the <code>-h</code> flag with the <code>shfmt</code> command to display its help information.</p> <pre><code>shfmt -h\n</code></pre> <p>Overall, <code>shfmt</code> is a valuable tool for shell programmers to ensure their scripts are well-formatted and follow best practices in terms of coding style.</p>"},{"location":"knowledge/tools/valgrind/","title":"Valgrind","text":""},{"location":"knowledge/tools/valgrind/#valgrind","title":"Valgrind","text":"<p><code>Valgrind</code> is a powerful tool that assists programmers in identifying memory-related issues in their programs. These issues can include memory leaks, invalid memory accesses, and more. This guide aims to provide an overview of <code>Valgrind</code> and its key features to help new programmers effectively use it for debugging their code.</p>"},{"location":"knowledge/tools/valgrind/#what-is-valgrind","title":"What is <code>Valgrind</code>?","text":"<p><code>Valgrind</code> is an open-source instrumentation framework that provides a suite of tools designed for debugging and profiling. Its primary purpose is to detect memory-related problems in programs written in languages like C and C++. The most commonly used tool within <code>Valgrind</code> is called \u201cMemcheck,\u201d which detects memory leaks, uninitialized memory usage, and out-of-bounds memory accesses.</p>"},{"location":"knowledge/tools/valgrind/#key-features","title":"Key Features","text":"<ol> <li>Memory Leak Detection:</li> </ol> <p><code>Valgrind</code> helps identify memory leaks by tracking allocations and    deallocations of memory throughout the execution of a program. It reports    memory blocks that were allocated but not freed, making it easier to prevent    resource leaks.</p> <ol> <li>Invalid Memory Access Detection:</li> </ol> <p>Valgrind\u2019s Memcheck tool can detect invalid memory accesses, such as reading    from or writing to memory locations that the program shouldn\u2019t have access    to. This is crucial for avoiding segmentation faults and other runtime    errors.</p> <ol> <li>Uninitialized Variable Detection:</li> </ol> <p><code>Valgrind</code> can alert you when your program tries to use variables that    haven\u2019t been properly initialized. This helps prevent unexpected behavior    caused by using uninitialized data.</p> <ol> <li>Profiling Tools:</li> </ol> <p>In addition to memory-related checks, <code>Valgrind</code> offers profiling tools that    help analyze program performance, identify bottlenecks, and optimize code for    better efficiency.</p>"},{"location":"knowledge/tools/valgrind/#suppress-specific-warnings","title":"Suppress specific warnings","text":"<p>In Valgrind, the \u201csuppress specific warnings\u201d feature allows you to create suppression files that instruct Valgrind to ignore certain types of errors or warnings that you consider false positives or non-critical issues. This can help you focus on relevant issues and prevent unnecessary noise in your Valgrind reports.</p> <p>What are Suppression Files:</p> <p>A suppression file in Valgrind is a text file that contains rules to suppress specific error messages or warnings generated by Valgrind. These rules can be based on function names, source file paths, and other context information. When Valgrind encounters an error that matches the criteria specified in a suppression file, it will suppress that error from being displayed in the report.</p> <p>Creating a Suppression File:</p> <p>To create a suppression file, follow these steps:</p> <ol> <li> <p>Create a text file with a <code>.supp</code> extension (e.g., <code>my_suppressions.supp</code>).</p> </li> <li> <p>Add suppression rules to the file. Each rule specifies the type of error to    suppress and the conditions under which the suppression should apply.</p> </li> <li> <p>Save the suppression file in a location that your CI/CD system can access.</p> </li> </ol> <p>Suppression Rule Format:</p> <p>A suppression rule in a suppression file follows this general format:</p> <pre><code>{\n   &lt;error_kind&gt;\n   &lt;function_name&gt;\n   &lt;source_file&gt;\n   &lt;optional_args&gt;\n}\n</code></pre> <ul> <li> <p><code>&lt;error_kind&gt;</code>: The type of error or warning to suppress. This can be the   error name as reported by Valgrind, such as \u201cInvalid read\u201d or \u201cMemory leak\u201d.</p> </li> <li> <p><code>&lt;function_name&gt;</code>: The name of the function where the error occurs. This can   be useful for suppressing errors that you know are safe in certain functions.</p> </li> <li> <p><code>&lt;source_file&gt;</code>: The source file path where the error occurs. You can use this   to suppress errors that are known to occur in specific files.</p> </li> <li> <p><code>&lt;optional_args&gt;</code>: Additional optional arguments that provide more context for   the suppression rule.</p> </li> </ul> <p>Example Suppression Rule:</p> <p>Here\u2019s an example of a suppression rule that suppresses \u201cInvalid read\u201d errors in the <code>safe_function</code> and only when they occur in the file <code>safe_code.c</code>:</p> <pre><code>{\n   Invalid read\n   safe_function\n   safe_code.c\n}\n</code></pre> <p>Using Suppression Files with Valgrind:</p> <p>To use a suppression file with Valgrind, you need to specify the file using the <code>--suppressions</code> flag when running Valgrind. For example:</p> <pre><code>valgrind --suppressions=my_suppressions.supp ./your_program\n</code></pre> <p>Note:</p> <p>Be cautious when using suppression files. While they can help filter out noise, make sure you\u2019re not suppressing actual memory errors that need attention.</p> <p>By creating and using suppression files, you can tailor Valgrind\u2019s output to focus on the most important memory issues in your code, making the debugging process more efficient and effective.</p> <p>Please refer valgrind for detail information.</p>"},{"location":"knowledge/tools/vscode/","title":"VSCODE","text":""},{"location":"knowledge/tools/vscode/#vscode","title":"VSCODE","text":""},{"location":"knowledge/tools/vscode/#tips","title":"Tips","text":""},{"location":"knowledge/tools/vscode/#insertfinalnewline-and-trimfinalnewlines","title":"insertFinalNewline and trimFinalNewlines","text":"<pre><code>{\n\"files.insertFinalNewline\": true,\n\"files.trimFinalNewlines\": true\n}\n\n</code></pre>"},{"location":"knowledge/tools/vscode/#useful-vscode-plugins","title":"Useful vscode plugins","text":""},{"location":"knowledge/tools/vscode/#codes-as-code","title":"Codes as code","text":"<ul> <li>Markdown Lint</li> <li>Markdown Table Prettifier</li> <li>Markmap</li> <li>Marp</li> <li>Rewrap</li> <li>AsciiDoc</li> <li>Code Spell Checker</li> <li>LTeX \u2013 LanguageTool grammar/spell checking</li> <li>reStructuredText</li> <li>reStructuredText Syntax highlighting</li> <li>Mermaid Preview</li> <li>vscode-drawio</li> <li>plantUML</li> </ul>"},{"location":"knowledge/tools/zoomit/","title":"ZoomIt","text":""},{"location":"knowledge/tools/zoomit/#zoomit","title":"ZoomIt","text":""},{"location":"knowledge/tools/zoomit/#1-what-is-zoomit","title":"1. What is ZoomIt?","text":"<ul> <li>ZoomIt is a powerful screen zooming and annotation tool developed by Microsoft. It\u2019s designed to enhance presentations, screen sharing sessions, and demonstrations.</li> </ul>"},{"location":"knowledge/tools/zoomit/#2-key-features","title":"2. Key Features:","text":"<ul> <li> <p>Real-time Zooming: ZoomIt allows us to zoom in and out of any portion of the screen, providing a clear view of details during presentations.</p> </li> <li> <p>Annotation Tools: It provides a set of drawing and annotation tools (like a pen, highlighter, and shapes) to emphasize and mark up content.</p> </li> <li> <p>Keyboard Shortcuts: Easily accessible keyboard shortcuts make it convenient to switch between zoom modes and tools on-the-fly.</p> </li> <li> <p>Customizable Settings: We can configure various settings to tailor ZoomIt to our specific needs, including zoom level, colors, and shortcut keys.</p> </li> </ul>"},{"location":"knowledge/tools/zoomit/#3-installation-and-setup","title":"3. Installation and Setup:","text":"<ul> <li> <p>ZoomIt can be downloaded from the official Microsoft Sysinternals website or via the Microsoft Store (if available).</p> </li> <li> <p>Installation is straightforward, and it\u2019s compatible with most versions of Windows.</p> </li> </ul>"},{"location":"knowledge/tools/zoomit/#4-how-to-use-zoomit","title":"4. How to Use ZoomIt:","text":"<ul> <li> <p>Zooming In/Out: - Activate ZoomIt (default hotkey: <code>Ctrl + 1</code>). - Draw a   rectangle around the area you want to zoom in on (<code>Ctrl + 2</code> to zoom out).</p> </li> <li> <p>Annotation Tools: - Activate drawing mode (<code>Ctrl + 3</code>), then use the mouse   or touchpad to annotate.</p> </li> <li> <p>Erasing Annotations: - Press <code>Ctrl</code> to temporarily switch to the eraser   tool.</p> </li> </ul>"},{"location":"knowledge/tools/zoomit/#5-tips-and-best-practices","title":"5. Tips and Best Practices:","text":"<ul> <li> <p>Practice: Familiarize yourself with ZoomIt before important presentations to ensure smooth usage.</p> </li> <li> <p>Use High Contrast Colors: Choose annotation colors that are easily visible against the background.</p> </li> <li> <p>Toggle Zoom Mode: Quickly toggle between zoomed-in and regular view for dynamic presentations.</p> </li> <li> <p>Hotkey Customization: Adjust hotkeys if necessary to avoid conflicts with other tools.</p> </li> </ul>"},{"location":"knowledge/tools/doc_as_code/mkdocs/","title":"Mkdocs","text":""},{"location":"knowledge/tools/doc_as_code/mkdocs/#mkdocs","title":"Mkdocs","text":"<p>MkDocs is a fast, simple and downright gorgeous static site generator that\u2019s geared towards building project documentation. Documentation source files are written in Markdown, and configured with a single YAML configuration file. Start by reading the introductory tutorial, then check the User Guide for more information.</p> <ul> <li>https://www.mkdocs.org/</li> </ul>"},{"location":"knowledge/tools/doc_as_code/rst/","title":"Writing Documents in reStructuredText (RST)","text":""},{"location":"knowledge/tools/doc_as_code/rst/#writing-documents-in-restructuredtext-rst","title":"Writing Documents in reStructuredText (RST)","text":"<p>reStructuredText is a lightweight markup language that\u2019s commonly used for documenting code, software projects, and technical documents. It\u2019s simple and easy to learn. Here\u2019s a basic overview of how to use RST:</p> <ol> <li>Headers: Use underlines to create headers. For example:</li> </ol> <p><code>rst    My Document Title    =================</code></p> <ol> <li>Sections: Use colons and indentation for sections. For example:</li> </ol> <p>```rst    Section 1    =========</p> <p>Subsection 1.1</p> <p>```</p> <ol> <li>Lists: Use asterisks for bullet points and numbers for ordered lists.</li> </ol> <p>```rst    * Item 1    * Item 2</p> <ol> <li>First item</li> <li> <p>Second item    ```</p> </li> <li> <p>Links: Create links with backticks and angle brackets.</p> </li> </ol> <p><code>rst    `OpenAI Website &lt;https://www.openai.com&gt;`_</code></p> <ol> <li>Code Blocks: Use double colons for code blocks.</li> </ol> <p>```rst    ::</p> <pre><code>   def my_function():\n       return \"Hello, world!\"\n</code></pre> <p>```</p> <ol> <li>Emphasis: Use asterisks or underscores for emphasis.</li> </ol> <p><code>rst    *italic* or _italic_    **bold** or __bold__</code></p> <ol> <li>References: Create references with double colons.</li> </ol> <p>```rst    .. _my-reference-label:</p> <p>This is a reference to :ref:<code>my-reference-label</code>.    ```</p> <ol> <li>Images: Include images with double colons.</li> </ol> <p><code>rst    .. image:: path/to/image.png       :width: 200</code></p> <ol> <li>Tables: Create tables using the <code>+</code> character for borders.</li> </ol> <p><code>rst    +---------------+------------+    |   Header 1    |  Header 2  |    +===============+============+    |   Data 1      |  Data 2    |    +---------------+------------+</code></p>"},{"location":"knowledge/tools/doc_as_code/rst/#using-rst-linters","title":"Using RST Linters","text":"<p>Linters help ensure that your RST documents are formatted correctly and adhere to best practices. Here\u2019s how you can use three popular RST linters: <code>rst-lint</code>, <code>doc8</code>, and <code>rstcheck</code>.</p>"},{"location":"knowledge/tools/doc_as_code/rst/#rst-lint","title":"rst-lint","text":"<p><code>rst-lint</code> is a tool that checks your RST files for compliance with the Docutils stylesheet and reports any issues.</p> <p>To use <code>rst-lint</code>:</p> <ol> <li>Install it using pip:</li> </ol> <p><code>shell    pip install rst-lint</code></p> <ol> <li>Run <code>rst-lint</code> on your RST file:</li> </ol> <p><code>shell    rst-lint your_document.rst</code></p> <ol> <li><code>rst-lint</code> will provide feedback and suggestions for improvements in your RST file.</li> </ol>"},{"location":"knowledge/tools/doc_as_code/rst/#doc8","title":"doc8","text":"<p><code>doc8</code> is a style checker for RST documents that enforces the style guide specified in the OpenStack project.</p> <p>To use <code>doc8</code>:</p> <ol> <li>Install it using pip:</li> </ol> <p><code>shell    pip install doc8</code></p> <ol> <li>Run <code>doc8</code> on your RST file:</li> </ol> <p><code>shell    doc8 your_document.rst</code></p> <ol> <li><code>doc8</code> will check your document for style violations and provide a report.</li> </ol>"},{"location":"knowledge/tools/doc_as_code/rst/#rstcheck","title":"rstcheck","text":"<p><code>rstcheck</code> is a linter that checks RST files for syntax errors and style issues.</p> <p>To use <code>rstcheck</code>:</p> <ol> <li>Install it using pip:</li> </ol> <p><code>shell    pip install rstcheck</code></p> <ol> <li>Run <code>rstcheck</code> on your RST file:</li> </ol> <p><code>shell    rstcheck your_document.rst</code></p> <ol> <li><code>rstcheck</code> will identify syntax errors and suggest improvements.</li> </ol> <p>By following these guidelines and using these linters, you can create well-structured and error-free RST documents for your daily work.</p>"},{"location":"knowledge/tools/doc_as_code/rst/#references","title":"References","text":"<ul> <li>rst linter</li> </ul>"},{"location":"knowledge/tools/doc_as_code/sphinx/","title":"Sphinx","text":""},{"location":"knowledge/tools/doc_as_code/sphinx/#sphinx","title":"Sphinx","text":"<p>Sphinx is a documentation generator tool used to create technical documentation for software projects. It is often used in the Python programming community, but it supports multiple programming languages and allows developers to write documentation in a markup language and generate various output formats, such as HTML, PDF, and ePub.</p> <ul> <li>https://www.sphinx-doc.org/en/master/index.html</li> </ul>"},{"location":"knowledge/tools/git/","title":"Git","text":""},{"location":"knowledge/tools/git/#git","title":"Git","text":"<ul> <li>How to get the commit ID of the latest tag in a Git repository</li> <li>Example Commands</li> </ul>"},{"location":"knowledge/tools/git/example_commands/","title":"Example Commands","text":""},{"location":"knowledge/tools/git/example_commands/#example-commands","title":"Example Commands","text":""},{"location":"knowledge/tools/git/example_commands/#change-commit-log","title":"Change commit log","text":"<ul> <li>Change commit time</li> </ul> <pre><code>git commit --amend --date=\"Fri Oct 13 12:01:13 2023 +0300\" --no-edit\ngit commit --amend --date=now --no-edit\n</code></pre> <ul> <li>Change commit author</li> </ul> <pre><code>git commit --amend --author=\"Author Name &lt;author@email.com&gt;\" --no-edit\n</code></pre>"},{"location":"knowledge/tools/git/example_commands/#references","title":"References","text":"<ul> <li>how-can-one-change-the-timestamp-of-an-old-commit-in-git</li> </ul>"},{"location":"knowledge/tools/git/how_to_get_latest_git_tag/","title":"How to get the commit ID of the latest tag in a Git repository","text":""},{"location":"knowledge/tools/git/how_to_get_latest_git_tag/#how-to-get-the-commit-id-of-the-latest-tag-in-a-git-repository","title":"How to get the commit ID of the latest tag in a Git repository","text":"<p>Command:</p> <pre><code>git rev-list --tags --max-count=1\n</code></pre> <p>Here\u2019s what this command does:</p> <ul> <li><code>git rev-list</code> is a Git command that lists commit objects in reverse   chronological order.</li> <li><code>--tags</code> specifies that we want to include tags in the search.</li> <li><code>--max-count=1</code> limits the output to only one result, which will be the latest   tag.</li> </ul> <p>When you run this command, Git will provide you with the commit ID of the latest tag in the repository. You can use this commit ID for various purposes, such as checking out the code at that specific tag or referencing it in your scripts or documentation.</p>"},{"location":"musings/","title":"Musings","text":""},{"location":"musings/#musings","title":"Musings","text":"<ul> <li>First blog</li> <li>\u4ece\u5e73\u51e1\u5230\u5353\u8d8a</li> <li>Murphy\u2019s Law</li> <li>The Art of Patience</li> <li> <p>One person should be like a team</p> </li> <li> <p>Ask for help</p> </li> <li>\u4eba\u751f\u5c31\u50cf\u4e00\u5217\u706b\u8f66</li> <li>ChatGPT books</li> <li>Vault Change License</li> <li>In the midst of chaos, there is also opportunity</li> <li>Matrix \u4e16\u5bb6</li> </ul>"},{"location":"musings/#reading-notes","title":"Reading Notes","text":""},{"location":"musings/ask_questions/","title":"Ask for help","text":""},{"location":"musings/ask_questions/#ask-for-help","title":"Ask for help","text":"<p>\u770b\u5230\u8fd9\u6bb5\u5bf9\u8bdd\u6709\u4e24\u70b9\u611f\u60f3\u3002</p> <ol> <li>\u63d0\u95ee\u662f\u4e00\u95e8\u827a\u672f\u3002</li> <li>\u5927\u90e8\u5206\u95ee\u9898\u5176\u5b9e\u90fd\u4e0d\u662f\u95ee\u9898\u3002</li> </ol>"},{"location":"musings/chatgpt_books/","title":"ChatGPT books","text":""},{"location":"musings/chatgpt_books/#chatgpt-books","title":"ChatGPT books","text":"<p>\u5468\u672b\u53bb\u901b\u4e66\u5e97\uff0c\u53d1\u73b0\u6709\u57fa\u672c\u5173\u4e8eChatGPT\u7684\u4e66\u5df2\u7ecf\u4e0a\u5e02\uff0c\u5e76\u4e14\u6446\u5728\u4e66\u5e97\u663e\u773c\u7684\u4f4d\u7f6e\u3002</p> <p>\u4e0d\u5f97\u4e0d\u611f\u53f9\u4f5c\u8005\u3001\u8bd1\u8005\u7684\u654f\u611f\u5ea6\u4e4b\u7075\u654f\u548c\u6548\u7387\u4e4b\u9ad8\u3002</p> <p>\u56de\u987e\u6700\u8fd1\u51e0\u5e74\u7684\u6280\u672f\u53d8\u5316\u8d8b\u52bf\u4ece \u533a\u5757\u94fe / \u4e2d\u53f0 \u5230\u73b0\u5728\u7684 AIGC \u90fd\u662f\u4e3a\u4e86\u89e3\u51b3\u67d0\u4e00\u75db\u70b9\u7684\u521b\u65b0\u3002</p> <p>\u672a\u6765AI\u4f1a\u51fa\u73b0\u5728\u66f4\u591a\u7684\u9886\u57df\u548c\u884c\u4e1a\u3002</p> <p>\u4f5c\u4e3a\u7a0b\u5e8f\u733f\u80fd\u505a\u7684\u662f\u62e5\u62b1AI\u63d0\u5347\u81ea\u5df1\u7684\u7ade\u4e89\u529b\u3002</p>"},{"location":"musings/feynman_technique/","title":"FEYNMAN TECHNIQUE","text":""},{"location":"musings/feynman_technique/#feynman-technique","title":"FEYNMAN TECHNIQUE","text":"<p>The Feynman Technique is a powerful learning method named after Richard Feynman, a renowned physicist known for his ability to simplify complex concepts and explain them in a clear and understandable way. The technique revolves around four essential steps:</p> <pre><code>flowchart TD;\n    A[Choose a Concept] --&gt; B[Teach it to a Child];\n    B --&gt; C[Identify Gaps and Review];\n    C --&gt; D[Review and Simplify];\n</code></pre> <ol> <li> <p>Choose a Concept: Select a topic or concept you want to learn or understand    better. It could be anything from a scientific concept to a historical event    or even a skill you want to master.</p> </li> <li> <p>Teach it to a Child: Pretend you are explaining the concept to a young child    who has no prior knowledge of the subject. Use simple language, avoid jargon,    and break down complex ideas into easy-to-understand terms. Teaching to a    \u201cchild\u201d helps you identify any gaps in your understanding and forces you to    simplify the concept.</p> </li> <li> <p>Identify Gaps and Review: As you teach the concept to your imaginary \u201cchild,\u201d    pay attention to the areas where you struggle to explain clearly or where you    find gaps in your knowledge. Make note of these areas, as they indicate what    you need to review and study more thoroughly.</p> </li> <li> <p>Review and Simplify: Go back to your study materials, textbooks, or resources    and review the areas you identified as challenging or lacking. Try to    simplify the concept even further in your own words. This step reinforces    your understanding and helps you internalize the information deeply.</p> </li> </ol>"},{"location":"musings/first_blog/","title":"The ideal moment to plant a tree is a decade past, followed by the present","text":""},{"location":"musings/first_blog/#the-ideal-moment-to-plant-a-tree-is-a-decade-past-followed-by-the-present","title":"The ideal moment to plant a tree is a decade past, followed by the present","text":"<p>As an experienced software engineer with over a decade of professional experience, today I have registered the domain coyang.top and established my personal website.</p> <p>The inaugural blog post features a poignant quote from the esteemed African female author, Dambisa Moyo, extracted from her notable work titled </p> <p>The optimal time to plant a tree was ten years ago; the second-best time is now.</p> <p>Henceforth, this digital realm shall serve as a repository for my personal musings and a platform for sharing insights derived from my journey in software development.</p>"},{"location":"musings/from_small_to_great/","title":"\u4ece\u5e73\u51e1\u5230\u5353\u8d8a","text":""},{"location":"musings/from_small_to_great/#_1","title":"\u4ece\u5e73\u51e1\u5230\u5353\u8d8a","text":"<ul> <li>Great minds discuss ideas</li> <li>Average minds discuss events</li> <li>Small minds discuss people</li> </ul> <p>\u5728\u8bfb\u300aThe Pragmatic Programmer\u300b\u770b\u5230</p> <p>Fix the Problem, Not the Blame (\u8981\u4fee\u6b63\u95ee\u9898\uff0c\u800c\u4e0d\u662f\u53d1\u51fa\u6307\u8d23)</p> <p>\u60f3\u5230\u4e86 Eleanor Roosevelt\u8bf4\u7684\u8fd9\u53e5\u8bdd\u3002</p> <p>\u9648\u7693\u628a\u8fd9\u53e5\u8bdd\u7ffb\u8bd1\u4e3a\uff1a</p> <ul> <li>\u5353\u8d8a\u4e4b\u8bc6\u8bba\u9053\uff0c</li> <li>\u5e73\u5e38\u4e4b\u8bc6\u8bba\u4e8b\uff0c</li> <li>\u72f9\u9698\u4e4b\u8bc6\u8bba\u4eba\u3002</li> </ul> <p>\u51af\u5927\u8f89\u8bb2\u8fd9\u53e5\u8bdd\u7ffb\u8bd1\u4e3a\uff1a</p> <ul> <li>\u5353\u8d8a\u4e4b\u4eba\u8bba\u9053\uff0c</li> <li>\u6b63\u5e38\u4e4b\u4eba\u8bba\u4e8b\uff0c</li> <li>\u72f9\u9698\u4e4b\u4eba\u8bba\u4eba\u3002</li> </ul> <p>\u60f3\u5230\u4e00\u4e2a\u73b0\u5b9e\u7684\u4f8b\u5b50\uff0c \u5728code review \u8fc7\u7a0b\u4e2d\uff0c\u53d1\u73b0\u6709\u7684\u540c\u4e8b\u7684code\u5199\u7684\u4e0d\u662f\u5f88\u597d\uff0c\u4e0d\u540c \u7684\u4eba\u4f1a\u6709\u4e0d\u540c\u7684\u53cd\u5e94\uff1a</p> <ul> <li>Small mind: WTF</li> <li>Average mind: \u8fd9\u6bb5\u4ee3\u7801\u8fd9\u91cc\u4e0d\u597d\uff0c\u539f\u56e0\u662f\uff1abalabala \u2026\uff0c \u66f4\u597d\u7684\u5199\u6cd5\u662f\uff1abalabala   \u2026</li> <li>Great mind:</li> </ul> <pre><code>  - \u4e3a\u4ec0\u4e48developer\u4f1a\u63d0\u4ea4\u8fd9\u4e2a\u72b6\u6001\u7684\u4ee3\u7801review\n  - \u7f3a\u5c11\u54ea\u4e9bknowledge / skill\n  - \u5236\u5b9a guide / best practices\n  - Share\n  - \u6240\u6709\u4eba\u6709\u7edf\u4e00\u7684mind\n</code></pre> <p>\u4f60\u80fd\u60f3\u5230small mind / average mind / great mind \u7684\u4f8b\u5b50\u5417\uff1f \ud83d\ude38</p>"},{"location":"musings/matrix_history/","title":"Matrix \u4e16\u5bb6","text":""},{"location":"musings/matrix_history/#matrix","title":"Matrix \u4e16\u5bb6","text":""},{"location":"musings/matrix_history/#_1","title":"\u521d\u521b\u7eaa","text":"<p>\u4e01\u4ea5\u5c81\uff082007\uff09\uff0c\u8bfa\u57fa\u4e9a\u676d\u57ce\u7acb Matrix \u90e8\u3002\u521d\u4ee3\u76ee\u949f\u534e\u9886\u70b3\u9009\u3001\u5fb7\u524d\u3001\u5e7f\u57ce\u4e09\u5b50\uff0c\u5fb7\u524d\u4ee5 \u201cMatrix\u201d\u540d\u4e4b\uff0c\u6155\u6570\u5b57\u5bf0\u5b87\u4e4b\u7384\u673a\u3002\u65f6\u5f20\u674e\u4e8c\u541b\u6e21\u82ac\u5170\u4e60 POXLIB\u7ecf\uff0c\u79cd Shadows \u6587\u4ef6\u7cfb\u7edf \u4e8e\u5bd2\u6c5f\uff0c\u5b58\u50a8\u7b4b\u9aa8\u81ea\u6b64\u6210\u3002</p>"},{"location":"musings/matrix_history/#_2","title":"\u6f14\u8fdb\u5f55","text":"<p>\u5df1\u4e11\u5e74\uff082009\uff09\uff0c\u6587\u7b80\u3001\u52c7\u3001\u7406\u8fbe\u5165\u9601\u3002\u5e7f\u57ce\u53bb\uff0c\u5b59\u840d\u81f3\uff0c\u5973\u53f2\u638c\u6d4b\u8bd5\uff0c\u5f00\u5dfe\u5e3c\u53c2\u673a\u8981\u4e4b \u5148\u3002\u540e\u6709K5\u3001\u5c0f\u5a23\u76f8\u7ee7\u5165\u4e16\u53c8\u79bb\u53bb\u3002</p> <p>\u8f9b\u536f\u5e74\uff082011\uff09\u9f0e\u76db\u65f6\uff0c\u516b\u9a8f\u5217\u9635\uff1a\u70b3\u9009\u63e1\u67b6\u6784\uff0c\u6587\u7b80\u4fee\u5185\u529f\uff0c\u52c7\u901a\u5916\u672f\uff0c\u7406\u8fbe\u901a\u534f\u8bae\uff0c\u5fb7 \u524d\u5b88\u6839\u672c\uff0c\u840d\u638c\u6d4b\u8bd5\uff0c\u6653\u7ea2\u8f85\u4f50\uff0c\u51ac\u51ac\u867d\u7a1a\u5b50\u4ea6\u663e\u5ce5\u5d58\u3002\u662f\u5e74\u4ece\u5b66\u3001\u519b\u8bda\u3001\u6d0b\u6d0b\u76f8\u7ee7\u6765\u671d\uff0c \u6d77\u519b\u7763\u653f\uff0c\u949f\u534e\u638c\u5370\u3002</p>"},{"location":"musings/matrix_history/#_3","title":"\u58ec\u8fb0\u98ce\u4e91","text":"<p>\u58ec\u8fb0\u5e74\uff082012\uff09\uff0c\u6653\u7ea2\u8f6c\u6295\u4ed6\u90e8\uff0c\u6587\u7b80\u51fa\u6f7c\u5173\uff0c\u9057 Shadows \u79d8\u7c4d\u4e8e\u4ece\u5b66\u3002\u738b\u52c7\u7387\u90e8\u7834 TRC \u7384\u5173\uff0c\u5f00\u8bca\u65ad\u65b0\u57df\u3002</p> <p>\u7678\u5df3\u5e74\uff082013\uff09\uff0c\u8bb8\u4f1f\u7ee7\u638c\u5e05\u65d7\uff0c\u9ad8\u697c\u4e09\u5e74\u6444\u653f\uff0c\u90e8\u4f17\u661f\u6563\u5982\u9648\u5468\u4e4b\u5c5e\u3002</p> <p>\u7532\u5348\u5c81\uff082014\uff09\uff0c\u52c7\u8d74\u7f8e\u5dde\u4fee\u5927\u9053\uff0c\u6cfd\u6587\u3001\u97f6\u534e\u5982\u6d41\u661f\u8fc7\u5883\uff0c\u6d77\u9f99\u5f97\u590f\u658c\u6388 SIS \u79d8\u672f\uff0c\u4e3d \u971e\u63a5\u638c\u8bd5\u70bc\u5802\u3002</p>"},{"location":"musings/matrix_history/#_4","title":"\u4e91\u8d77\u7bc7","text":"<p>\u4e19\u7533\u5e74\uff082016\uff09\uff0cGeorge \u643a Shujun \u3001\u7433\u5165\u4e16\uff0cGlusterFS \u64ce\u4e91\u5e61\uff0c\u5305\u5305\u6cbb \u519b\uff0c\u9ad8\u697c\u95ee\u653f\u3002</p> <p>\u4e01\u9149\u5e74\uff082017\uff09\uff0c\u6653\u73b2\u664b\u8bd5\u70bc\u5802\u5b97\u5e08\u4f4d\uff0c\u6267\u638c\u8d28\u91cf\u7384\u9274\u3002</p> <p>\u620a\u620c\u5e74\uff082018\uff09\uff0c\u949f\u534e\u3001\u590f\u658c\u590d\u5f52\uff0c\u949f\u534e\u518d\u638c\u5e05\u5370\uff0c\u590f\u658c\u4e3a\u7763\u653f\uff0c\u5f15\u90e8\u4f17\u5165 SWM \u79d8\u5883\uff0c\u6d89 SEC \u4e4b\u91d1\u532e\uff0c\u63a2 UM \u4e4b\u7384\u673a\u3002</p> <p>\u58ec\u5bc5\u5c81\uff082022\uff09\u5408\u7eb5\u8fde\u6a2a\uff0c\u4e0e\u5f20\u8f89\u90e8\u5171\u8c0b LCM \u84dd\u7eff\u672f\u3002</p>"},{"location":"musings/matrix_history/#_5","title":"\u7ec8\u7ae0","text":"<p>\u7678\u536f\uff082023\uff09\u79cb\uff0c\u949f\u534e\u3001\u590f\u658c\u8de8\u6d77\u7b51\u8461\u8404\u7259\u65b0\u5792\uff0c\u5fb7\u524d\u3001\u6653\u73b2\u9690\u9000\u6c5f\u6e56\u3002Matrix\u4e24\u90e8\u5408\u4e00\uff0c \u65b0\u9635\u65e2\u6210\uff0c\u4f17\u661f\u5f52\u4f4d\uff1a\u4ece\u5b66\u6267\u5224\u5b98\u7b14\uff0c\u840d\u3001\u8c37\u741b\u5171\u638c\u91d1\u9488\u5802\uff0c\u7433\u5fa1\u4e91\u5e61\uff0cGeorge\u6301\u756a\u90a6\u79d8 \u5377\uff0cShujun\u3001\u6653\u4e91\u5217\u5de6\u53f3\u62a4\u6cd5\uff1b\u70b3\u9009\u3001\u8363\u6770\u53cc\u5c0a\u9547\u5b88\u85cf\u7ecf\u9601\uff0cRooney\u5750\u76d1\u5bdf\u9662\uff0c\u5f20\u8f89\u6267\u638c\u95e8 \u4e3b\u5370\u4fe1\uff0c\u4e2d\u8461\u4e24\u57df\u5171\u53c2LCM\u5929\u9053\u3002</p> <p>\u7532\u8fb0\u5c81\uff082024\uff09\uff0cGeorge\u897f\u884c\u6c42\u9053\uff0c\u4ece\u5b66\u53c2\u609f\u300c\u7384\u673a\u9274\u300d\uff0cAI\u5251\u6c14\u521d\u6210\u800c\u4ee3\u7801\u6c5f\u6e56\u9707\u3002</p> <p>\u4e59\u5df3\u5e74\uff082025\uff09\uff0c\u7384\u673a\u672a\u7adf\u800c\u5251\u6298\u4eba\u8fdc\u2014\u2014\u4ece\u5b66\u5c01\u7b14\u5f52\u9690\uff0c\u840d\u5c01\u91d1\u9488\u5323\uff0cShujun\u65ad\u4e91\u5e61\uff0c\u6653\u4e91 \u643a\u6e21\u6d77\u4ee4\u7edd\u8ff9\u897f\u6d0b\u3002\u4f59\u8005\u5f52\u897f\u6e56\u65e7\u5792\uff0c\u5341\u516b\u8f7d Matrix \u7ec8\u5316\u661f\u5c18\u3002</p>"},{"location":"musings/matrix_history/#_6","title":"\u6280\u672f\u5fd7","text":"<p>\u81ea 2.5G \u81f3 5G \u4e91\u53d8\uff0c\u5b58\u50a8\u4e4b\u9053\u4e5d\u8f6c\u529f\u6210\uff1aShadows \u5960\u57fa\uff0cGluster \u62d3\u7586\uff0cCeph \u6d85\u69c3\uff0c\u7ec8 \u609f Container \u5883\u4e4b UNFS\u3001Rsync \u771f\u8c1b\u3002\u65c1\u4fee TRC \u8bca\u65ad\u672f\u3001SEC \u91d1\u6c64\u9635\u3001LCM \u751f\u6b7b\u95e8\uff0c\u53ca \u81f3 AI \u4e16\u4ee3\u72b9\u9886\u98ce\u9a9a\u3002</p>"},{"location":"musings/matrix_history/#_7","title":"\u4eba\u7269\u5217\u4f20","text":"<ul> <li>\u70b3\u9009\uff1a\u521d\u4ee3\u67b6\u6784\u5b97\u5320\uff0c\u5341\u516b\u8f7d\u9547\u5b88\u6838\u5fc3\uff0c\u767d\u53d1\u72b9\u5ba1\u4ee3\u7801\u5982\u5e96\u4e01\u89e3\u725b\u3002</li> <li>\u5fb7\u524d\uff1aMatrix \u638c\u8235\u4eba\uff0c\u6267 Agile \u5fc3\u6cd5\u4fee\u8fed\u4ee3\u771f\u8c1b\u3002</li> <li>\u52c7\uff1aTRC \u5f00\u5c71\u7956\uff0c\u5c1d\u7387\u90e8\u4e03\u65e5\u8fde\u7834\u4e8c\u5341\u516d\u5173\uff0c\u521b\u201dMatrix \u901f\u5ea6\u201d\u3002</li> <li>\u4ece\u5b66\uff1a\u672b\u4ee3\u5b88\u9635\u4eba\uff0c\u7532\u8fb0\u5c81\u94f8 AI \u9274\u7801\u4f7f\uff0c\u8c13\u201d\u6b64\u975e\u4ee3\u5e96\uff0c\u4e43\u94f8\u65b0\u5251\u201d\u3002</li> <li>\u840d\uff1a\u91d1\u9488\u5ea6\u4eba\u5eff\u4f59\u8f7d\uff0c\u8bad\u96cf\u9e70\u8fc7\u767e\uff0c\u9000\u9690\u65f6\u7559\u4e66\u201d\u6d4b\u8bd5\u4e4b\u9053\uff0c\u5728\u7834\u4e0d\u5728\u62a4\u201d\u3002</li> </ul>"},{"location":"musings/matrix_history/#_8","title":"\u592a\u53f2\u516c\u66f0","text":"<p>\u89c2 Matrix \u4e16\u5bb6\u5341\u516b\u6625\u79cb\uff0c\u4ee5\u5b58\u50a8\u4e3a\u9aa8\uff0c\u534f\u8bae\u4e3a\u8109\uff0c\u5386\u4e09\u4ee3\u6280\u672f\u9769\u547d\u800c\u7cbe\u9b42\u4e0d\u706d\u3002\u6700\u53ef\u53f9 \u8005\uff0c\u5176\u90e8\u4e0d\u8bbe\u95e8\u6237\uff0c\u7a1a\u5b50\u53ef\u8bba\u9053\uff0c\u5dfe\u5e3c\u80fd\u6267\u65d7\uff0c\u4e94\u6d32\u624d\u4fca\u7686\u5bb9\u819d\u4e0b\u3002\u7136\u65f6\u79fb\u4e16\u6613\uff0c\u5de8\u8f6e\u503e\u8f67 \u95f4\uff0c\u7eb5\u6709\u79fb\u5c71\u586b\u6d77\u4e4b\u6280\uff0c\u7ec8\u4e0d\u654c\u5927\u52bf\u6d2a\u6d41\u3002\u6614\u97e9\u975e\u60b2\u300a\u5b64\u6124\u300b\uff0c\u4eca\u5f55\u6b64\u4f20\uff0c\u4ea6\u4e3a\u5929\u4e0b\u6280\u672f\u90e8 \u66f2\u4f5c\u955c\u9274\u2014\u2014\u6280\u672f\u957f\u5b58\u800c\u5efa\u5236\u6613\u673d\uff0c\u552f\u5f00\u6e90\u7cbe\u795e\u53ef\u7eed\u706b\u79cd\u4e8e\u6c5f\u6e56\u3002\u60b2\u592b\uff01</p>"},{"location":"musings/matrix_history/#_9","title":"\u9644\u6ce8","text":"<p>\u5c1a\u6709\u90ed\u5175\u3001\u4e1c\u54f2\u3001LiJun\u3001HHK\u7b49\u8bf8\u8d24\u672a\u53ca\u5217\u4f20\uff0c\u5404\u5c55\u82f1\u534e\uff0c\u4ff1\u4e3a\u680b\u6881\u3002\u7136\u9752\u7b80\u96be \u7a77\uff0c\u72b9\u6709\u5341\u6570\u4fca\u6770\u6697\u85cf\u661f\u8f89\u3002\u5fc6\u6614\u6668\u660f\u5e76\u8f94\uff0c\u4ee3\u7801\u6c5f\u6e56\u7686\u7559\u9e3f\u722a\uff1b\u4eca\u58a8\u5c3d\u800c\u540d\u518c\u672a\u5168\uff0c\u8bf8\u541b \u98ce\u9aa8\uff0c\u957f\u5b58Matrix\u661f\u56fe\u3002\u4f0f\u60df\u89c1\u8c05\uff0c\u8c28\u6b64\u987f\u9996\u3002</p>"},{"location":"musings/matrix_history_input/","title":"Matrix","text":""},{"location":"musings/matrix_history_input/#matrix","title":"Matrix","text":"<p>\u56e2\u961f\u521b\u7acb\u65f6\u95f4\uff1a 2007 \u53d1\u6e90\u5730\uff1a \u8bfa\u57fa\u4e9a\u676d\u5ddesite matrix \u540d\u79f0\u662f\u7531\u5f97\u524d\u6240\u8d77\uff0c\u6e90\u4e8e\u9ed1\u5ba2\u5e1d\u56fd\u7684matrix\u540d\u79f0</p> <p>\u6210\u5458\u53d8\u52a8\u5386\u53f2\uff1a \u521d\u521b\u6210\u5458\u6784\u6210\uff1a \u949f\u534e\u3001\u5f20\u70b3\u9009\u3001\u674e\u5fb7\u524d\u3001\u5f20\u5e7f\u57ce \u8fd9\u4e2ateam \u7ecf\u5386\u4e86\u901a\u4fe1\u4e1a\u53d1\u5c55\u7684 2.5G / 3G / 4G / 5G\u65f6\u4ee3\u3002  </p> <p>\u521d\u59cb\u56e2\u961f\u662f\u5f20\u70b3\u9009\u674e\u5fb7\u524d\u8d74\u82ac\u5170transfer poxlib\uff0c\u5f00\u59cb\u79cd\u4e0bshadows \u6587\u4ef6\u7cfb\u7edf\u7684\u79cd\u5b50\uff0c\u4ece\u6b64matrix \u6709\u4e86\u5b58\u50a8\u57fa\u56e0\u3002</p> <p>\u540e\u7406\u8fbe\u3001\u6587\u7b80\u3001\u52c7\u52a0\u5165 2009\u5e74\u5e7f\u6210\u79bb\u5f00\uff0c\u5b59\u840d\u52a0\u5165  \u540e\u7eedK5\u3001\u5c0f\u5a23\u76f8\u7ee7\u52a0\u5165\uff0c\u540e\u53c8\u79bb\u5f00 2011\u5e74\u6709\u7684\u6210\u5458\u662f\uff1a\u5f00\u53d1\uff1a\u70b3\u9009\u3001\u6587\u7b80\u3001\u52c7\u3001\u5fb7\u524d\u3001\u6d4b\u8bd5\uff1a\u7406\u8fbe\u3001\u840d\u3001\u6653\u7ea2 \u548c \u5b9e\u4e60\u751f\u51ac\u51ac 2011\u5e74\u4ece\u5b66/\u519b\u8bda/\u6d0b\u6d0b\u76f8\u7ee7\u52a0\u5165\uff0c\u6b64\u65f6PO\uff1a \u6d77\u519b\uff0cManager \u949f\u534e</p> <p>2012 \u6653\u7ea2\u8f6c\u5230\u5176\u4ed6team, Manager \u7531\u949f\u534e\u53d8\u6210\u8bb8\u4f1f\uff0c \u6f58\u6587\u7b80\u79bb\u5f00Nokia\uff0c\u4f20\u6388shadows \u7ed9\u4ece\u5b66\u3002</p> <p>2012\u5e743G\u65f6\u4ee3\u5f00\u59cb\uff0c\u4eceFeature 2601 \u5f00\u59cb\u738b\u52c7Lead team \u8fdb\u5165TRC &amp; HW diagnostic \u9886\u57df \u3002</p> <p>2013 PO+Manager \u53d8\u6210\u5434\u9ad8\u697c\uff0c \u5468\u6d0b\u6d0b/ \u9648\u519b\u8bda\u76f8\u7ee7\u79bb\u5f00</p> <p>2014 \u738b\u52c7\u79bb\u5f00NOkia \u8f6c\u8eab\u5230\u7f8e\u56fd\u6c42\u5b66</p> <p>2014 \u7f57\u6cfd\u6587\uff0c\u8521\u97f6\u534e\u5148\u540e\u52a0\u5165\u7136\u540e\u79bb\u5f00\uff0c 2014\u6d77\u9f99\u3001 \u590f\u658c\u76f8\u7ee7\u52a0\u5165\uff0c \u590f\u658c\u4f20\u6388SIS \u7ed9\u6d77\u9f99\u540e\u79bb\u5f00\u505aPO\uff0c\u4e3d\u971e\u52a0\u5165\u505a\u6d4b\u8bd5</p> <p>2016 George /Shujun / \u7433\u52a0\u5165\uff0c\u8fdb\u51655G cloud \u65f6\u4ee3\uff0c\u5f00\u59cbglusterfs \u5b58\u50a8\uff0c\u6b64\u65f6PO \u9ad8\u697c\uff0c Manager \u5305\u5305 2017 \u6653\u73b2\u4ee5\u6d4b\u8bd5\u4e13\u5bb6\u8eab\u4efd\u52a0\u5165 2018 \u949f\u534e\u518d\u6b21\u6210\u4e3aMatrix Manager\uff0c\u590f\u658c\u4e3aPO\uff0c\u4ece\u6b64matrix focus\u5728\u4e91\u5b58\u50a8\u5e76\u5f00\u59cb\u63a5\u89e6SWM domain  2018~2021 \u5e74team \u5f00\u59cb\u505aSEC domain \u7684\u5de5\u4f5c vault \u3001UM\u7b49\u9886\u57df\u5148\u540e\u6d89\u53ca  2022 \u5f00\u59cb\u505aLCM \u84dd\u7eff\u5347\u7ea7\uff0c\u548c\u5f20\u8f89\u7684team \u5f00\u59cb\u7531\u4ea4\u96c6 2023 \u949f\u534e\u3001\u590f\u658c\u5230\u8461\u8404\u7259\u4e3a\u8461\u8404\u7259\u521b\u7acb\u65b0\u7684site\uff0c \u5f97\u524d\u3001\u6653\u73b2\u4e5f\u79bb\u5f00\u8bfa\u8bb0\uff0c Matrix team \u7531\u539f\u6765\u7684\u4e24\u4e2ateam \u91cd\u65b0\u5408\u5e76\u800c\u6210\uff0c\u65b0\u7684team \u6210\u5458\uff1a \u4ece\u5b66 \u3001 \u840d\u3001\u7433\u3001George\u3001shujun\u3001\u8c37\u741b\u3001\u6653\u4e91\uff0c \u70b3\u9009 \u548c\u8363\u6770\u4f5c\u4e3aarch \uff0c PO \u53d8\u6210Rooney\uff0c \u5f20\u8f89\u662fmanager\uff0c\u4ece\u6b64\u676d\u5dde\u548c\u8461\u8404\u7259\u4e00\u8d77\u5f00\u53d1LCM\u3002 2024 George\u79bb\u5f00\uff0c\u4ece\u5b66\u5f00\u59cb\u8fdb\u5165AI\u9886\u57df\uff0c\u7528AI\u505acode review robot \u53d1\u6325AI\u7684\u529f\u6548 2025 \u4ece\u5b66\u3001\u5b59\u840d\u3001shujun\u79bb\u5f00\u8bfa\u8bb0\uff0c \u6653\u4e91  \u53bb\u5f80\u8461\u8404\u7259\uff0c \u5269\u4e0b\u7684\u8f6c\u5230West Lake \uff0c\u81f3\u6b64Matrix\u4e0d\u590d\u5b58\u5728</p> <p>matrix \u4ece07\u52302025\u5e74\u7ecf\u5386\u4e86\u901a\u4fe1\u884c\u4e1a\u76843/4/5G\u53d1\u5c55\uff0c\u6280\u672f \u624e\u6839\u5b58\u50a8\u4ece\u6700\u521d\u7684shadows filesystem  \u5230glusterfs \u3001ceph\u518d\u5230container \u65f6\u4ee3\u7684 unfs\u3001rsync  \uff0c \u5b58\u50a8\u4e00\u76f4\u662fmatrix \u7684\u7b4b\u9aa8 \u53e6\u5916\u8fd8\u6d89\u53ca\u5230\u4e86\u4e00\u4e9b\u9886\u57df - SEC -TRC - Diagnostic - SWM -LCM \u5728AI\u65f6\u4ee3\u4e5f\u4e00\u76f4\u662f\u7d27\u8ddf\u65f6\u4ee3\u6f6e\u6d41</p> <p>\u671f\u671b\u7684\u603b\u7ed3\u65b9\u5411\uff1a \u6280\u672f\u521b\u65b0\uff0c \u56e2\u961f\u5305\u5bb9\u3001\u7531\u4e8e\u653f\u6cbb\u56e0\u7d20\u5bfc\u81f4matrix team \u6d88\u5931\u8868\u793a\u9057\u61be</p> <p>\u6700\u540e\u9644\u52a0\uff1a\u8fd8\u6709\u4e9b\u540c\u4e8b\u4e5f\u5728matrix \u5de5\u4f5c\u8fc7\u4f8b\u5982LiJun/\u90ed\u5175\uff0c\u4e1c\u54f2\uff0c\u5c0f\u5a23\uff0cK8\uff0c HHK\u7b49\u6ca1\u6709\u6765\u5f97\u53ca\u4e00\u8d77\u5217\u51fa</p>"},{"location":"musings/murphy_law/","title":"Murphy&rsquo;s Law","text":""},{"location":"musings/murphy_law/#murphys-law","title":"Murphy\u2019s Law","text":"<p>Anything that can go wrong will go wrong.</p> <p>In some formulations, it is extended to:</p> <p>Anything that can go wrong will go wrong, and at the worst possible time.\u201d</p> <p>\u58a8\u83f2\u5b9a\u5f8b</p> <p>\u51e1\u662f\u62c5\u5fc3\u53d1\u751f\u7684\u4e8b\u60c5\u5c31\u4e00\u5b9a\u4f1a\u53d1\u751f\uff0c\u51e1\u662f\u53ef\u80fd\u51fa\u9519\u7684\u4e8b\u5c31\u4e00\u5b9a\u4f1a\u51fa\u9519\u3002</p>"},{"location":"musings/murphy_law/#_1","title":"\u4e91\u8ba1\u7b97\u58a8\u83f2\u5b9a\u5f8b","text":"<p>\u201c\u5728\u4e91\u8ba1\u7b97\u4e2d\uff0c\u5982\u679c\u6709\u4ec0\u4e48\u53ef\u80fd\u51fa\u9519\u7684\u5730\u65b9\uff0c\u90a3\u4e48\u5b83\u5fc5\u5b9a\u4f1a\u51fa\u9519\u3002\u201d</p> <p>\u4e03\u725b\u4e91\u603b\u7ed3\u7684\u4e91\u8ba1\u7b97\u9886\u57df\u516d\u6761\u65b0\u58a8\u83f2\u5b9a\u5f8b\uff1a </p> <p>\u901a\u8fc7\u8fd9\u4e2a\u5468\u672bdebug\u7684\u95ee\u9898\uff0c\u6211\u89c9\u5f97\u8fd8\u53ef\u4ee5\u518d\u52a0\u4e00\u6761\uff1a</p> <ul> <li>\u670d\u52a1\u4e2d\u65ad\uff1a \u4e91\u670d\u52a1\u53ef\u80fd\u4f1a\u56e0\u4e3a\u5404\u79cd\u539f\u56e0\u51fa\u73b0\u6682\u65f6\u6027\u6216\u6301\u7eed\u6027\u7684\u670d\u52a1\u4e2d\u65ad\uff0c\u53ef\u80fd\u662f\u7531\u4e8e\u786c\u4ef6 \u6545\u969c\u3001\u7f51\u7edc\u95ee\u9898\u6216\u5176\u4ed6\u4e0d\u53ef\u9884\u89c1\u7684\u56e0\u7d20\u3002</li> </ul>"},{"location":"musings/murphy_law/#references","title":"References","text":"<ul> <li>https://en.wikipedia.org/wiki/Murphy%27s_law</li> </ul>"},{"location":"musings/new_beginning/","title":"In the midst of chaos, there is also opportunity","text":""},{"location":"musings/new_beginning/#in-the-midst-of-chaos-there-is-also-opportunity","title":"In the midst of chaos, there is also opportunity","text":"<p>Today marks the beginning of a new chapter for our development team. It\u2019s been a whirlwind of changes lately, and I can\u2019t help but feel a mixture of excitement and apprehension about the future. I\u2019ve always believed in our team\u2019s potential, and I\u2019m determined to steer us through these turbulent times and emerge even stronger.</p> <p>First and foremost, our Scrum Master has left the team. This is a significant loss as they played a crucial role in ensuring our agile processes ran smoothly. It\u2019s going to be challenging to fill their shoes, but we are a resilient bunch, and I\u2019m confident that we can adapt and find a way to manage our projects effectively.</p> <p>Another unsettling change is the reduction in the number of employees in our company. It\u2019s never easy to see colleagues go, especially when they are talented and valuable contributors. The workload on those of us who remain has increased, but we are determined to rise to the occasion and continue delivering quality work.</p> <p>On a positive note, we have welcomed new team members. While it might take some time for them to integrate fully, I see this as an opportunity for fresh perspectives and ideas. Diversity in our team can only make us stronger in the long run.</p> <p>Perhaps the most significant change is the arrival of our new manager. Change at the managerial level can be both exciting and challenging. Our previous manager had a deep understanding of our team dynamics and individual strengths, but I\u2019m hopeful that our new manager will bring a fresh perspective and help us grow in new ways.</p> <p>In times like these, it\u2019s essential to focus on our strengths and remind ourselves of our past successes. We\u2019ve overcome challenges before, and I have faith that we will do so again. We have a talented and dedicated group of individuals, and I\u2019m determined to lead us toward even greater achievements.</p> <p>As I sit here and reflect on the changes ahead, I\u2019m reminded of a quote I once read: \u201cIn the midst of chaos, there is also opportunity.\u201d We may be facing uncertainty, but I firmly believe that this is an opportunity for us to grow, innovate, and become more powerful.</p> <p>Here\u2019s to the journey ahead, and may our team emerge from these changes stronger and more resilient than ever.</p>"},{"location":"musings/one_person_like_a_team/","title":"\u4e00\u4e2a\u4eba\u8981\u50cf\u4e00\u652f\u961f\u4f0d","text":""},{"location":"musings/one_person_like_a_team/#_1","title":"\u4e00\u4e2a\u4eba\u8981\u50cf\u4e00\u652f\u961f\u4f0d","text":"<p>\u4e00\u4e2a\u4eba\u8981\u50cf\u4e00\u652f\u961f\u4f0d\u3002</p> <p>\u5bf9\u7740\u81ea\u5df1\u7684\u5934\u8111\u548c\u5fc3\u7075\u62db\u5175\u4e70\u9a6c\u3002</p> <p>\u4e0d\u6c14\u9981\uff0c\u6709\u53ec\u5524\uff0c\u7231\u81ea\u7531\u3002</p> <p>-- \u6bd5\u6dd1\u654f</p> <p>\u4eca\u5929\u8bfb\u5230\u6bd5\u6dd1\u654f\u7684\u8fd9\u6bb5\u8bdd\uff0c\u5c1d\u8bd5\u7ffb\u8bd1\u6210\u82f1\u6587\u5982\u4e0b\uff1a</p> <pre><code>\nA person should be like a team.\nRecruit for your own mind and heart.\nDon't be discouraged, have a call, love freedom.\n</code></pre> <p>\u7528ChatGPT \u7ffb\u8bd1\u7684\u7ed3\u679c\uff1a</p> <pre><code>An individual should resemble a team.\n\nRecruit and assemble within their own mind and soul.\n\nRemain undaunted, driven by a sense of purpose, and embrace the spirit of freedom.\n</code></pre> <p>\u60f3\u8d77\u4e86\u9648\u7693\u7684\u4e00\u7bc7\u535a\u5ba2\uff0c\u642c\u8fd0\u8fc7\u6765\u3002</p> <p>\u4ee5\u4e0b\u662f\u9648\u7693\u7684\u535a\u5ba2\u94fe\u63a5\u53ca\u539f\u6587\u3002</p> <p>\u7a0b\u5e8f\u5458\u7684\u8c0e\u8c2c\u4e4b\u8a00\u8fd8\u662f\u81f3\u7406\u540d\u8a00\uff1f</p> <p>\u201cI will learn it when I need it \u2013 \u6211\u4f1a\u5728\u6211\u9700\u8981\u7684\u65f6\u5019\u518d\u5b66\u201c\uff01</p> <p>\u6211\u542c\u5230\u8fd9\u53e5\u5df2\u7ecf\u5f88\u591a\u5e74\u4e86\u3002\u8fd9\u5bf9\u4e8e\u4e00\u4e2a\u9ad8\u901f\u53d8\u5316\u7684\u8f6f\u4ef6\u884c\u4e1a\u73af\u5883\u6765\u8bf4\uff0c\u8fd9\u4f3c\u4e4e\u662f\u4e00\u4e2a\u975e\u5e38\u5b9e \u7528\u7684\u6001\u5ea6\u3002 \u5728\u67d0\u4e9b\u65b9\u9762\u8fd9\u7684\u786e\u5f88\u5b9e\u7528\u4e3b\u4e49\uff0c\u4e0d\u8fc7\u5728\u5176\u5b83\u7684\u65b9\u9762\uff0c\u6211\u4e3a\u8fd9\u53e5\u8bdd\u611f\u5230\u5f88\u4e0d\u723d\u3002 \u8fd9\u53e5\u8bdd\u53d8\u6210\u4e86\u6574\u4e2a\u8f6f\u4ef6\u884c\u4e1a\u7684\u798f\u97f3\uff0c\u4f46\u5374\u6ca1\u6709\u8ba9\u6211\u4eec\u7684\u8f6f\u4ef6\u884c\u4e1a\u53d8\u5f97\u66f4\u597d\u3002\u5176\u95ee\u9898\u5728\u4e8e\uff0c\u8fd9 \u53e5\u8bdd\u4f2a\u88c5\u5728\u4e8e\u5176\u542c\u4e0a\u53bb\u50cf\u662f\u4e00\u4e2a\u667a\u6167\u7684\u6709\u7ecf\u9a8c\u7684\u5f00\u53d1\u8005\u8bf4\u7684\uff0c\u4f46\u662f\u4eba\u4eec\u53ea\u662f\u4ee5\u6b64\u4e3a\u501f\u53e3\u800c\u968f \u6ce2\u9010\u6d41\u3002\u5b9e\u5728\u662f\u6709\u592a\u591a\u7684\u4e1c\u897f\u9700\u8981\u6211\u4eec\u53bb\u4e86\u89e3\uff0c\u6211\u4eec\u4e5f\u7684\u786e\u9700\u8981\u5728\u5de5\u4f5c\u5f53\u4e2d\u6765\u5b66\u4e60\u8fd9\u4e9b\u4e1c \u897f\u3002\u4f46\u662f\uff0c \u201c\u5728\u5de5\u4f5c\u4e2d\u5b66\u4e60\u201d\u548c\u201c\u6839\u636e\u9047\u5230\u7684\u95ee\u9898\u6361\u77e5\u8bc6\u201d\u8fd9\u4e24\u8005\u6709\u7740\u5de8\u5927\u7684\u4e0d\u540c\u3002</p> <ul> <li> <p>\u53e6\u5916\uff0c\u76ee\u524d\u6574\u4e2a\u8f6f\u4ef6\u884c\u4e1a\u8d8a\u6765\u8d8a\u9700\u8981\u4e00\u5806\u591a\u9762\u624b\uff0c\u4e5f\u8bb8\u73b0\u5728\u5df2\u7ecf\u662f\u8fd9\u6837\u4e86\uff0c\u53ea\u662f\u6211\u8fd8\u6ca1\u6709 \u6ce8\u610f\u5230\u3002\u5f53\u7136\uff0c\u6211\u4e5f\u4e0d\u559c\u6b22\u8fd9\u79cd\u60c5\u3002\u73b0\u5728\uff0c\u597d\u50cf\u6ca1\u6709\u4eba\u613f\u610f\u82b1\u66f4\u591a\u7684\u65f6\u95f4\u6765\u628a\u67d0\u4e00\u4e2a\u4e1c\u897f\u5b66 \u597d\u5b66\u6df1\u5b66\u624e\u5b9e\uff0c\u6bd4\u5982 \u8ba1\u7b97\u673a\u79d1\u5b66\u7684\u57fa\u7840\u77e5\u8bc6\uff0c\u6216\u662f\u6700\u65b0\u7684\u4f60\u6b63\u5728\u4f7f\u7528\u7684\u6280\u672f\uff0c\u751a\u81f3\u4f60\u5728\u6700 \u8fd1\u51e0\u5e74\u5185\u6bcf\u5929\u90fd\u5728\u4f7f\u7528\u5176\u7f16\u7801\u7684\u7a0b\u5e8f\u8bed\u8a00\uff08\u53c2\u8003\uff1aJava is passed by value\uff09\uff08\u8bd1\u6ce8\uff1a\u6211 \u5728\u5982\u4f55\u5b66\u597dC++\u4e00\u6587\u7684\u56de\u590d\u4e2d\u5df2\u7ecf\u770b\u5230\u4e00\u4e9b\u8fd9\u6837\u7684\u4eba\uff09\u3002\u4f55\u82e6\u5462\uff1f\u4f60\u4f1a\u5728\u4f60\u7684\u5b66\u4e60\u8def\u9014\u4e2d\u770b \u5230\u8fd9\u4e9b\u4e1c\u897f\u88ab\u66f4\u65b0\uff0c\u88ab\u5e9f\u5f03\uff0c\u5e76\u53ef\u80fd\u53d8\u5f97\u5c0f\u4f17\u5316\u3002\u6211\u548c\u5f88\u591a\u4e0d\u540c\u7684\u4eba\u8ba8\u8bba\u8fc7\u5f88\u591a\u6b21\uff0c\u4f46\u662f\u597d \u50cf\u6ca1\u6709\u4eba\u610f\u8bc6\u5230\u8fd9\u662f\u4e00\u4e2a\u95ee\u9898\u3002 \u201c\u54e5\u4eec\uff0c\u505a\u4e2a\u5b9e\u7528\u4e3b\u4e49\u7684\u4eba\u5427\u201d\u3002</p> </li> <li> <p>\u4e0e\u6b64\u540c\u65f6\uff0c\u6211\u4eec\u6240\u6709\u7684\u4eba\u90fd\u5728\u76f8\u4e92\u5730\u514b\u9686\u548c\u6a21\u4eff\uff08\u8bd1\u6ce8\uff1a\u53c2\u770b\u4e2d\u56fd\u7684C2C\uff09\u3002\u4f60\u9700\u8981\u4e00\u4e2a Java\u7a0b\u5e8f\u5458\uff0c\u6211\u662f\u4e00\u4e2aJava\u7a0b\u5e8f\u5458\uff0c\u4f60\u4e5f\u662f\u4e00\u4e2aJava\u7a0b\u5e8f\u5458\uff0c\u6211\u7684\u90bb\u5c45\u4e5f\u662f\u4e00\u4e2aJava\u7a0b\u5e8f \u5458\u3002\u6211\u4eec\u4e4b\u95f4\u6709\u4ec0\u4e48\u5dee\u522b\uff1f\u5176\u5b9e\uff0c\u57fa\u672c\u6ca1\u6709\u5dee\u522b\u3002\u597d\u5427\uff0c\u6211\u6709\u4e00\u4e9bjQuery\u7684\u7ecf\u5386\uff0c\u592a\u597d\uff0c\u6240 \u4ee5\uff0c\u4f60\u77e5\u9053\u600e\u4e48\u6765\u505a\u4e00\u4e2a\u6298\u53e0\u5f0f\u7684\u83dc\u5355\uff1f\u5f53\u7136\uff0c\u6211\u53ef\u4ee5Google\u4e00\u4e0b\uff0c\u7136\u540e\u527d\u7a83\u522b\u4eba\u6700\u597d\u7684\u4ee3 \u7801\u7ed9\u4f60 :)\uff08\u8bd1\u6ce8\uff1a\u53c2\u770b\u201c\u5341\u6761\u4e0d\u9519\u7684\u7f16\u7a0b\u89c2\u70b9\u201d\u4e2d\u7684\u201dGoogling it\u201d is okay\uff09\u3002</p> </li> <li> <p>\u4e0e\u6b64\u540c\u65f6\uff0c\u4f60\u9700\u8981\u62db\u8058\u5230\u771f\u6b63\u7684\u4e13\u4e1a\u7ea7\u7684\u4eba\u7269\uff08\u6bd4\u5982\uff0c\u4f60\u9700\u8981\u5199\u4e00\u4e2a\u5f88\u725b\u7684\u89e3\u6790\u7a0b\u5e8f\u6765\u4ee5 \u56fe\u5f62\u5316\u5c55\u793a\u4e00\u4e0b\u540e\u53f0\u6570\u636e\uff09\uff0c\u90a3\u4e48\u4f60\u53ef\u80fd\u9700\u8981\u51c6\u5907\u8db3\u591f\u7684\u5564\u9152\u548c\u4e09\u660e\u6cbb\uff0c\u56e0\u4e3a\u4f60\u53ef\u5f88\u6709\u4e00\u6bb5 \u65f6\u95f4\u627e\u4e0d\u5230\u8fd9\u6837\u7684\u4eba\u3002\u597d\u4e86\uff0c\u5176\u5b9e\uff0c\u662f\u6709\u4e00\u4e9b\u65b9\u6cd5\u6765\u533a\u5206\uff0c\u6bd4\u5982\uff0c\u6211\u6709\u66f4\u597d\u7684\u6c9f\u901a\u80fd\u529b\uff0c\u8fd9 \u5c31\u662f\u4e3a\u4ec0\u4e48\u6211\u53ef\u4ee5\u505a\u5f97\u66f4\u597d\u3002\u8fd9\u662f\u76f8\u5f53\u91cd\u8981\u7684\uff0c\u4f46\u662f\uff0c\u5982\u679c\u6211\u4eec\u7528\u8f6f\u80fd\u529b\u800c\u4e0d\u662f\u7528\u6280\u672f\u80fd\u529b \u6765\u533a\u5206\u7a0b\u5e8f\u5458\u7684\u597d\u574f \u2013  \u662f\u4e0d\u662f\u6709\u90a3\u4e48\u70b9\u53cd\u5e38\u548c\u53d8\u6001\u3002\u6211\u4eec\u6240\u6709\u4eba\u90fd\u53ef\u4ee5\u6c9f\u901a\u5f97\u5f88\u597d\uff0c\u4f46\u662f \u6211\u4eec\u7684\u4ee3\u7801\u4e71\u6210\u4e00\u56e2 :)\u3002\u8be5\u6b7b\u7684\uff0c\u6211\u672c\u4e0d\u5e94\u8be5\u8bf4\u8fd9\u4e8b\uff0c\u6211\u4e5f\u6709\u4e00\u70b9\u5168\u624d\u7684\u6837\u5b50\u3002\u5f53\u7136\uff0c\u6211 \u89c9\u5f97\u6211\u81ea\u5df1\u662f\u4e00\u4e2a T\u578b\u4eba\u624d\uff08\u8bd1\u6ce8\uff1a\u5373\u6709\u6df1\u5ea6\u53c8\u6709\u5e7f\u5ea6\uff09\uff0c\u4f46\u662f\u5982\u679c\u6211\u4eec\u90fd\u975e\u5e38\u8bda\u5b9e\u7684\u8bdd\uff0c \u6211\u4eec\u4f1a\u53d1\u73b0\u66f4\u591a\u7684\u4eba\u7684\u80fd\u529b\u662f\u201c\u6a2a\u7ebf\u578b\u201d\u6216\u662f\u201c\u4e0b\u5212\u7ebf\u578b\u201d\u7684\uff08\u8bd1\u6ce8\uff1a\u5e7f\u5ea6\u578b\uff09\uff0c\u5176\u4e2d\u53ea\u6709\u5f88\u5c11 \u6570\u7684\u4eba\u624d\u662f\u6709\u80fd\u529b\u7684\u3002\u800c\u6211\u4eec\u7684\u201cT\u578b\u4eba\u624d\u201d\u5728\u8fd9\u4e9b\u4eba\u4e2d\u5c31\u50cf\u4e00\u4e2a\u5de8\u5927\u7684\u949f\u4e73\u77f3\u3002\u4f60\u770b\u4e0a\u53bb\u50cf \u4e00\u4e2a\u4e13\u5bb6\uff0c\u4f46\u4e5f\u8bb8\u4f60\u4ece\u6ca1\u6709\u505a\u8fc7\u4e13\u5bb6\uff0c\u8fd9\u5c31\u662f\u4e13\u624d\u5728\u6ee1\u662f\u5168\u624d\u7684\u4e16\u754c\u4e2d\u7684\u4f18\u52bf\u3002</p> </li> </ul>"},{"location":"musings/one_person_like_a_team/#_2","title":"\u6295\u8d44\u4f60\u7684\u672a\u6765","text":"<p>\u6211\u4e0d\u60f3\u4ee5\u8bf4\u6559\u7684\u65b9\u5f0f\u6765\u544a\u8bc9\u4f60\u4eba\u4eec\u5e94\u8be5\u600e\u4e48\u6837\u6765\u6295\u8d44\u81ea\u5df1\u672a\u6765\u7684\u804c\u4e1a\u751f\u6daf\uff0c\u56e0\u4e3a\u6bcf\u4e2a\u4eba\u90fd\u77e5 \u9053\u6211\u4eec\u5e94\u8be5\u600e\u4e48\u505a\u3002\u5f88\u591a\u4eba\u4e5f\u8bb8\u8ba4\u4e3a\u4ed6\u4eec\u6b63\u5728\u6295\u8d44\uff0c\u4ed6\u4eec\u52aa\u529b\u594b\u6597\uff0c\u5199\u5f88\u591a\u7684\u4ee3\u7801\uff0c\u5e76\u4e5f\u505a \u4e00\u4e9b\u9605\u8bfb\uff0c\u5f53\u7136\uff0c\u8fd9\u6837\u575a\u6301\u4e0b\u53bb\uff0c\u4e5f\u8bb8\u5341\u5e74\u4e5f\u53ef\u4ee5\u6210\u4e3a\u4e00\u4e2a\u4e13\u5bb6\uff0c\u800c\u6210\u4e3a\u4e00\u4e2a\u54a8\u6df1\u4e13\u5bb6\u53ef\u80fd \u9700\u898120\u5e74\uff08\u6211\u4f1a\u4e0d\u65ad\u5730\u8bf4\u8fd9\u4e9b\u89c2\u70b9\uff0c\u603b\u6709\u4e00\u5929\u6211\u4f1a\u628a\u8fd9\u4e2a\u4e8b\u8bf4\u660e\u767d :) \uff09\u3002\u4f46\u662f\uff0c\u5982\u679c\u771f\u662f \u8fd9\u6837\u7684\u5427\uff0c\u6bcf\u4e00\u4e2a\u8001\u5bb6\u4f19\u90fd\u4f1a\u6210\u4e3a\u5404\u4e2a\u65b9\u9762\u7684\u4e13\u5bb6\uff0c\u5f53\u7136\uff0c\u4e8b\u5b9e\u662f\u4e0d\u4f1a\u8fd9\u6837\u7684\u3002\u4e5f\u8bb8\u662f\u56e0\u4e3a \u4eba\u4eec\u4e0d\u77e5\u9053\u5982\u4f55\u53d1\u5c55\u4ed6\u4eec\u7684\u4e13\u957f\uff08\u8fd9\u662f\u4e8b\u5b9e\uff09\uff0c\u4f46\u6211\u79c1\u4e0b\u91cc\u5374\u6000\u7591\uff0c\u5927\u5bb6\u7f3a\u5c11\u7684\u662f\u70ed\u60c5\u800c\u4e0d \u662f\u77e5\u8bc6\u3002\u6211\u6240\u8bf4\u7684\u8fd9\u4e9b\u4e1c\u897f\u96be\u9053\u4e0d\u90fd\u662f\u8fd9\u6837\u7684\u539f\u56e0\u5417\uff1f</p> <p>\u6211\u5b8c\u5168\u8dd1\u9898\u4e86\u3002\u201c\u5728\u4e13\u4e1a\u4e0a\u6295\u8d44\u672a\u6765\u201d\u53ea\u662f\u8fd9\u4e9b\u6d41\u884c\u8bed\u4e2d\u7684\u4e00\u4e2a\uff0c\u800c\u91cd\u70b9\u662f\u90a3\u53e5\u8bdd \u2013 \u201cI will learn it when I need it \u2013 \u6211\u4f1a\u5728\u6211\u9700\u8981\u7684\u65f6\u5019\u518d\u5b66\u201d\u3002\u5bf9\u6211\u8001\u7238\u6765\u8bf4\u8fd9\u6837\u505a\u633a\u597d\uff0c\u8fc4\u4eca \u4e3a\u6b62\u5bf9\u6211\u4e5f\u6709\u6548\u3002\u4f46\u662f\u8ba9\u6211\u4eec\u6362\u4e00\u4e2a\u89d2\u5ea6\u770b\u770b\uff0c\u6bd4\u5982\u91d1\u878d\u65b9\u9762\uff0c\u5982\u679c\u6211\u4eec\u8bf4\uff1a\u201c\u6211\u4f1a\u5728\u6211\u9700 \u8981\u94b1\u7684\u65f6\u5019\u518d\u53bb\u8fdb\u884c\u6295\u8d44\u201d\u3002\u5728\u8fd9\u53e5\u8bdd\u4e0a\u9762\u90a3\u4e2a\u5b9e\u7528\u4e3b\u4e49\u7684\u5149\u73af\u5c31\u4e0d\u90a3\u4e48\u6f02\u4eae\u4e86\u3002</p>"},{"location":"musings/one_person_like_a_team/#_3","title":"\u4f60\u4e0d\u77e5\u9053\u4f60\u4e0d\u77e5\u9053\u7684","text":"<p>\u6211\u4eec\u90fd\u6709\u8fc7\u8fd9\u6837\u7684\u65f6\u5019\uff0c\u5f53\u6211\u4eec\u75db\u82e6\u5730\u5728\u89e3\u51b3\u4e00\u4e2a\u95ee\u9898\u7684\u65f6\u5019\uff0c\u6709\u4eba\u7a81\u7136\u544a\u8bc9\u4f60\u4e00\u4e2a\u7b97\u6cd5\u6216 \u662f\u4e00\u4e2a\u6280\u672f\uff0c\u5176\u628a\u8fd9\u4e2a\u95ee\u9898\u53d8\u5f97\u53c8\u5feb\u53c8\u7b80\u5355\u3002\u662f\u7684\uff0c\u6709\u4eba\u544a\u8bc9\u4f60\u4e00\u4e2a\u5bb9\u6613\u7684\u65b9\u6cd5\u662f\u4e00\u4ef6\u5f88\u5e78 \u8fd0\u7684\u4e8b\uff0c\u5426\u5219\u4f60\u53ef\u80fd\u9700\u8981\u82b1\u4e0a\u6570\u5929\u6216\u6570\u5468\u624d\u80fd\u627e\u5230\u89e3\u51b3\u65b9\u6cd5\uff0c\u5e76\u4e14\u4e8b\u60c5\u53ef\u80fd\u4f1a\u53d8\u5f97\u4e00\u56e2\u7cdf\u3002 \u4f60\u4e0d\u4f1a\u56e0\u6b64\u800c\u88ab\u6279\u8bc4\uff0c\u56e0\u4e3a\u4f60\u4e0d\u77e5\u9053\u4f60\u6240\u4e0d\u77e5\u9053\u7684\u4e1c\u897f\u3002\u5bf9\u6b64\uff0c\u201cI will learn it when I need it \u2013 \u6211\u4f1a\u5728\u6211\u9700\u8981\u7684\u65f6\u5019\u518d\u5b66\u201d\u5728\u8fd9\u4e2a\u65f6\u5019\u5c31\u8d70\u4e0d\u901a\u4e86\u3002\u56e0\u4e3a\uff0c\u4f60\u4e0d\u53ef\u80fd\u5b66\u4e60\u90a3\u4e9b\u4f60 \u4ee5\u4e3a\u4e0d\u5b58\u5728\u7684\u4e1c\u897f\u3002Google\u505a\u4e86\u5f88\u591a\u7684\u5de5\u4f5c\u6765\u51cf\u8f7b\u548c\u7f13\u89e3\u8fd9\u6837\u7684\u95ee\u9898\uff0c\u4f46\u5e76\u4e0d\u5b8c\u7f8e\u3002\u5728\u4e00\u4e2a \u964c\u751f\u7684\u73af\u5883\u4e0b\u9762\u5bf9\u7740\u4e00\u5806\u964c\u751f\u7684\u95ee\u9898\uff0c\u4f1a\u8ba9\u4f60\u975e\u5e38\u975e\u5e38\u5730\u75db\u82e6\uff0c\u9664\u975e\u4f60\u77e5\u9053\u4f60\u6240\u9762\u5bf9\u7684\u662f\u4ec0 \u4e48\uff08\u4f8b\u5982\uff1a\u5982\u679c\u4f60\u5bf9\u641c\u7d22\u548c\u7ea6\u675f\u4f20\u64ad\uff08constraint propagation\uff09\u6709\u70b9\u4e86\u89e3\u7684\u8bdd\uff0c\u90a3\u4f60\u5c31\u53ef \u80fd \u5bb9\u6613\u5730\u89e3\u51b3\u6570\u72ec\u95ee\u9898\uff0c\u5426\u5219\u7684\u8bdd\uff0c \u8fd9\u7684\u786e\u662f \u975e\u5e38 \u96be\u7684\uff09\u3002\u4f60\u65e0\u6cd5\u5b66\u4e60\u4e00\u79cd\u4e0d\u77e5\u9053\u6216\u662f \u4f60\u4e0d\u77e5\u9053\u7528\u5728\u54ea\u91cc\u7684\u7b97\u6cd5\u3002\u4f60\u4e5f\u4e0d\u53ef\u80fd\u53bb\u7528\u4e00\u4e2a\u4f60\u4ee5\u4e3a\u4e0d\u5b58\u5728\u7684\u6280\u672f\u53bb\u89e3\u51b3\u4e00\u4e2a\u95ee\u9898\u3002\u540c \u6837\uff0c\u4f60\u8eab\u8fb9\u4e5f\u4e0d\u53ef\u4ee5\u4e00\u76f4\u90fd\u6709\u4e00\u4e2a\u9ad8\u4eba\u968f\u65f6\u5728\u7ed9\u4f60\u6307\u5f15\u6b63\u786e\u7684\u65b9\u5411\u3002\u6211\u6562\u6253\u8d4c\uff0c\u8fd9\u4e2a\u4e16\u754c\u4e0a \u6709\u51e0\u5341\u4ebf\u884c\u4ee3\u7801\u53ef\u4ee5\u88ab \u51e0\u767e\u4e07\u884c\u66f4\u5feb\uff0c\u66f4\u6e05\u695a\uff0c\u66f4\u7b80\u5355\u7684\u4ee3\u7801\u6240\u53d6\u4ee3\uff0c\u56e0\u4e3a\u65e0\u8bba\u662f\u8c01\u6765 \u5199\uff0c\u4ed6\u90fd\u4e0d\u53ef\u80fd\u77e5\u9053\u4ed6\u6240\u4e0d\u77e5\u9053\u7684\u4e1c\u897f\u3002</p> <p>\u6211\u60f3\u5728\u8fd9\u91cc\u6210\u4e3a\u8fd9\u4e2a\u89c2\u70b9\u7684\u53cd\u65b9\uff0c\u5982\u679c\u6211\u4eec\u77e5\u9053\u6211\u4eec\u6709\u54ea\u4e9b\u4e1c\u897f\u6211\u4eec\u4e0d\u77e5\u9053\uff0c\u90a3\u4e48\u6211\u4eec\u5c31\u77e5 \u9053\u6211\u4eec\u9700\u8981\u53bb\u5173\u6ce8\u54ea\u4e9b\u4e1c\u897f\u3002\u7c97\u6d45\u5730\u5c3d\u53ef\u80fd\u7684\u5927\u8303\u56f4\u7684\u77e5\u9053\u8fd9\u4e9b\u4e1c\u897f\uff0c\u90a3\u4e48\uff0c\u6211\u4eec\u5c31\u53ef\u4ee5\u5728 \u9047\u5230\u95ee\u9898\u7684\u65f6\u5019\u660e\u767d\u6211\u4eec\u5e94\u8be5\u53bb\u66f4\u6df1\u5730\u5b66\u4ec0\u4e48\u6837\u7684\u77e5\u8bc6\u3002\u4f46\u662f\uff0c\u8fd9\u6837\u6765\u505a\u5728\u5b9e\u9645\u4e0a\u5e76\u4e0d\u6709 \u6548\uff0c\u56e0\u4e3a\uff0c\u8fd9\u4e9b\u6d6e\u4e91\u822c\u7684\u77e5\u8bc6\u4e0d\u4f1a\u8ba9\u4f60\u8bb0\u4e0b\u6765\uff0c\u6211\u4eec\u7684\u5927\u8111\u4e0d\u662f\u8fd9\u6837\u5de5\u4f5c\u7684\u3002\u5982\u679c\u6211\u4eec\u4e0d\u53bb \u5f3a\u5316\u6216\u662f\u6df1\u5ea6\u6316\u6398\u53bb\u6d88\u5316\u8fd9\u4e9b\u6982\u5ff5\uff0c \u6211\u4eec\u7684\u5927\u8111\u4f1a\u5f88\u5feb\u5730 \u628a\u8fd9\u4e9b\u4fe1\u606f\u6807\u4e3a\u4e0d\u91cd\u8981\u5e76\u6362\u9875\u51fa \u53bb\uff0c\u8fd9\u4e48\u505a\u65e0\u975e\u5c31\u662f\u5728\u6d6a\u8d39\u65f6\u95f4\uff08\u4f60\u56de\u5934\u60f3\u4e00\u60f3\u4f60\u90a3\u4e9b\u201c\u586b\u9e2d\u5f0f\u201d\u7684\u6b7b\u8bb0\u786c\u80cc\u7684\u77e5\u8bc6\uff0c\u4f60\u4eca\u5929 \u8fd8\u8bb0\u5f97\u5417\uff1f\uff09\u7136\u800c\uff0c\u5bf9\u4e8e\u90a3\u4e9b\u4f60\u96c6\u4e2d\u7cbe\u529b\u6df1\u5ea6\u7814\u7a76\u8fc7\u7684\u4e1c\u897f\u2014\u2014\u5e76\u4f34\u968f\u7740\u4f60\u7684\u5174\u8da3\u7684\u4e1c\u897f\u2014\u2014\u4f60 \u4f1a\u6536\u83b7\u5230\u624e\u5b9e\u7684\u77e5\u8bc6\uff08\u90a3\u662f\u4f60\u5927\u8111\u91cc\u5b9e\u9645\u5b58\u4e0b\u7684\u4e0d\u4f1a\u5fd8\u7684\u4e1c\u897f\uff09\u3002\u6211\u7684\u7237\u7237\u662f\u4e00\u4e2a\u6838\u7269\u7406\u5b66 \u5bb6\uff0c\u6570\u5341\u5e74\u7684\u5728\u5de5\u4f5c\u4e2d\u83b7\u5f97\u8fd9\u4e2a\u9886\u57df\u4e2d\u66f4\u6df1\u7684\u77e5\u8bc6\u8ba9\u4ed6\u4eca\u5929\u6210\u4e3a\u4e86\u4e00\u4e2a\u4e13\u5bb6\uff0c\u540c\u65f6\u4e5f\u8ba9\u4ed6\u6210 \u4e3a\u4e86\u4e00\u4e2a\u4f18\u79c0\u7684\u6570\u5b66\u5bb6\uff0c\u4e0d\u9519\u7684\u5316\u5b66\u5bb6\uff0c\u975e\u5e38\u597d\u7684\u5730\u7406\u5b66\u5bb6\uff0c\u8fd8\u662f\u4e00\u4e2a\u5408\u683c\u7684\u751f\u7269\u5b66\u5bb6\uff0c\u7b49 \u7b49\u3002\u53ea\u9700\u8981\u4e00\u4e9b \u89c2\u5bdf\u6027\u7684\u8bc1\u636e\u4f60\u5c31\u77e5\u9053\u5e7f\u5ea6\u7684\u77e5\u8bc6\u662f\u6df1\u5ea6\u7814\u7a76\u7684\u526f\u4ea7\u54c1\u3002</p>"},{"location":"musings/one_person_like_a_team/#learn-fast","title":"\u4f60\u5b66\u5f97\u8db3\u591f\u5feb\u5417\uff1f Learn fast","text":"<p>\u6709\u4e9b\u4e1c\u897f\u4f60\u9700\u8981\u82b1\u5f88\u957f\u7684\u65f6\u95f4\u624d\u80fd\u5b66\u4f1a\u3002\u6211\u5bf9\u81ea\u5df1\u6709\u4fe1\u5fc3\u4e0d\u9700\u8df3\u8dc3\u6027\u7684\u5c31\u80fd\u628a\u4e00\u4e2a\u6211\u4ece\u6ca1\u6709 \u89c1\u8fc7\u7684ORM\u6846\u67b6\u5b66\u4f1a\uff0c\u56e0\u4e3a\u6211\u4ee5\u524d\u7528\u8fc7\u76f8\u4f3c\u7684\u4e1c\u897f\uff0c\u5b83\u4eec\u5728\u6982\u5ff5\u4e0a\u662f\u76f8\u540c\u7684\u3002\u4f46\u662f\uff0c\u5982\u679c\u4f60 \u9700\u8981\u505a\u4e00\u4e2a\u628a\u6f14\u8bb2\u8f6c\u6210\u6587\u672c\u7684\u4e1c\u897f\u5462\uff0c\u8fd9\u5e76\u4e0d\u7b80\u5355\uff0c\u56e0\u4e3a\u4f60\u6ca1\u6709\u8db3\u591f\u591a\u7684\u80cc\u666f\u77e5\u8bc6\u3002\u4f60\u53ef\u4ee5 \u5e0c\u671b\u901a\u8fc7Google\u7ed9\u4f60\u63d0\u4f9b\u4e00\u4e9b\u4e1c\u897f\u8ba9\u4f60Copy/Paste\uff0c\u4f46\u8fd9\u662f\u4e00\u4e2a\u5f88\u4e0d\u597d\u7684\u505a\u6cd5\uff0c\u53ea\u6709\u5927\u5b66\u91cc \u7684\u505a\u7814\u7a76\u7684\u7814\u7a76\u5458\u5e72\u8fd9\u79cd\u70c2\u4e8b\u3002\u5982\u679c\u662f\u8981\u521b\u5efa\u4e00\u4e2a\u7f51\u7ad9\u5462\uff0c\u6211\u4eec\u90fd\u77e5\u9053\u600e\u4e48\u53bb\u521b\u5efa\u4e00\u4e2a\u7f51 \u7ad9\uff0c\u4f46\u662f\u6709\u591a\u5c11\u4eba\u4f1a\u77e5\u9053\u5982\u4f55\u67b6\u6784\u4e00\u4e2a\u6bcf\u5929\u6709\u4e00\u5343\u4e07\u7528\u6237\u8bbf\u95ee\u7684\u7f51\u7ad9\uff1f\u90a3\u4e48\u6211\u4eec\u9700\u8981\u53bb\u5b66\u7684 \u5c31\u662f\u600e\u4e48\u505a\u6269\u5bb9\u6269\u5c55\uff0c\u6211\u76f8\u4fe1\u4f60\u7684\u7528\u6237\u9700\u8981\u7b49\u4f60\u4e00\u5230\u4e24\u4e2a\u6708\u624d\u80fd\u628a\u901f\u5ea6\u63d0\u4e0a\u53bb:)\u3002\u662f\u7684\uff0c\u6211 \u592a\u7b28\u4e86\uff0c\u6240\u6709\u6211\u9700\u8981\u505a\u7684\u5c31\u662f\u53bb\u62db\u4e00\u4e2a\u4e13\u5bb6\uff0c\u7136\u540e\u2026\u2026\u55ef\u2026\u2026\u54e6\u7b49\u4e00\u4e0b\uff0c\u6211\u4eec\u7684\u5564\u9152\u548c\u4e09\u660e\u6cbb\u90fd \u4e0d\u591f\u4e86\u3002</p>"},{"location":"musings/one_person_like_a_team/#_4","title":"\u4e3a\u4ec0\u4e48\u6211\u5e94\u8be5\u5173\u5fc3","text":"<p>\u548c\u9ad8\u624b\u5728\u4e00\u8d77\u5de5\u4f5c\u771f\u662f\u8d85\u723d\u65e0\u6bd4\u3002\u4f60\u4e5f\u8bb8\u4ee5\u524d\u7ecf\u5386\u8fc7\uff0c\u4ed6\u4eec\u6bcf\u8bf4\u7684\u4e00\u4ef6\u4e8b\u603b\u662f\u65b0\u9c9c\u7684\uff0c\u603b\u662f \u6709\u610f\u601d\u7684\uff0c\u4f60\u80fd\u4ece\u4ed6\u4eec\u6bcf\u4e00\u884c\u7684\u4ee3\u7801\u4e2d\u5b66\u5230\u5f88\u591a\u5c0f\u6280\u5de7\uff0c\u4f60\u51e0\u4e4e\u53ef\u4ee5\u611f\u89c9\u5230\u4f60\u7684\u5927\u8111\u5728\u4e0d\u65ad \u81a8\u80c0:)\u3002\u4f60\u60f3\u4ece\u9ad8\u624b\u5b66\u4e60\uff0c\u6240\u4ee5\uff0c\u5982\u679c\u4f60\u8eab\u8fb9\u6ca1\u6709\u9ad8\u624b\uff0c\u90a3\u771f\u662f\u592a\u7cdf\u7cd5\u4e86\u3002\u56e0\u4e3a\u6bcf\u4e00\u4e2a\u4eba\u53ea \u4f1a\u53bb\u5b66\u90a3\u4e9b\u201c\u9700\u8981\u201d\u88ab\u5b66\u7684\u4e1c\u897f\uff0c\u6240\u4ee5\u6ca1\u6709\u4eba\u80fd\u6559\u7ed9\u4f60\u4efb\u4f55\u6709\u610f\u601d\u7684\u4e1c\u897f\u3002\u7136\u800c\uff0c\u8fd9\u4e9b\u9ad8\u624b\u4e5f \u603b\u662f\u60f3\u548c\u9ad8\u624b\u4e00\u8d77\u5de5\u4f5c\uff0c \u6240\u4ee5\uff0c\u4f60\u9700\u8981\u505a\u7684\u4e8b\u5c31\u662f\u786e\u5b9a\u80fd\u8ba9\u9ad8\u624b\u60f3\u548c\u4f60\u4e00\u8d77\u5de5\u4f5c\uff1f\u3002\u6309\u9700 \u6240\u5b66\u4e5f\u8bb8\u662f\u4e00\u4e2a\u4e0d\u9519\u7684\u6280\u80fd\uff0c\u4f46\u5176\u4e0d\u5e94\u8be5\u6210\u4e3a\u7a0b\u5e8f\u5458\u7684\u4ef7\u503c\u89c2\u3002\u662f\u7684\uff0c\u8fd9\u662f\u4e00\u4e2a\u5de8\u5927\u7684\u884c\u4e1a \u4f60\u4e0d\u53ef\u80fd\u5b66\u4e60\u6240\u6709\u7684\u4e1c\u897f\uff0c\u6240\u4ee5\uff0c\u4f60\u9700\u8981\u6709\u6240\u9009\u62e9\u5730\u628a\u5176\u5b66\u7cbe\uff0c\u53ea\u8981\u4f60\u6709\u8db3\u591f\u7684\u597d\u5947\u5fc3\u53bb\u8ddf \u4ece\u4f60\u7684\u5174\u8da3\uff0c\u4f60\u4f1a\u53d1\u73b0\u6700\u7ec8\u4f60\u4f1a\u771f\u6b63\u638c\u63e1\u5f88\u591a\u5f88\u591a\u5176\u5b83\u7684\u4e1c\u897f\u3002\u5982\u679c\u4f60\u80fd\u628a\u4f60\u7684\u5de5\u4f5c\u505a\u597d\uff0c \u90a3\u4e48\u5176\u5b83\u7684\u8d85\u7ea7\u725b\u4eba\u90fd\u4f1a\u60f3\u8981\u548c\u4f60\u4e00\u8d77\u5de5\u4f5c\uff0c\u56e0\u4e3a\u4ed6\u4eec\u53ef\u4ee5\u4ece\u4f60\u8fd9\u5b66\u5230\u4e1c\u897f\uff0c\u800c\u4f60\u53c8\u53ef\u4ee5\u4ece \u4ed6\u4eec\u90a3\u91cc\u5b66\u5230\u4e1c\u897f\u3002\u8fd9\u6837\u4e00\u6765\uff0c\u6240\u6709\u7684\u4eba\u90fd\u4f1a\u662f\u6210\u529f\u8005\u3002</p> <p>\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u6b63\u6587\u7ed3\u675f\u5206\u5272\u7ebf\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014\u2014</p> <p>\u6211\u5728\u8fd9\u91cc\u60f3\u8bf4\u51e0\u4e2a\u6211\u7684\u89c2\u70b9\uff1a</p> <ol> <li>\u6211\u7279\u522b\u540c\u610f\u4f5c\u8005\u7684\uff0c\u5982\u679c\u4f60\u628a\u4e00\u4e2a\u6280\u672f\u641e\u7cbe\u641e\u6df1\uff0c\u4f60\u7684\u77e5\u8bc6\u9762\u81ea\u7136\u4f1a\u5f88\u5e7f\u7684\u3002</li> <li>\u9762\u5bf9\u4e8e\u5404\u79cd\u6bd4\u8f83\u6df1\u7684\u4e1c\u897f\uff08\u6bd4\u5982C++\u7684\u5947\u6280\u6deb\u5de7\uff09\uff0c\u4f5c\u4e3a\u4e00\u4e2a\u5b9e\u7528\u4e3b\u4e49\u8005\u53ef\u80fd\u5f88\u4e0d\u5c51\uff0c\u4f46 \u662f\u4f60\u4e5f\u4f1a\u4e3a\u6b64\u800c\u5931\u53bb\u5f00\u9614\u773c\u754c\u7684\u673a\u4f1a\u3002</li> <li>\u4e3a\u660e\u5929\u505a\u4e00\u4e9b\u6280\u672f\u50a8\u5907\uff0c\u56e0\u4e3a\u4f60\u4e0d\u77e5\u9053\u4f60\u6240\u7f3a\u7684\u4e1c\u897f\u3002\u591a\u591a\u9605\u8bfb\uff0c\u591a\u591a\u4ea4\u6d41\uff0c\u6700\u597d\u80fd\u628a \u81ea\u5df1\u7684\u5fc3\u5f97\u5199\u4e0b\u6765\u5f3a\u5316\u81ea\u5df1\u7684\u8ba4\u8bc6\u548c\u8bb0\u5fc6\u3002</li> <li>\u4e0d\u8981\u53ea\u5bc4\u671b\u4e8e\u5728\u5de5\u4f5c\u4e2d\u5b66\u4e60\uff0c\u5de5\u4f5c\u6ca1\u6709\u8986\u76d6\u7684\u5730\u65b9\u4f60\u5c31\u4e0d\u5b66\u4e86\u3002\u771f\u6b63\u7684\u9ad8\u624b\u5728\u5de5\u4f5c\u4e4b\u4f59 \u90fd\u4f1a\u82b1\u5f88\u591a\u65f6\u95f4\u53bb\u81ea\u5df1\u7814\u7a76\u70b9\u4e1c\u897f\u7684\u3002</li> <li>\u6c38\u8fdc\u548c\u9ad8\u624b\u4e00\u8d77\u5de5\u4f5c\u3002\u5982\u679c\u4f60\u9762\u8bd5\u7684\u516c\u53f8\u7684\u9762\u8bd5\u592a\u7b80\u5355\u4e86\uff0c\u90a3\u5c31\u4e0d\u8981\u53bb\uff0c\u56e0\u4e3a\u7b80\u5355\u7684\u9762 \u8bd5\u901a\u5e38\u610f\u5473\u7740\u5e73\u5eb8\u3002\u53bb\u90a3\u6837\u7684\u516c\u53f8\u5de5\u4f5c\u53ea\u4f1a\u8ba9\u4f60\u7684\u5b66\u4e60\u901f\u5ea6\u53d8\u6162\uff0c\u751a\u81f3\u5012\u9000\u3002</li> <li>\u5f88\u591a\u4e1c\u897f\u5728\u6982\u5ff5\u4e0a\u662f\u76f8\u901a\u7684\uff0c\u5728\u54f2\u5b66\u5c42\u6b21\u4e0a\u662f\u76f8\u901a\u7684\uff0c\u8fd9\u662f\u4f60\u9700\u8981\u53bb\u8ffd\u6c42\u7684\u5b66\u4e60\u77e5\u8bc6\u7684 \u5883\u754c\u3002</li> <li>\u6700\u540eecho\u4e00\u4e0b\u4f5c\u8005\u7684\u8bdd\u2014\u2014\u201c\u5f88\u591a\u65f6\u5019\uff0c\u4f60\u7f3a\u5c11\u7684\u4e0d\u662f\u77e5\u8bc6\u800c\u662f\u70ed\u60c5\u201d\uff01</li> </ol> <p>\u8c22\u8c22\u5927\u5bb6\u53c8\u82b1\u4e86\u4e00\u70b9\u770b\u6211\u7684\u5520\u53e8\u3002\u5475\u5475\u3002</p>"},{"location":"musings/one_person_like_a_team/#_5","title":"\u968f\u60f3","text":"<p>\u76ee\u524d\u79bbT\u578b\u4eba\u624d(\u4e00\u4e2a\u4eba\u8981\u50cf\u4e00\u652f\u961f\u4f0d)\u6709\u5f88\u5927\u5dee\u8ddd\uff0c \u7ee7\u7eed\u52aa\u529b\uff0c \u5bf9\u7740\u81ea\u5df1\u7684\u5934\u8111\u548c\u5fc3\u7075\u62db \u5175\u4e70\u9a6c\u3002</p>"},{"location":"musings/one_person_like_a_team/#references","title":"References","text":"<ul> <li>https://skorks.com/2011/02/the-greatest-developer-fallacy-or-the-wisest-words-youll-ever-hear/</li> <li>https://coolshell.cn/articles/4235.html</li> </ul>"},{"location":"musings/ship/","title":"\u4eba\u751f\u5c31\u50cf\u4e00\u5217\u706b\u8f66","text":""},{"location":"musings/ship/#_1","title":"\u4eba\u751f\u5c31\u50cf\u4e00\u5217\u706b\u8f66","text":"<p>\u4eba\u751f\u5c31\u50cf\u4e00\u5217\u706b\u8f66\uff0c\u6709\u4eba\u4e0a\u8f66\uff0c\u6709\u4eba\u4e0b\u8f66\uff0c\u6ca1\u6709\u4eba\u4f1a\u966a\u4f60\u8d70\u5230\u6700\u540e\uff0c\u78b0\u5230\u4e86\u5373\u4fbf\u662f\u6709\u7f18\uff0c \u5373\u4f7f\u5230\u4e86\u8981\u4e0b\u8f66\u7684\u65f6\u5019\uff0c\u4e5f\u8981\u5fc3\u5b58\u611f\u6fc0\u5730\u544a\u522b\u3002\u751f\u547d\u53ea\u662f\u5982\u6b64\u524d\u884c\uff0c\u4e0d\u5fc5\u8bf4\u7ed9\u522b\u4eba\u542c\uff0c\u53ea \u5728\u5fc3\u91cc\u6700\u5e7d\u5fae\u7684\u5730\u65b9\uff0c\u65f6\u65f6\u70b9\u7740\u4e00\u76cf\u706f\uff0c\u706f\u4e0a\u5199\u4e24\u884c\u5b57\uff1a\u4eca\u65e5\u8e3d\u8e3d\u72ec\u884c\uff0c \u4ed6\u65e5\u5316\u8776\u98de \u53bb\u3002</p> <p>-- \u6797\u6e05\u7384\u300a\u5fc3\u65e0\u6302\u788d \u65e0\u6709\u6050\u60e7\u300b</p> <p>\u6700\u8fd1\u529e\u516c\u5ba4\u5f25\u6f2b\u7740\u4e00\u79cd\u7d27\u5f20\u548c\u6c89\u91cd\u7684\u6c1b\u56f4\uff0c\u597d\u50cf\u4e00\u5217\u706b\u8f66\u884c\u9a76\u5728\u6f2b\u957f\u7684\u96a7\u9053\u4e2d\uff0c\u524d\u65b9\u5e76\u6ca1\u6709 \u660e\u786e\u7684\u76ee\u6807\u548c\u7ec8\u70b9\u3002\u50cf\u706b\u8f66\u4e0a\u7684\u4e58\u5ba2\u4e00\u6837\uff0c\u6211\u4eec\u90fd\u5728\u540c\u4e00\u5217\u8f66\u4e0a\uff0c\u5374\u6709\u53ef\u80fd\u5728\u67d0\u4e2a\u8f66\u7ad9\u5206 \u522b\uff0c\u8d70\u5411\u4e0d\u540c\u7684\u65b9\u5411\u3002\u6709\u4e9b\u4eba\u5c06\u7ee7\u7eed\u5728\u8fd9\u8d9f\u5217\u8f66\u4e0a\u524d\u884c\uff0c\u800c\u53e6\u4e00\u4e9b\u4eba\u5219\u4e0d\u5f97\u4e0d\u4ece\u6b64\u544a\u522b\uff0c\u5bfb \u627e\u65b0\u7684\u706b\u8f66\u3002</p>"},{"location":"musings/ship/#_2","title":"\u4e58\u8f66\u8bb0\u5f55","text":"<ul> <li>2018 ~ 2020\uff0c Neusoft</li> <li>2020 ~ 2021\uff0c National Chip</li> <li>2021 ~ 2012\uff0c NSN\uff08CIeNET\uff09</li> <li>2012 ~ ?\uff0c  Nokia</li> </ul>"},{"location":"musings/ship/#_3","title":"\u672a\u6765\u7684\u65c5\u7a0b","text":"<p>\u804c\u573a\u7684\u5217\u8f66\u4e0d\u4f1a\u6c38\u8fdc\u505c\u7559\u5728\u4e00\u4e2a\u7ad9\u70b9\uff0c\u65e0\u8bba\u7ecf\u5386\u591a\u5c11\u8d77\u4f0f\uff0c\u5b83\u90fd\u4f1a\u7ee7\u7eed\u524d\u884c\u3002\u5728\u8fd9\u6761\u6f2b\u957f\u7684 \u804c\u4e1a\u8f68\u9053\u4e0a\uff0c\u6211\u4eec\u4f1a\u9047\u5230\u5404\u79cd\u4eba\uff0c\u4f53\u9a8c\u5404\u79cd\u98ce\u666f\uff0c\u800c\u8fd9\u4e9b\u90fd\u5c06\u6210\u4e3a\u6211\u4eec\u5b9d\u8d35\u7684\u8d22\u5bcc\u548c\u56de\u5fc6\u3002</p> <p>\u804c\u573a\u5c31\u50cf\u4e00\u5217\u706b\u8f66\uff0c\u6bcf\u4e00\u6bb5\u65c5\u7a0b\u90fd\u503c\u5f97\u94ed\u8bb0\u3002\ud83d\udcdd</p>"},{"location":"musings/the_art_of_patience/","title":"The Art of Patience","text":""},{"location":"musings/the_art_of_patience/#the-art-of-patience","title":"The Art of Patience","text":"<p>Some thought when I read the book <code>&lt;&lt;The Mythical Man-Month&gt;&gt;</code>.</p> <p>In our fast-paced modern world, instant gratification has become the norm. We expect things to happen quickly, whether it\u2019s receiving a package within a day or getting instant responses to our messages. This mindset often spills over into our daily experiences, where we seek convenience and speed. However, there is a timeless wisdom that lies in the saying:</p> <p>Good cooking takes time.If you are made to wait, it\u2019s to serve you better and to please you.</p> <p>In a world where efficiency often takes precedence, we must not overlook the importance of patience.</p> <p>We should appreciate the beauty of the process as much as the final outcome.</p>"},{"location":"musings/vault_change_license/","title":"Thought about Vault change the license","text":""},{"location":"musings/vault_change_license/#thought-about-vault-change-the-license","title":"Thought about Vault change the license","text":"<p>Background:</p> <p>HashiCorp announced a transition from the Mozilla Public License v2.0 (MPL 2.0) to the Business Source License (BSL, or BUSL) v1.1 for future releases of all products and several libraries. HashiCorp APIs, SDKs, Terraform providers, and almost all other libraries will remain MPL 2.0.</p> <p>Blew is how I\u2019m thinking about this situation and my plans for the future:</p>"},{"location":"musings/vault_change_license/#exploring-alternatives","title":"Exploring Alternatives","text":"<p>Given the uncertainty introduced by the new licensing terms, I\u2019ll start researching alternative open-source solutions for secret management. It\u2019s essential to identify software that aligns with my organization\u2019s requirements and has a licensing model that ensures long-term viability.</p>"},{"location":"musings/vault_change_license/#evaluating-open-source-options","title":"Evaluating Open-Source Options","text":"<p>While looking for alternatives, I\u2019ll consider various factors:</p> <ul> <li>License:</li> </ul> <p>I\u2019ll pay close attention to the licensing terms of the alternative software. I want to avoid situations where the license changes abruptly and affects my work again.</p> <ul> <li>Community:</li> </ul> <p>A vibrant and active community is a good sign of software\u2019s longevity and continuous development.</p> <ul> <li>Features:</li> </ul> <p>The alternative software should offer similar or better features compared to Vault to ensure a smooth transition.</p> <ul> <li>Documentation:</li> </ul> <p>Well-maintained documentation is crucial for ease of adoption and integration.</p> <ul> <li>Security:</li> </ul> <p>Security is paramount, especially when dealing with secret management. I\u2019ll ensure that the alternative software has a good track record in terms of security practices.</p>"},{"location":"musings/vault_change_license/#in-the-end","title":"In the end","text":"<p>In conclusion, the shift from MPL 2.0 to BSL for HashiCorp Vault has prompted me to carefully assess my options and make an informed decision about the software I use for secret management. While this change does introduce uncertainties, it\u2019s an opportunity to explore new solutions that align better with my organization\u2019s needs and provide a stable foundation for my work going forward.</p>"},{"location":"musings/reading_notes/","title":"Reading Notes","text":""},{"location":"musings/reading_notes/#reading-notes","title":"Reading Notes","text":"<ul> <li>\u591c\u822a\u897f\u98de</li> </ul>"},{"location":"musings/reading_notes/west_with_the_night/","title":"West with the night","text":""},{"location":"musings/reading_notes/west_with_the_night/#west-with-the-night","title":"West with the night","text":"<p>\u6709\u611f\u4e8e\u5c0f\u4f19\u4f34\u8981\u79bb\u5f00\uff0c\u60f3\u8d77&lt;&lt;\u591c\u822a\u897f\u98de&gt;&gt;\u7684\u4e00\u6bb5\u8bdd\u3002</p> <p>\u613f\u5927\u5bb6\u90fd\u6709\u4e00\u4e2a\u7f8e\u597d\u7684\u672a\u6765\u3002</p>"},{"location":"musings/reading_notes/west_with_the_night/#_1","title":"\u539f\u6587","text":"<p>\u67d0\u4e2a\u6709\u6124\u4e16\u5ac9\u4fd7\u503e\u5411\u7684\u4eba\u66fe\u8bf4\u8fc7\uff1a\u201c\u6211\u4eec\u6d3b\u7740\uff0c\u4ec0\u4e48\u90fd\u6ca1\u5b66\u5230\u3002\u201d \u7136\u800c\uff0c\u6211\u786e\u5b9e\u5b66\u5230\u4e86\u4e9b \u4e1c\u897f\u3002</p> <p>\u6211\u5b66\u4f1a\u4e86\u5982\u679c\u4f60\u5fc5\u987b\u79bb\u5f00\u4e00\u4e2a\u5730\u65b9\uff0c\u4e00\u4e2a\u4f60\u66fe\u7ecf\u4f4f\u8fc7\u3001\u7231\u8fc7\u3001\u6df1\u57cb\u7740\u6240\u6709\u8fc7\u5f80\u7684\u5730\u65b9\uff0c\u65e0 \u8bba\u4ee5\u4f55\u79cd\u65b9\u5f0f\u79bb\u5f00\uff0c\u90fd\u4e0d\u8981\u6162\u6162\u79bb\u5f00\uff0c\u8981\u5c3d\u4f60\u6240\u80fd\u51b3\u7edd\u5730\u79bb\u5f00\uff0c\u6c38\u8fdc\u4e0d\u8981\u56de\u5934\uff0c\u4e5f\u6c38\u8fdc\u4e0d \u8981\u76f8\u4fe1\u8fc7\u53bb\u7684\u65f6\u5149\u624d\u66f4\u597d\uff0c\u56e0\u4e3a\u5b83\u4eec\u5df2\u7ecf\u6d88\u4ea1\u3002\u8fc7\u53bb\u7684\u5c81\u6708\u770b\u6765\u5b89\u5168\u65e0\u5bb3\uff0c\u80fd\u88ab\u8f7b\u6613\u8de8 \u8d8a\uff0c\u800c\u672a\u6765\u85cf\u5728\u8ff7\u96fe\u4e4b\u4e2d\uff0c\u9694\u7740\u8ddd\u79bb\uff0c\u770b\u6765\u53eb\u4eba\u80c6\u602f\u3002\u4f46\u5f53\u4f60\u8e0f\u8db3\u5176\u4e2d\uff0c\u5c31\u4f1a\u4e91\u5f00\u96fe\u6563\u3002 \u6211\u5b66\u4f1a\u4e86\u8fd9\u4e00\u70b9\uff0c\u4f46\u5c31\u50cf\u6240\u6709\u4eba\u4e00\u6837\uff0c\u5f85\u5230\u5b66\u4f1a\uff0c\u4e3a\u65f6\u592a\u665a\u3002</p>"},{"location":"musings/reading_notes/west_with_the_night/#english-version","title":"English version","text":"<p>SOMEBODY WITH A FLAIR for small cynicism once said, \u2018We live and do not learn\u2019. But I have learned some things.</p> <p>I have learned that if you must leave a place that you have lived in and loved and where all your yesterdays are buried deep \u2014 leave it any way except a slow way, leave it the fastest way you can. Never turn back and never believe that an hour you remember is a better hour because it is dead. Passed years seem safe ones, vanquished ones, while the future lives in a cloud, formidable from a distance. The cloud clears as you enter it. I have learned this, but like everyone, I learned it late.</p>"}]}